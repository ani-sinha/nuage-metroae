---
#################
# VSD
#################

# QCOW2
- block:
  - block:
    - name: Find name of VSD QCOW2 Archive
      find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VSD*QCOW*"
      register: rc_vsd
    - debug: var=rc_vsd verbosity=1
    - block:
      - name: Clean up any previous unpacked files
        file: name="{{ nuage_unpacked_dest_path }}/vsd/qcow2" state=absent
      - name: Create subdirectory for unpacked files
        file: name="{{ nuage_unpacked_dest_path }}/vsd/qcow2" state=directory mode=0775
      - name: Unpack VSD QCOW2 Archive
        unarchive: src="{{ rc_vsd.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vsd/qcow2" list_files=yes
        register: rc_vsd_archive_files
      - debug: var=rc_vsd_archive_files verbosity=1
      when: rc_vsd.matched > 0 
    tags:
      - nuage-unpack
  when: ( myvsds is defined and 
        ( myvsds | map(attribute='target_server_type') | list | issuperset(["kvm"]) or myvsds | map(attribute='target_server_type') | list | issuperset(["heat"]) ) ) or
        ( myvcins is defined and
        ( myvcins | map(attribute='target_server_type') | list | issuperset(["kvm"]) or myvcins | map(attribute='target_server_type') | list | issuperset(["heat"]) ) )
  tags:
    - vsd

# OVA
- block:
  - block:
    - name: Find name of VSD OVA Archive
      find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VSD*OVA*"
      register: rc_vsd
    - debug: var=rc_vsd verbosity=1
    - block:
      - name: Clean up any previous unpacked files
        file: name="{{ nuage_unpacked_dest_path }}/vsd/ova" state=absent
      - name: Create subdirectory for unpacked files
        file: name="{{ nuage_unpacked_dest_path }}/vsd/ova" state=directory mode=0755
      - name: Unpack VSD OVA Archive
        unarchive: src="{{ rc_vsd.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vsd/ova" list_files=yes
        register: rc_vsd_archive_files
      - debug: var=rc_vsd_archive_files verbosity=1
      when: rc_vsd.matched > 0 
    tags:
      - nuage-unpack
  when: ( myvsds is defined and 
        myvsds | map(attribute='target_server_type') | list | issuperset(["vcenter"]) ) or
        ( myvcins is defined and
        myvcins | map(attribute='target_server_type') | list | issuperset(["vcenter"]) )
  tags:
    - vsd

###################
# VSTAT - Stats VM
###################

- block:
  - block:
    - name: Find name of Stats VM Archive
      find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-elastic-\d.*" use_regex=true
      register: rc_vstat
    - debug: var=rc_vstat verbosity=1
    - block:
      - name: Clean up unpacked files from previous run
        file: name="{{ nuage_unpacked_dest_path }}/vstat/" state=absent
      - name: Ensure binaries target directory exists for Stats VM
        file: name="{{ nuage_unpacked_dest_path }}/vstat/" state=directory mode=0775
      - name: Unpack Stats VM Archive
        unarchive: src="{{ rc_vstat.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vstat" list_files=yes
        register: rc_vstat_archive_files
      - debug: var=rc_vstat_archive_files verbosity=1
      when: rc_vstat.matched > 0 
    when: myvstats is defined
    tags:
      - nuage-unpack
  when: myvstats is defined
  tags:
    - vstat
 
###################
# VSC
###################

- block:
  - block:
    - name: Find name of VSC Archive
      find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VSC*"
      register: rc_vsc
    - debug: var=rc_vsc verbosity=1
    - block:
      - name: Clean up unpacked directory from previous runs
        file: name="{{ nuage_unpacked_dest_path }}/vsc/" state=absent
      - name: Ensure binaries target directory exists for VSC QCOW2 
        file: name="{{ nuage_unpacked_dest_path }}/vsc/" state=directory mode=0775
      - name: Unpack VSC Archive
        unarchive: src="{{ rc_vsc.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vsc/"  list_files=yes
        register: rc_vsc_archive_files
      - debug: var=rc_vsc_archive_files verbosity=1
      when: rc_vsc.matched > 0
    tags:
      - nuage-unpack
  when: myvscs is defined
  tags:
    - vsc

################
# VRS 
################

# TODO: Optimize the looping through vrs arch types in case of large deployments
- block:
  - name: Create facts to be used with vrs deploy if vrs is Debian 14.04 based
    set_fact: vrs_u14_04="True"
    when: item.vrs_os_type == "u14.04"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Debian 16.04 based
    set_fact: vrs_u16_04="True"
    when: item.vrs_os_type == "u16.04"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Redhat el6 based
    set_fact: vrs_el6="True"
    when: item.vrs_os_type == "el6"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Redhat el7 based
    set_fact: vrs_el7="True"
    when: item.vrs_os_type == "el7"
    with_items: "{{ myvrss }}"

  - name: initialize vrs_target_os_is_supported to be evaluated for vrs supported target os types
    set_fact: vrs_target_os_is_supported="True"

  - name: Set facts if vrs os type is set to a supported version
    set_fact: vrs_target_os_is_supported="False"
    when: item.vrs_os_type not in supported_vrs_target_os_types
    with_items: "{{ myvrss }}"

  - assert:
      that: 
        - "vrs_target_os_is_supported == True"
      msg: "unsupported OS type/typo in build.yml. Supported OS Types are el6,el7,u14.04,u16.04"

  - debug: msg="vrs_u14_04 is set to "{{ vrs_u14_04 }}" " verbosity=1
    when: vrs_u14_04 is defined

  - debug: msg="vrs_u16_04 is set to "{{ vrs_u16_04 }}" " verbosity=1
    when: vrs_u16_04  is defined

  - debug: msg="vrs_el6 is set to "{{ vrs_el6 }}" " verbosity=1
    when: vrs_el6 is defined

  - debug: msg="vrs_el7 is set to "{{ vrs_el7 }}" " verbosity=1
    when: vrs_el7 is defined

  - block:
    - name: Find name of VRS Archive
      find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VRS*"
      register: rc_vrs
    - debug: var=rc_vrs verbosity=1
    - block:
      - name: Clean up after any previous unpack runs
        file: name="{{ nuage_unpacked_dest_path }}/vrs/" state=absent
      - name: Ensure that VRS binary target directory exists
        file: name="{{ nuage_unpacked_dest_path }}/vrs/" state=directory mode=0775
      - block:
        - name: Find name of EL6 VRS Archive
          find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VRS*-el6*"
          register: rc_vrs_el6
        - debug: var=rc_vrs_el6 verbosity=1
        - name: Ensure that VRS binary target directory exists if vrs is el6
          file: name="{{ nuage_unpacked_dest_path }}/vrs/el6" state=directory mode=0775
          when: vrs_el6 is defined
        - name: Unpack VRS Archive
          unarchive: src="{{ item.path }}" dest="{{ nuage_unpacked_dest_path }}/vrs/el6"  list_files=yes
          with_items: "{{ rc_vrs_el6.files }}"
          register: rc_vrs_el6_archive_files
        - debug: var=rc_vrs_el6_archive_files verbosity=1
        when: vrs_el6 is defined
      - block:
        - name: Find name of EL7 VRS Archive
          find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VRS*-el7*"
          register: rc_vrs_el7
        - debug: var=rc_vrs_el7 verbosity=1
        - name: Ensure that VRS binary target directory exists if vrs is el7
          file: name="{{ nuage_unpacked_dest_path }}/vrs/el7" state=directory mode=0775
          when: vrs_el7 is defined  
        - name: Unpack VRS Archive
          unarchive: src="{{ item.path }}" dest="{{ nuage_unpacked_dest_path }}/vrs/el7"  list_files=yes
          with_items: "{{ rc_vrs_el7.files }}"
          register: rc_vrs_el7_archive_files
        - debug: var=rc_vrs_el7_archive_files verbosity=1
        when: vrs_el7 is defined
      - block:
        - name: Find name of ubuntu-14.04 VRS Archive
          find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VRS*-ubuntu.14.04*"
          register: rc_vrs_u14_04
        - debug: var=rc_vrs_u14_04 verbosity=1
        - name: Ensure that VRS binary target directory exists if vrs is ubuntu 14.04
          file: name="{{ nuage_unpacked_dest_path }}/vrs/u14_04" state=directory mode=0775
          when: vrs_u14_04 is defined
        - name: Unpack VRS Archive
          unarchive: src="{{ item.path }}" dest="{{ nuage_unpacked_dest_path }}/vrs/u14_04"  list_files=yes
          with_items: "{{ rc_vrs_u14_04.files }}"
          register: rc_vrs_u14_04_archive_files
        - debug: var=rc_vrs_u14_04_archive_files verbosity=1
        when: vrs_u14_04 is defined
      - block:
        - name: Find name of ubuntu-16.04 VRS Archive
          find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VRS*-ubuntu.16.04*"
          register: rc_vrs_u16_04
        - debug: var=rc_vrs_u16_04 verbosity=1
        - name: Ensure that VRS binary target directory exists if vrs is ubuntu 16.04
          file: name="{{ nuage_unpacked_dest_path }}/vrs/u16_04" state=directory mode=0775
          when: vrs_u16_04 is defined
        - name: Unpack VRS Archive
          unarchive: src="{{ item.path }}" dest="{{ nuage_unpacked_dest_path }}/vrs/u16_04"  list_files=yes
          with_items: "{{ rc_vrs_u16_04.files }}"
          register: rc_vrs_u16_04_archive_files
        - debug: var=rc_vrs_u16_04_archive_files verbosity=1
        when: vrs_u16_04 is defined
      when: rc_vrs.matched > 0
    tags:
      - nuage-unpack
  when: myvrss is defined
  tags:
    - vrs

################
# Docker-Monitor
#################

- block:
  - block:
    - name: Find name of Docker-Monitor Archive
      find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-Docker-Monitor*"
      register: rc_dockermon
    - debug: var=rc_dockermon verbosity=1
    - block:
      - name: Clean up after previous unpack runs
        file: name="{{ nuage_unpacked_dest_path }}/dockermon/" state=absent
      - name: Create directory to unpack Docker-Monitor to
        file: name="{{ nuage_unpacked_dest_path }}/dockermon/" state=directory mode=0775
      - name: Unpack Docker-Monitor Archive
        unarchive: src="{{ rc_dockermon.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/dockermon/"  list_files=yes
        register: rc_dockermon_archive_files
        when: rc_dockermon.matched > 0
      - debug: var=rc_dockermon_archive_files verbosity=1
    tags:
      - nuage-unpack
  when: dockermon_install | default(false)
  tags:
    - dockermon

#####################
# VNS Utility/ NSGV
#####################

- block:
  - block:
    - name: Find name of VNS Archive
      find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-VNS*"
      register: rc_vns
    - debug: var=rc_vns verbosity=1
    - block:
      - name: Clean up files from previous unpack run
        file: name="{{ nuage_unpacked_dest_path }}/vns" state=absent
      - name: Ensure target directory exists for VNS
        file: name="{{ nuage_unpacked_dest_path }}/{{ item }}" state=directory mode=0775
        with_items:
          - "vns/nsg/"
          - "vns/utils/"
          - "vns/nsg/aws"
      - name: Unpack VNS Archive
        unarchive: src="{{ rc_vns.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vns" list_files=yes
        register: rc_vns_archive_files
      when: rc_vns.matched > 0
    - name: Find name of NSG and Utils archive files
      find: path="{{ nuage_unpacked_dest_path }}/vns/" pattern="{{ item }}"
      with_items:
        - "Nuage-VNS-NSG-*"
        - "Nuage-VNS-Utils-*"
      register: rc_vns_archives
    - debug: var=rc_vns_archives verbosity=1
    - name: Unpack VNS NSG and Utils archive files
      unarchive: src="{{ rc_vns_archives.results[item.0].files[0].path }}" dest="{{ nuage_unpacked_dest_path }}/{{ item.1 }}"
      register: rc_vns_archives_files
      with_indexed_items:
        - "vns/nsg/"
        - "vns/utils/"
      when: rc_vns_archives.results[0].matched > 0 and rc_vns_archives.results[1].matched > 0
    - block:
      # Don't do AWS just yet...
      - name: Find name of NSG-AWSs archive files
        find: path="{{ nuage_unpacked_dest_path }}/vns/nsg" pattern="{{ item }}"
        with_items:
          - "Nuage-NSG-*AWS*"
        register: rc_vns_archives
      - debug: var=rc_vns_archives verbosity=1
      - name: Unpack VNS NSG and Utils archive files
        unarchive: src="{{ rc_vns_archives.results[item.0].files[0].path }}" dest="{{ nuage_unpacked_dest_path }}/{{ item.1 }}"
        register: rc_vns_archives_files
        with_indexed_items:
          - "vns/nsg/aws"
      when: false
    tags:
      - nuage-unpack
  when: myvnsutils is defined and mynsgvs is defined

##########################
## Nuage OpenStack Plugins
##########################

- block:
  - block:
    - name: Find name of Nuage OpenStack Plugin Archive
      find: path="{{ nuage_packed_src_path }}"  pattern="Nuage-openstack*"
      register: rc_nuage_os
    - debug: var=rc_nuage_os verbosity=1
    - block:
      - name: Clean up after previous unpack runs
        file: name="{{ nuage_unpacked_dest_path }}/nuage_os/" state=absent
      - name: Create directory to unpack Nuage OpenStack plugins
        file: name="{{ nuage_unpacked_dest_path }}/nuage_os/" state=directory mode=0775
      - name: Unpack Nuage OpenStack Archive
        unarchive: src="{{ rc_nuage_os.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/nuage_os/"  list_files=yes
        register: rc_nuage_os_archive_files
      - debug: var=rc_nuage_os_archive_files
      when: rc_nuage_os.matched > 0
    tags:
      - nuage_unpack
  when: 
    - nuage_os_release is defined
    - nuage_target_architecture == "el6" or nuage_target_architecture == "el7"
  tags:
    - nuage_os
