---
- name: Get the os env file contents from the controller
  shell: cat "{{ os_env_file }}"
  register: os_env_contents
  remote_user: root

- name: Print the os env file contents when verbosity >= 1, otherwise skip
  debug: msg="{{ os_env_contents }}" verbosity=1

- name: Create a local variable with the parsed os env
  set_fact: os_env="{{ os_env_contents.stdout|os_env_dict }}"

- name: Print the parsed os env file contents when verbosity >= 1, otherwise skip
  debug: msg="{{ os_env }}" verbosity=1

- name: Get the output of `openstack stack list` commend.
  shell: openstack stack list
  environment: "{{ os_env }}"
  register: os_stack_list
  remote_user: root

- debug: var=os_stack_list verbosity=1

- name: set a variable with `openstack stack list` in json
  set_fact:
    os_stack_list_json: "{{ os_stack_list.stdout|openstack_stack_list_to_json(stack_older_than_hours, use_utc) }}"

- debug: var=os_stack_list_json verbosity=1

- name: set a variable with just the stacks in json
  set_fact:
    os_stack_stacks_json: "{{ os_stack_list_json|json_query('Stacks')|default( [] ) }}"

- debug: var=os_stack_stacks_json verbosity=1

- block:
  - name: Delete the ubuntu VMs first
    shell: "openstack stack delete {{ item|json_query('Name') }}"
    environment: "{{ os_env }}"
    remote_user: root
    when: "'u16' in item|json_query('Name') or 'u14' in item|json_query('Name')"
    with_items:
      - "{{ os_stack_stacks_json }}"

  - name: Use ci-destroy to clean the rest
    include_role:
      name: ci-destroy
    vars:
      target_server_type: "heat"
      inventory_hostname: "{{ item|json_query('Name') }}"
      force: True
    when: "'u16' not in item|json_query('Name') and 'u14' not in item|json_query('Name')"
    with_items:
      - "{{ os_stack_stacks_json }}"
  when: not scan_only|default(False)
