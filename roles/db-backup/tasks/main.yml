---
- block:
  - name: Put all domains in maintainance mode
    local_action: command python {{playbook_dir}}/scripts/enable_maintainance_mode.py {{playbook_dir}}
    register: mode

  - name: Search for errors in the enable maintainance mode script
    assert: 
      that: "not 'ERROR' in mode.stdout"
      msg: "Failed to enable maintainance mode on l3/l2 domains in VSD"
    
  - name: Reading the status of the DB upgrade directory
    stat:
      path: "/var/lib/mysql/nuageDbUpgrade/"
    register: db_dir
    remote_user: root
  
  - name: Verify that DB upgrade directory exists
    assert: 
      that: 
        - db_dir.stat.exists == True
      msg: "nuageDbUpgrade dir does not exist"

  - name: Check that the database is properly identified by MySQL
    shell: "mysql -e 'show databases;' | grep nuageDbUpgrade"
    register: db
    remote_user: root
  
  - name: Verify the upgrade database name
    assert: 
      that: 
        - "'nuageDbUpgrade' == db.stdout"
      msg: "Could not find nuageDbUpgrade database in mysql"

  - name: Update gateway purge timer 
    local_action: command python {{playbook_dir}}/scripts/vsd_sys_config.py {{playbook_dir}}
    register: update
 
  - name: Search for errors in the gateway purge timer update
    assert: 
      that: "not 'ERROR' in update.stdout"
      msg: "Could not find nuageDbUpgrade database in MySQL"

  - name: Purge the alarms and event history from database
    shell: "{{ item }}"
    with_items: "{{ purge_cmd }}"
    remote_user: root
  
  - name: List VSD-related mounts
    shell: "mount | grep VSD | grep /media/CDROM"
    register: mount_file
    remote_user: root

  - name: Print mount output when verbosity >= 1
    debug: var=mount_file verbosity=1

  - name: Verify that the ISO is mounted
    assert: 
      that:
        - "'.iso' in mount_file.stdout"
      msg: "Did not find iso file in mount path"

  - name: Run backup script from mount location
    shell: "{{ backup_cmd }}"
    remote_user: root
 
  - name: Find files created in /tmp/backup
    find:
      path: "/tmp/backup"
      patterns: "{{ item }}"
    with_items:
      - "myappconfiguration-*.gz"
      - "mycertificate-*.gz"
      - "mydatabase-*.gz" 
    remote_user: root
    register: lst_files

  - name: Verify files found in /tmp/backup
    assert:
      that: "{{ item.matched }} > 0"
      msg: "Could not find file {{ item.item }}"
    with_items: "{{ lst_files.results }}"
  
  #TODO: Update Readme 
  #The backup_machine should have password less access to vsd node1 where backup is generated
  - name: Copy the backup to {{ backup_machine }}
    synchronize:
      src: "/tmp/backup/"
      dest: "/tmp/backup/"
      mode: pull
    remote_user: root
    delegate_to: "{{ backup_machine }}"
  when: inventory_hostname == groups['vsds'][0]
