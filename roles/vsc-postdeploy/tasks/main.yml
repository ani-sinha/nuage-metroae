---
- name: Run verification script for VSC
  local_action: command python {{ playbook_dir }}/scripts/vsc_verify.py {{ interfaces.mgmt.ip }} {{ retry_timeout }} {{ playbook_dir }}
  register: pass

- name: Verification Result Failure Status
  fail: msg={{ pass.stdout }}
  when: pass.stdout | search("(?i)Error")

- name: Verification Result Success Status
  debug: var=pass.stdout

- block:
  - name: Install pip on VSD
    command: easy_install pip
    delegate_to: "{{ vsd_fqdn }}"
    remote_user: root

  - name: Install pexpect on VSD
    pip:
      name: pexpect
    delegate_to: "{{ vsd_fqdn }}"
    remote_user: root

  - name: Create and transfer certs from VSD to {{ inventory_hostname }}
    expect:
     command: "{{ create_certs }}"
     responses:
       (?i)password: "admin"
    delegate_to: "{{ vsd_fqdn }}"
  
  - name: Create tls-profile on {{ inventory_hostname }}
    sros_config:
      lines:
        - configure system security tls-profile vns-tls-profile own-key "cf1:\{{ xmpp.username }}-Key.pem"
        - configure system security tls-profile vns-tls-profile own-certificate "cf1:\{{ xmpp.username }}.pem"
        - configure system security tls-profile vns-tls-profile ca-certificate "cf1:\{{ xmpp.username }}-CA.pem"
        - configure system security tls-profile vns-tls-profile no shutdown
        - configure vswitch-controller open-flow tls-profile vns-tls-profile
        - configure vswitch-controller xmpp tls-profile vns-tls-profile
      provider: "{{ creds }}"
      save: yes
    delegate_to: "{{ target_server }}"
    remote_user: root
    vars:
      creds:
        host: "{{ interfaces.mgmt.ip }}"
        username: admin
        password: admin
        transport: cli
  when: vns == True
