---
- name: Set local variable with vmname
  set_fact:
    vm_name: "{{ vmname }}"

- name: Query Target Server facts
  action: setup
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Check target for supported OS
  fail: msg="Unsupported OS family ({{ ansible_os_family }})"
  when: ansible_os_family not in vsc_target_server_os_family_list

- name: Check target memory
  fail: msg="Not enough memory ({{ ansible_memtotal_mb }})"
  when: ansible_memtotal_mb < vsc_target_server_memory_mb_min

- name: Check target cores
  fail: msg="Not enough cores ({{ ansible_processor_vcpus }})"
  when: ansible_processor_vcpus < vsc_target_server_vcpus_min

- name: Check target bridges
  fail: msg="Required network bridges not found"
  when: (mgmt_bridge not in ansible_interfaces) or
        (data_bridge not in ansible_interfaces)

- block:
  - name: Check if required OS packages are installed
    command: rpm -q qemu-kvm libvirt bridge-utils libguestfs-tools libvirt-python
    register: rpm_check
    ignore_errors: True

  - name: Print rpm_check when verbosity >= 1
    debug: var=rpm_check verbosity=1

  - name: If RedHat, install packages for RedHat OS family distros
    yum: name={{ item }} state=present
    with_items:
     - qemu-kvm
     - libvirt
     - bridge-utils
     - libguestfs-tools
     - libvirt-python
    when: rpm_check.rc == 1

  - name: Make sure libvirtd has started
    service:
      name: libvirtd
      enabled: yes
      state: started

  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- include_role:
    name: check-node-running

- name: Display if skipping predeploy
  debug:
    msg:
      - "****************************************************"
      - "Skipping VSC predeploy because it is already present"
      - "****************************************************"
  when: vsc_present

- block:

    - name: Create libvirt image directory
      file: path={{ images_path }}/{{ vmname }}
            state=directory
            owner={{ libvirt.user }}
            group={{ libvirt.group }}

    - name: Copy the VSC qcow2 image to virt images diectory
      copy: src={{ vsc_qcow2_path }}/{{ vsc_qcow2_file_name }}
            dest={{ images_path }}/{{ vmname }}/{{ inventory_hostname }}.qcow2
            owner={{ libvirt.user }}
            group={{ libvirt.group }}

    - name: Setup VSC temporary configuration files
      template: src={{ item }}.j2 backup=no dest={{ images_path }}/{{ vmname }}/{{ item }}
      with_items:
        - bof.cfg
        - config.cfg

    - name: Copy temporary configuration files to the VSC image
      command: guestfish --rw -a {{ images_path }}/{{ vmname }}/{{ inventory_hostname }}.qcow2 -m {{ vsc_partition }} copy-in {{ images_path }}/{{ vmname }}/{{ item }} /
      with_items:
        - bof.cfg
        - config.cfg

    - name: Remove temporary configuration files
      file: path={{ images_path }}/{{ vmname }}/{{ item }} state=absent
      with_items:
        - bof.cfg
        - config.cfg

    - name: Define new VSC VM
      virt: name={{ vmname }}
            command=define
            xml="{{ lookup('template', 'vsc.xml.j2') }}"
            uri=qemu:///system

    - name: Mark VSC as autostart
      virt: name={{ vmname }}
            state=running
            autostart=True
            uri=qemu:///system

  when: not vsc_present
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

