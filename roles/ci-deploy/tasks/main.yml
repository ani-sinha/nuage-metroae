---
- include: ci_c7_deploy_helper.yml
- include: ci_u14_deploy_helper.yml
- include: ci_u16_deploy_helper.yml

- name: Get {{ inventory_hostname }} details from OS facts
  os_server_facts:
    auth:
      "{{ os_auth }}"
    server: "{{ inventory_hostname }}"
  register: ci_server
  delegate_to: 127.0.0.1

- name: get the centos 7 vrs temp file contents
  command: cat /tmp/centos7_vrs_ip
  register: centos7_vrs_ip
  run_once: true
  delegate_to: 127.0.0.1

- name: register target_server
  set_fact :
    target_server: "{{ centos7_vrs_ip.stdout }}"
  run_once: true
  delegate_to: 127.0.0.1

- name: get the u14 vrs temp file contents
  command: cat /tmp/u14_vrs_ip
  register: u14_vrs_ip
  run_once: true
  delegate_to: 127.0.0.1

- name: register u14 vrs target_server
  set_fact :
    vrs_u14_target_server: "{{ u14_vrs_ip.stdout }}"
  run_once: true
  delegate_to: 127.0.0.1

#- name: get the u16 vrs temp file contents
#  command: cat /tmp/u16_vrs_ip
#  register: u16_vrs_ip
#  run_once: true
#  delegate_to: 127.0.0.1

#- name: register u16 vrs target_server
#  set_fact :
#    vrs_u16_target_server: "{{ u16_vrs_ip.stdout }}"
#  run_once: true
#  delegate_to: 127.0.0.1

- debug: var=target_server
  delegate_to: 127.0.0.1

- debug: var=vrs_u14_target_server
  delegate_to: 127.0.0.1

- name: Update test build file
  template:
    src: "{{ playbook_dir }}/test/files/build.yml.all.j2"
    dest: "{{ playbook_dir }}/test/files/build.yml.all"
  delegate_to: 127.0.0.1
  run_once: true

- name: Update test build file for VSDOnly
  template:
    src: "{{ playbook_dir }}/test/files/build.yml.VSDOnly.j2"
    dest: "{{ playbook_dir }}/test/files/build.yml.VSDOnly"
  delegate_to: 127.0.0.1
  run_once: true

- name: Update test build file for VSCOnly
  template:
    src: "{{ playbook_dir }}/test/files/build.yml.VSCOnly.j2"
    dest: "{{ playbook_dir }}/test/files/build.yml.VSCOnly"
  delegate_to: 127.0.0.1
  run_once: true

- name: Update test build file for VSTATOnly
  template:
    src: "{{ playbook_dir }}/test/files/build.yml.VSTATOnly.j2"
    dest: "{{ playbook_dir }}/test/files/build.yml.VSTATOnly"
  delegate_to: 127.0.0.1
  run_once: true


- name: Update the setup file with new test build file
  replace:
    dest: "{{ playbook_dir }}/test/files/setup.yml"
    regexp: 'yml\.\{\{ ansible_os_family \}\}'
    replace: 'yml.all'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root
  run_once: true

- name: Update the VSDOnly setup file with new VSDOnly build file
  replace:
    dest: "{{ playbook_dir }}/test/files/setup.yml.VSDOnly"
    regexp: 'VSDOnly\.\{\{ ansible_os_family \}\}'
    replace: 'VSDOnly'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root
  run_once: true

- name: Update the VSCOnly setup file with new VSCOnly build file
  replace:
    dest: "{{ playbook_dir }}/test/files/setup.yml.VSCOnly"
    regexp: 'VSCOnly\.\{\{ ansible_os_family \}\}'
    replace: 'VSCOnly'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root
  run_once: true

- name: Update the VSTATOnly setup file with new VSTAT build file
  replace:
    dest: "{{ playbook_dir }}/test/files/setup.yml.VSTATOnly"
    regexp: 'VSTATOnly\.\{\{ ansible_os_family \}\}'
    replace: 'VSTATOnly'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root
  run_once: true

- name: Update the VRSOnly setup file with new VRS build file
  replace:
    dest: "{{ playbook_dir }}/test/files/setup.yml.VRSOnly"
    regexp: 'VRSOnly\.\{\{ ansible_os_family \}\}'
    replace: 'VRSOnly'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root
  run_once: true

- name: Update the VNSOnly setup file with new VNS build file
  replace:
    dest: "{{ playbook_dir }}/test/files/setup.yml.VNSOnly"
    regexp: 'VNSOnly\.\{\{ ansible_os_family \}\}'
    replace: 'VNSOnly'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root
  run_once: true

- name: Update /etc/hosts file on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/hosts
    line: "{{ item }}"
  with_items: "{{vsp_ips}}"
  remote_user: root
  run_once: true


- name: Configure dnsmasq on {{ inventory_hostname }}
  copy:
    src: "{{playbook_dir}}/roles/ci-deploy/files/dnsmasq.conf"
    dest: "/etc/dnsmasq.conf"
  remote_user: root

# Could not get over interface booting order issue in Ubuntu cloud image
# This is a temp task
- block:
  - name: Change default route on Debian images
    command: "route del -net 0.0.0.0/0"
    remote_user: root

  - name: Add mgmt bridge as default route
    command: "route add -net 0.0.0.0/0 gw {{ network_address }}.1"
    remote_user: root
  when: ansible_os_family == 'Debian'

- name: Enable dnsmasq
  command: chkconfig dnsmasq on
  remote_user: root
  when: ansible_os_family == 'RedHat'

- name: Start dnsmasq
  command: service dnsmasq restart
  remote_user: root

- name: Copy ntp conf
  template:
    src: "ntp.conf.j2"
    dest: "/etc/ntp.conf"
  remote_user: root

- name: Stop the ntpd service if running
  command: service ntpd stop
  remote_user: root
  when: ansible_os_family == 'RedHat'

- name: Stop the ntpd service if running
  command: service ntp stop
  remote_user: root
  when: ansible_os_family == 'Debian'

- name: Manually sync time with ntp server
  command: ntpdate -u "{{ ntp_server_list[0] }}"
  remote_user: root
  when: ansible_os_family == 'RedHat'

- name: Start ntpd on {{ inventory_hostname }}
  command: service ntpd start
  remote_user: root
  when: ansible_os_family == 'RedHat'

- name: Start ntpd on {{ inventory_hostname }}
  command: service ntp start
  remote_user: root
  when: ansible_os_family == 'Debian'

- block:
  - name: check ntp sync state
    shell: ntpstat | awk 'NR==1{print $1}'
    register: sync_status
    until: sync_status.stdout == "synchronised"
    retries: 4
    delay: 5
    ignore_errors: yes
    remote_user: root

  - block:
    - name: restart ntp if it hasn't synced yet
      command: service ntpd restart
      remote_user: root
    - name: check ntp sync state
      shell: ntpstat | awk 'NR==1{print $1}'
      register: retry_sync_status
      until: retry_sync_status.stdout == "synchronised"
      retries: 4
      delay: 5
      remote_user: root
    when: sync_status.stdout != "synchronized"

  - name: Clean yum cache
    command: "rm -fr /var/cache/yum/*"
    remote_user: root

  - name: Clean yum
    command: "yum clean all"
    remote_user: root

  - name: Update yum
    yum:
      name: '*'
      state: latest
    remote_user: root

  when: ansible_os_family == 'RedHat'

- block:
  - name: check ntp sync state
    shell: ntpq -p | grep '*' | awk 'NR==1{print $1}'
    register: sync_status
    until: sync_status.stdout != ""
    retries: 4
    delay: 5
    ignore_errors: yes
    remote_user: root

  - block:
    - name: restart ntp if it hasn't synced yet
      command: service ntpd restart
      remote_user: root
    - name: check ntp sync state
      shell: ntpq -p | grep '*' | awk 'NR==1{print $1}'
      register: retry_sync_status
      until: retry_sync_status.stdout != ""
      retries: 4
      delay: 5
      remote_user: root
    when: sync_status.stdout == ""
  when: ansible_os_family == 'Debian'

- name: Update the vsd ram
  lineinfile:
    dest: "{{ playbook_dir }}/roles/vsd-predeploy/vars/main.yml"
    regexp: 'vsd_ram:'
    line: 'vsd_ram: 9147483'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root

- name: Update the vsc ram
  lineinfile:
    dest: "{{ playbook_dir }}/roles/vsc-predeploy/vars/main.yml"
    regexp: 'vsc_ram:'
    line: 'vsc_ram: 2147483'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root

- name: Update the vstat ram
  lineinfile:
    dest: "{{ playbook_dir }}/roles/vstat-predeploy/vars/main.yml"
    regexp: 'vstat_ram:'
    line: 'vstat_ram: 2147483'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root

- name: Update the vnsutil ram
  lineinfile:
    dest: "{{ playbook_dir }}/roles/vnsutil-predeploy/vars/main.yml"
    regexp: 'vnsutil_ram:'
    line: 'vnsutil_ram: 2147483'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root

- name: Update the nsgv ram
  lineinfile:
    dest: "{{ playbook_dir }}/roles/nsgv-predeploy/vars/main.yml"
    regexp: 'nsgv_ram:'
    line: 'nsgv_ram: 2147483'
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root
