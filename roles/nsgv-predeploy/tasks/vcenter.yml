---
- name: Gathering info on VM
  connection: local
  vmware_guest:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ inventory_hostname }}"
    validate_certs: no
    state: gatherfacts
  register: nsgv_vm_facts
  ignore_errors: yes

- debug: var=nsgv_vm_facts verbosity=1

- name: Verify the NSGV VM does not exist
  assert: 
    that: "nsgv_vm_facts.failed is defined"
    msg: "VM {{ inventory_hostname }} already exists, quiting"

- name: Deploy NSGV OVA on vCenter
  connection: local
  command: >
    {{ vcenter.ovftool }}
    --acceptAllEulas
    --noSSLVerify
    --powerOn
    --machineOutput
    -dm=thin
    -ds={{ vcenter.datastore }}
    -n={{ inventory_hostname }}
    --net:"OVS Management={{ mgmt_bridge }}"
    --net:"OVS DataPath={{ data_bridge }}"
    --net:"port_vmnic={{ access_bridge }}"
    "{{ nsgv_ovf_path }}/{{ nsgv_ovf_file_name }}"
    vi://'{{ vcenter.username | urlencode }}':'{{ vcenter.password | urlencode }}'@{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }} 
  when: "'.ovf' in nsgv_ovf_file_name"


- name: Waiting 120 seconds to make sure the NSGv VM is up
  pause: 
    seconds: 120

- name: Gathering info on VM
  connection: local
  vmware_guest:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ inventory_hostname }}"
    validate_certs: no
    state: gatherfacts
  register: nsgv_vm_facts

- debug: var=nsgv_vm_facts verbosity=1
