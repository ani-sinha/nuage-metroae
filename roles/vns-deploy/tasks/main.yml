---
- name: Clean known_hosts of VSC's on "{{ target_server }}"
  command: ssh-keygen -R "{{ interfaces.mgmt.ip }}" -f /root/.ssh/known_hosts
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: root 

- name: Change XMPP connection to TLS on VSD
  command: /opt/vsd/bin/ejmode allow -y
  remote_user: root
  delegate_to: "{{ vsd_fqdn }}"
 
- name: Download pip installer
  command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  delegate_to: "{{ vsd_fqdn }}"
  remote_user: root

- name: Execute pip installer
  command: python get-pip.py
  delegate_to: "{{ vsd_fqdn }}"
  remote_user: root
 
- name: Install pexpect on VSD
  pip:
    name: pexpect
  remote_user: root
  delegate_to: "{{ vsd_fqdn }}"

- block:
   - name: Create and transfer certs from VSD to {{ inventory_hostname }}
     expect:
      timeout: 55
      command: "{{ create_certs }}"
      responses:
        (?i)password: "admin"
     delegate_to: "{{ vsd_fqdn }}"
     remote_user: root
  rescue:
   - name: Retry creating and transfering certs from VSD to {{ inventory_hostname }}
     expect:
      timeout: 55
      command: "{{ create_certs_alt }}"
      responses:
        (?i)password: "admin"
     delegate_to: "{{ vsd_fqdn }}"
     remote_user: root

- name: Create TLS profile in {{ inventory_hostname }}
  local_action: command python {{playbook_dir}}/roles/vns-deploy/files/vsc_config.py {{ playbook_dir  }} {{ xmpp.username }}
  register: output

- name: Verification Result Failure Status
  fail: msg={{ output.stdout }}
  when: output.stdout | search("(?i)MINOR")
  ignore_errors: yes

- name: Verification Result Success Status
  debug: var=output.stdout verbosity=1
