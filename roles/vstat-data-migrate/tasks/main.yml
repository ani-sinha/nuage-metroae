- block:
  - name: Copy elasticsearch backup scritps
    copy: src={{ vstat_backup_scripts_path }}/{{ item }}
        dest=/tmp/
    with_items: "{{ vstat_backup_scripts_file_list }}"
    remote_user: root
  
  - name: Set the name of backup dir path
    set_fact: backup_path="/tmp"

  - name: Set name of backup directory
    set_fact: backup_dir_name="backup-{{ inventory_hostname }}-{{ ansible_date_time.iso8601_basic_short }}/"

  - name: Set name of vstat backup dir
    set_fact: 
      vstat_backup_dir: "{{ backup_path }}/{{ backup_dir_name }}"

  - name: Create backup dir
    file:
      dest: "{{ vstat_backup_dir }}"
      owner: "elasticsearch"
      group: "elasticsearch"
      state: directory
      recurse: yes
      mode: 0775
    remote_user: root
  
  - name: Cleanup backup dir in elasticseach.yml file
    lineinfile:
      dest: "/etc/elasticsearch/elasticsearch.yml"
      regexp: "path.repo"
      state: absent
    remote_user: root

  - name: Configure backup dir in elasticseach.yml file
    lineinfile:
      dest: "/etc/elasticsearch/elasticsearch.yml"
      line: "path.repo: [{{ vstat_backup_dir }}]"
    remote_user: root
 
  - name: Restart elasticsearch process
    systemd:
      name: elasticsearch
      state: restarted
    remote_user: root

  - name: Wiat for elasticsearch process to come up
    pause:
      seconds: 20
 
  - name: Get elasticsearch current status
    systemd:
      name: elasticsearch
      state: started
    register: es_status
    remote_user: root
 
  - name: Check elasticsearch status is active
    assert:
      that: es_status.status.ActiveState == 'active'
      msg: "Elasticserach process in not active after restart"
 
  - name: Check elasticsearch process is running
    assert:
      that: es_status.status.SubState == 'running'
      msg: "Elasticsearch process is not running after restart"
 
  - name: Read the repo name to be recreated from the file
    command: "cat /tmp/backup-{{ inventory_hostname }}-latest/repo_snapshot_name"
    register: names
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"
    
  - name: Create repo on the new vstat vm 
    command: "python /tmp/{{ create_repo }}"
    remote_user: root

  - name: Get the repo created by backup script 
    command: "python /tmp/{{ show_repo }}"
    register: repo_path
    remote_user: root

  - name: Print contents of show_repo output when verbosity >= 1
    debug: var=repo_path verbosity=1

  - name: Verify repo is created
    assert:
      that: '"Error in getting repo" not in repo_path.stdout'
      msg: Failed to verify the repo created
  
#  - name: Get the dir name of backup folder under latest folder
#    find:
#      path: "/tmp/backup-{{ inventory_hostname }}-latest/"
#      file_type: directory
#      pattern: "backup*"
#    register: lst_dirs
#    delegate_to: "{{ ansible_deployment_host }}"
#    remote_user: "{{ ansible_sudo_username }}"
#  
#  - name: Print contents of lst_dirs when verbosity >= 1 
#    debug: var=lst_dirs
# 
#  - name: Set the name of backup folder to be transferred
#    set_fact: 
#      folder_tobe_transferred: "{{ lst_dirs['files'][0]['path'] }}"
  
  - name: Transfer the backup folder to vstat node
    shell: "{{ transfer_backup_folder }}"
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"
   
  - name: Set permissions after transferring the backup files
    file:
      dest: "{{ vstat_backup_dir }}"
      owner: "elasticsearch"
      group: "elasticsearch"
      state: directory
      recurse: yes
      mode: 0775
    remote_user: root
 
  - name: Restore the snapshot on the new vstat VM
    command: "python /tmp/{{ restore_snapshot }}"
    register: restore_snap
    remote_user: root

  - name: Print contents of restore_snapshot output when verbosity >= 1
    debug: var=restore_snapshot verbosity=1

  - name: Get the contents of created snapshot
    command: "python /tmp/{{ show_snapshot }}"
    register: snapshot_contents
    remote_user: root

  - name: Create local variable with snap_contents output to json
    set_fact: snapshot_contents_json="{{ snapshot_contents.stdout|snapshot_list_indices_to_json }}"

  - name: Print contents of snapshot_contents output when verbosity >= 1
    debug: var=snapshot_contents verbosity=1

  - block:
    - name: Verify the contents of the snapshot created
      assert:
        that: '"{{ item }}" in list_of_indices'
        msg: "{{ item }} index was not found"
      with_items: "{{ snapshot_contents_json['indices'] }}"
    when: list_of_indices is defined

  - block:
    - name: Get the list of all inices
      command: "python /tmp/{{ get_indices }}"
      remote_user: root
      register: indices_output

    - name: Verify the contents of the snapshot created
      assert:
        that: '"{{ item }}" in indices_output.stdout'
        msg: "{{ item }} index was not found"
      with_items: "{{ snapshot_contents_json['indices'] }}"
    when: list_of_indices is not defined
  when: 
    - inventory_hostname in groups['vstats']
    - upgrade_from_version != '4.0.1'

- name: Get current VSD version
  command: echo $VSD_VERSION
  register: vsd_version

- name: Print vsd version when verbosity >= 1
  debug: var=upgrade_from_version verbosity=1

- name: Print vsd version when verbosity >= 1
  debug: var=vsd_version verbosity=1

- block:      
  - name: Stop vsd-stats group on VSD(s)
    command: monit stop -g vsd-stats
    remote_user: root

  - name: Get monit state for stat processes
    vsd_monit:
      state: group_summary
      group: vsd-stats
    register: stats_state
    remote_user: root

  - name: Verify stats processes are stopped
    assert: 
      that: stats_state['state']['{{ item }}'] == 'not monitored'
      msg: item   is still running 
    with_items: "{{ stats_state.state.keys() }}" 

  - name: Migrate current date data to new schema version
    command: "{{ migrate_current_data }}"
    remote_user: root
    when: current_day_data

  - name: Migrate previous day data to new schema version
    command: "{{ migrate_previous_data }}"
    remote_user: root
    when: not current_day_data

  - name: Start vsd-stats processess
    command: "monit start -g vsd-stats"
    remote_user: root

  - name: Get monit state for stat processes
    vsd_monit:
      state: group_summary
      group: vsd-stats
    register: stats_current_state
    remote_user: root
 
  - name: Fetch stats processess current state
    vsd_monit:
      state: group_summary
      group: vsd-stats
    until: stats_current_state['state']['{{ item }}'] == 'running' or stats_current_state['state']['{{ item }}'] == 'status ok'
    retries: 5
    delay: 30
    remote_user: root
    with_items: "{{ stats_current_state.state.keys() }}"

  - name: Verify stats processes are started/running
    assert:
      that: stats_current_state['state']['{{ item }}'] == 'running' or stats_current_state['state']['{{ item }}'] == 'status ok'
      msg: item  is still running
    with_items: "{{ stats_current_state.state.keys() }}"
  when: 
    - vsd_version.stdout in supported_vsd_versions
    - upgrade_from_version == '4.0.1'
    - inventory_hostname in groups['vsds']
