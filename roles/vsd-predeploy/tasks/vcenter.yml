---
# - block:
#   - name: Verify that upgrade_vmname is defined if this is an upgrade
#     assert:
#       that: "upgrade_vmname is defined"
#       msg: "upgrade_vmname is required for upgrade"

#   - name: Set local variable with upgrade_vmname
#     set_fact:
#       vm_name: "{{ upgrade_vmname }}"
#   when: nuage_upgrade | default( False )

# - block:
#   - name: Verify that vmname is defined
#     assert:
#       that: "vmname is defined"
#       msg: "vmname is required for vsd_predeploy"

#   - name: Set local variable with vmname
#     set_fact:
#       vm_name: "{{ vmname }}"
#   when: not nuage_upgrade | default( False )

# - include_role:
#     name: check-node-running

# - name: Display if skipping predeploy
#   debug:
#     msg:
#       - "****************************************************"
#       - "Skipping VSD predeploy because it is already present"
#       - "****************************************************"
#   when: node_present

- block:

#   - name: Configure vCenter path
#     set_fact:
#       vcenter_path: "vi://'{{ vcenter.username | urlencode }}':'{{ vcenter.password | urlencode }}'@{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }}"

#   - name: Update vCenter path if resource pool is configured
#     set_fact:
#       vcenter_path: "vi://'{{ vcenter.username | urlencode }}':'{{ vcenter.password | urlencode }}'@{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }}/Resources/{{ vcenter.resource_pool | urlencode }}"
#     when: vcenter.resource_pool != 'NONE'
      
#   - name: Deploy VM image on vCenter
#     connection: local
#     command: >
#       {{ vcenter.ovftool }}
#       --acceptAllEulas
#       --noSSLVerify
#       --powerOn
#       --machineOutput
#       -dm=thin
#       -ds={{ vcenter.datastore }}
#       -n={{ vm_name }}
#       --net:"VM Network={{ mgmt_bridge }}"
#       "{{ ova_path }}/{{ ova_file_name }}"
#       {{ vcenter_path }}

#   - name: Waiting until VMware tools becomes available
#     connection: local
#     vmware_guest_tools_wait:
#       hostname: "{{ target_server }}"
#       username: "{{ vcenter.username }}"
#       password: "{{ vcenter.password }}"
#       name: "{{ vm_name }}"
#       datacenter: "{{ vcenter.datacenter }}"
#       validate_certs: no
#     register: vm_facts

  # - debug: var=vm_facts verbosity=1
  
  - name: Get UUID of VM
    vmware_vm_facts:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
    delegate_to: localhost
    register: vm_list
  
  - debug: var=vm_list.virtual_machines["vsd1-tesdbed4-demo"]

  - name: Set VM Name
    set_fact:
      vm_cmd: "{{ vm_list.virtual_machines }} + '.' + {{ vm_name }}"
    
  - debug: var={{ vm_name }}

  - name: Get host info for VM to configure Autostart
    connection: local
    command: "{{ role_path }}/files/get_vcenter_host.py -s {{ target_server }} -u {{ vcenter.username }} -p {{ vcenter.password }} -d {{ vm_cmd.uuid }}" 
    register: esxi_host

  - name: Configure autostart
    connection: local
    command: "{{ role_path }}/files/autostart_vcenter.py -ip esxi_host -u {{ vcenter.username }} -p {{ vcenter.password }} -t esxi_host.name"
    
  - name: Writing eth0 network script file to the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " '{{ lookup('template', 'ifcfg-eth0.j2') }}' > /etc/sysconfig/network-scripts/ifcfg-eth0"

  - name: Set the owner and group on the eth0 network script file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /etc/sysconfig/network-scripts/ifcfg-eth0"

  - name: Writing network file to the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " '{{ lookup('template', 'network.j2') }}' > /etc/sysconfig/network"

  - name: Set the owner and group on the network file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /etc/sysconfig/network"

  - name: Writing hostname file to the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " '{{ lookup('template', 'hostname.j2') }}' > /etc/hostname"

  - name: Set the owner and group on the hostname file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /etc/hostname"

  - name: Create the directory /root/.ssh for authorized_keys on the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/mkdir"
      vm_shell_args: " -p /root/.ssh"

  - name: Set the owner and group for the /root/.ssh directory in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /root/.ssh"

  - name: Get the public key for the current user
    local_action: command cat "{{ user_ssh_pub_key }}"
    register: current_user_ssh_key

  - name: Writing authorized_keys to the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " '{{ lookup('template', 'authorized_keys.j2') }}' > /root/.ssh/authorized_keys"

  - name: Set the mode on the authorized_keys file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/bin/chmod"
      vm_shell_args: " 0640 /root/.ssh/authorized_keys"

  - name: Reboot VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_username }}"
      vm_password: "{{ vsd_password }}"
      vm_shell: "/usr/sbin/reboot"

  when: not node_present
