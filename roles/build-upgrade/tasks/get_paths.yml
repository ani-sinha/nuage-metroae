---
################
# VRS
################

# TODO: Optimize the looping through vrs arch types in case of large deployments
- block:

  - name: Create facts to be used with vrs deploy if vrs is Debian 14.04 based
    set_fact: vrs_u14_04="True"
    when: item.vrs_os_type == "u14.04"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Debian 16.04 based
    set_fact: vrs_u16_04="True"
    when: item.vrs_os_type == "u16.04"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Redhat el6 based
    set_fact: vrs_el6="True"
    when: item.vrs_os_type == "el6"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Redhat el7 based
    set_fact: vrs_el7="True"
    when: item.vrs_os_type == "el7"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is VMware based
    set_fact: vrs_vmware="True"
    when: item.vrs_os_type == "vcenter"
    with_items: "{{ myvrss }}"

  - name: initialize vrs_target_os_is_supported to be evaluated for vrs supported target os types
    set_fact: vrs_target_os_is_supported="True"

  - name: Set facts if vrs os type is set to a supported version
    set_fact: vrs_target_os_is_supported="False"
    when: item.vrs_os_type not in supported_vrs_target_os_types
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with VRS upgrade by VCIN
    set_fact:
      vrs_vmware="True"
      vrs_target_os_is_supported="True"
    when:
      - myvcins is defined
      - "'upgradevrs' in vcin_operations_list|default(['None'])"

  - assert:
      that:
        - "vrs_target_os_is_supported == True"
      msg: "Unsupported OS type/typo in build.yml. Supported OS Types are {{ supported_vrs_target_os_types | join(', ')}}"

  - block:

    - name: Find name of VRS Package Files (EL6 architecture)
      find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/el6"  pattern="*.rpm" recurse=yes
      register: rc_vrs_file_el6

    - debug: var=rc_vrs_file_el6 verbosity=1

    - name: Verify that VRS file was found
      assert: {
        that: "{{ rc_vrs_file_el6.matched }} > 0",
        msg: "Unable to find VRS files"
        }

    - name: Register VRS package variables with proper path and image locations for use in other playbooks (EL6 architecture)
      set_fact:
        el6_vrs_package_path: "{{ rc_vrs_file_el6.files[0].path | dirname }}/"
        el6_vrs_package_file_name_list: "{{ rc_vrs_file_el6.files |  map(attribute='path') | list | map('basename') | list }}"

    when: vrs_el6|default(false)

  - block:

    - name: Find name of VRS Package Files (EL7 architecture)
      find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/el7"  pattern="*.rpm" recurse=yes
      register: rc_vrs_file_el7

    - debug: var=rc_vrs_file_el7 verbosity=1

    - name: Verify that VRS file was found
      assert: {
        that: "{{ rc_vrs_file_el7.matched }} > 0",
        msg: "Unable to find VRS files"
        }

    - name: Register VRS package variables with proper path and image locations for use in other playbooks (EL7 architecture)
      set_fact:
        el7_vrs_package_path: "{{ rc_vrs_file_el7.files[0].path | dirname }}/"
        el7_vrs_package_file_name_list: "{{ rc_vrs_file_el7.files |  map(attribute='path') | list | map('basename') | list }}"

    when: vrs_el7|default(false)

  - block:

    # Debian requires 3 packages listed in a specific order of dependeny
    - name: Find name of VRS python package file (Debian architecture)
      find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/u14_04"  pattern="nuage-python-openvswitch*.deb" recurse=yes
      register: rc_vrs_python_file_u14_04

    - debug: var=rc_vrs_python_file_u14_04 verbosity=1

    - name: Verify that VRS python package file was found
      assert: {
        that: "{{ rc_vrs_python_file_u14_04.matched }} > 0",
        msg: "Unable to find VRS python package for Ubuntu 14.04"
        }

    - name: Register VRS package path and VRS python package file name for use in other playbooks (Debian Architecture)
      set_fact:
        u14_04_vrs_package_path: "{{ rc_vrs_python_file_u14_04.files[0].path | dirname }}/"
        u14_04_vrs_package_file_name_list: "{{ rc_vrs_python_file_u14_04.files |  map(attribute='path') | list | map('basename') | list }}"

    - name: Find name of VRS common package file (Debian architecture)
      find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/u14_04"  pattern="nuage-openvswitch-common*.deb" recurse=yes
      register: rc_vrs_common_file_u14_04

    - debug: var=rc_vrs_common_file_u14_04 verbosity=1

    - name: Verify that VRS common package file was found
      assert: {
        that: "{{ rc_vrs_common_file_u14_04.matched }} > 0",
        msg: "Unable to find VRS common file"
        }

    - name: Register VRS common package file name for use in other playbooks (Debian Architecture)
      set_fact:
        u14_04_vrs_package_file_name_list: "{{ u14_04_vrs_package_file_name_list }} + {{ rc_vrs_common_file_u14_04.files |  map(attribute='path') | list | map('basename') | list }}"

    - name: Find name of VRS switch package file (Debian architecture)
      find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/u14_04"  pattern="nuage-openvswitch-switch*.deb" recurse=yes
      register: rc_vrs_switch_file_u14_04

    - debug: var=rc_vrs_switch_file_u14_04 verbosity=1

    - name: Verify that VRS switch package file was found
      assert: {
        that: "{{ rc_vrs_switch_file_u14_04.matched }} > 0",
        msg: "Unable to find VRS switch file"
        }

    - name: Register VRS switch package file name for use in other playbooks (Debian Architecture)
      set_fact:
        u14_04_vrs_package_file_name_list: "{{ u14_04_vrs_package_file_name_list }} + {{ rc_vrs_switch_file_u14_04.files |  map(attribute='path') | list | map('basename') | list }}"

    when: vrs_u14_04|default(false)

  - block:

     # Debian requires 3 packages listed in a specific order of dependeny
      - name: Find name of VRS python package file (Debian architecture)
        find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/u16_04"  pattern="nuage-python-openvswitch*.deb" recurse=yes
        register: rc_vrs_python_file_u16_04

      - debug: var=rc_vrs_python_file_u16_04 verbosity=1

      - name: Verify that VRS python package file was found
        assert: {
          that: "{{ rc_vrs_python_file_u16_04.matched }} > 0",
          msg: "Unable to find VRS python package for Ubuntu 16.04"
          }

      - name: Register VRS package path and VRS python package file name for use in other playbooks (Debian Architecture)
        set_fact:
          u16_04_vrs_package_path: "{{ rc_vrs_python_file_u16_04.files[0].path | dirname }}/"
          u16_04_vrs_package_file_name_list: "{{ rc_vrs_python_file_u16_04.files |  map(attribute='path') | list | map('basename') | list }}"

      - name: Find name of VRS common package file (Debian architecture)
        find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/u16_04"  pattern="nuage-openvswitch-common*.deb" recurse=yes
        register: rc_vrs_common_file_u16_04

      - debug: var=rc_vrs_common_file_u16_04 verbosity=1

      - name: Verify that VRS common package file was found
        assert: {
          that: "{{ rc_vrs_common_file_u16_04.matched }} > 0",
          msg: "Unable to find VRS common file"
          }

      - name: Register VRS common package file name for use in other playbooks (Debian Architecture)
        set_fact:
          u16_04_vrs_package_file_name_list: "{{ u16_04_vrs_package_file_name_list }} + {{ rc_vrs_common_file_u16_04.files |  map(attribute='path') | list | map('basename') | list }}"

      - name: Find name of VRS switch package file (Debian architecture)
        find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/u16_04"  pattern="nuage-openvswitch-switch*.deb" recurse=yes
        register: rc_vrs_switch_file_u16_04

      - debug: var=rc_vrs_switch_file_u16_04 verbosity=1

      - name: Verify that VRS switch package file was found
        assert: {
          that: "{{ rc_vrs_switch_file_u16_04.matched }} > 0",
          msg: "Unable to find VRS switch file"
          }

      - name: Register VRS switch package file name for use in other playbooks (Debian Architecture)
        set_fact:
          u16_04_vrs_package_file_name_list: "{{ u16_04_vrs_package_file_name_list }} + {{ rc_vrs_switch_file_u16_04.files |  map(attribute='path') | list | map('basename') | list }}"

    when: vrs_u16_04|default(false)

  - block:

    - name: Find name of VRS Package Files (VMware architecture)
      find: path="{{ nuage_upgrade_unzipped_files_dir }}/vrs/vmware"  pattern="*.ovf"
      register: rc_vmware_vrs_ovf_file

    - debug: var=rc_vmware_vrs_ovf_file verbosity=1

    - name: Verify that VRS file was found
      assert: {
        that: "{{ rc_vmware_vrs_ovf_file.matched }} > 0",
        msg: "Unable to find VRS files"
        }

    - name: Register VRS package variables with proper path and image locations for use in other playbooks (VMware architecture)
      set_fact:
        vmware_vrs_ovf_path: "{{ rc_vmware_vrs_ovf_file.files[0].path | dirname }}/"
        vmware_vrs_ovf_file_name: "{{ rc_vmware_vrs_ovf_file.files[0].path | basename }}"

    when: vrs_vmware |default(False)

  when: (myvrss is defined and ('install' in vrs_operations_list|default(['None']) or 'upgrade' in vrs_operations_list|default(['None']))) or (myvcins is defined and ('vrsupgrade' in vcin_operations_list|default(['None'])))
  tags:
    - vrs
    - vcin

#####################
# VNS Utility/ NSGV
#####################

# TODO: Add AWS support
- block:

  - name: Find names of VNS files
    find: path="{{ nuage_upgrade_unzipped_files_dir }}/{{ item.subdir }}"  pattern="{{ item.pattern }}" recurse=yes
    register: rc_vns_files
    with_items:
      - { subdir: "vns/utils/", pattern: "vns-util-*.qcow2" }
      - { subdir: "vns/nsg/", pattern: "ncpe_centos7.qcow2" }

  - debug: var=rc_vns_files verbosity=1

  - name: Verify that VNS files were found
    assert: {
      that: "{{ rc_vns_files.results[0].matched }} > 0 and {{ rc_vns_files.results[1].matched }} > 0",
      msg: "Unable to find VNS files"
      }

  - name: Register VNS variables with proper path and image locations for use in other playbooks
    set_fact:
      "{{ item.1 }}_path": "{{ rc_vns_files.results[item.0].files[0].path | dirname }}"
      "{{ item.1 }}_file_name": "{{ rc_vns_files.results[item.0].files[0].path | basename }}"
    with_indexed_items:
      - vnsutil_qcow2
      - nsgv_qcow2

  when:
    - myvnsutils is defined
    - mynsgvs is defined
    - "'install' in vns_operations_list|default(['None'])"

##########################
## Nuage OpenStack Plugins
##########################

- block:

  - name: Find name of Nuage OpenStack Package Files (RH architecture)
    find: path="{{ nuage_upgrade_unzipped_files_dir }}/nuage_os/{{ nuage_os_release }}/el7/"  pattern="*.rpm" recurse=yes
    register: rc_nuage_os_file

  - debug: var=rc_nuage_os_file verbosity=1

  - name: Verify that OpenStack files were found
    assert: {
      that: "{{ rc_nuage_os_file.matched }} > 0",
      msg: "Unable to find OpenStack files"
      }

  - name: Register Nuage OpenStack package variables with proper path and image locations for use in other playbooks (RH architecture)
    set_fact:
      nuage_os_package_path: "{{ nuage_upgrade_unzipped_files_dir }}/nuage_os/"
      nuage_os_package_file_name_list: "{{ rc_nuage_os_file.files |  map(attribute='path') | list | map('basename') | list }}"
      nuage_os_release: "{{ nuage_os_release }}"

  when:
    - nuage_os_release is defined
  tags:
    - nuage_os
