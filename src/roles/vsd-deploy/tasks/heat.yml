---
- name: Get VSD details from OpenStack
  os_server_facts:
    auth:
      "{{ os_auth }}"
    server: "{{ inventory_hostname }}"
  register: vsd_ip
  delegate_to: 127.0.0.1

- name: Set vsd mgmt ip
  set_fact:
    vsd_mgmt_ip: "{{ vsd_ip['ansible_facts']['openstack_servers'][0]['networks'][vsd_network][0] }}"

- name: Clean known_hosts of VSD's (ignoring errors)
  known_hosts:
    name: "{{ vsd_mgmt_ip }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- block:

  - name: Get infra server details from OS server facts
    os_server_facts:
      auth:
        "{{ os_auth }}"
      server: "{{ infra_server_name }}"
    register: infra_server
    delegate_to: 127.0.0.1

  - name: Set DNS/NTP server ip
    set_fact:
      infra_ip: "{{ infra_server['ansible_facts']['openstack_servers'][0]['private_v4'] }}"

  - name: Restart DNS service
    shell: service dnsmasq restart
    delegate_to: "{{ infra_ip }}"
    remote_user: "{{ vsd_default_username }}"

  when: infra_server_name is defined

- name: Wait for VSD-HA ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ vsd_mgmt_ip }}"
    host_username: "{{ vsd_default_username }}"

- name: Inject ssh key to VSD if cloud-init did not work
  expect:
    command: "ssh-copy-id -i {{ vsd_default_username }}@{{ vsd_mgmt_ip }}"
    responses:
      (?i)yes: "yes"
      (?i)password: "{{ vsd_default_password }}"
  remote_user: "{{ vsd_default_username }}"
  delegate_to: localhost
  no_log: True

- name: Pause for ssh port to be active
  pause:
    seconds: 5

- name: Query {{ target_server }} facts
  action: setup
  remote_user: "{{ target_server_username }}"

- name: Update hostname
  template: src=network.j2 backup=no dest=/etc/sysconfig/network

- name: Add a DNS server to eth0
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-eth0
    regexp: "DNS1="
    line: "DNS1={{ infra_ip | default(dns_server_list[0]) }}"
  when: infra_server_name is defined

- block:

  - name: Add nameserver
    command: echo "{{ infra_ip }}" >> /etc/resolv.conf
    when: infra_server_name is defined

  - name: Restart networking
    command: /etc/init.d/network restart

  - name: Resolve fqdn
    command: hostname "{{ inventory_hostname }}"

  - name: Configure yum proxy
    lineinfile:
      dest: /etc/yum.conf
      line: "proxy={{ yum_proxy }}"
    when: not yum_proxy | match('NONE')

  - name: Execute a yum update
    yum:
      name: '*'
      state: latest
    when: yum_update

  remote_user: "{{ vsd_default_username }}"

- block:

  - name: Read the VSD version
    shell: echo $VSD_VERSION
    register: vsd_full_version
    become: no

  - name: Set Major, Minor and Patch VSD version
    set_fact:
        vsd_major_version: "{{ vsd_full_version.stdout.split('.')[0] }}"
        vsd_minor_version: "{{ vsd_full_version.stdout.split('.')[1] }}"
        vsd_patch_version: "{{ vsd_full_version.stdout.split('.')[2].split('U')[0] }}"

  - name: Set VSD numbering for install
    set_fact:
        first_cluster_node_to_install: "{{ groups['vsds'][0] }}"
        second_cluster_node_to_install: "{{ groups['vsds'][1] }}"
        third_cluster_node_to_install: "{{ groups['vsds'][2] }}"
    when: not nuage_upgrade | default(False)

  - name: Set VSD numbering for upgrade
    set_fact:
        first_cluster_node_to_install: "{{ groups['vsds'][1] }}"
        second_cluster_node_to_install: "{{ groups['vsds'][2] }}"
        third_cluster_node_to_install: "{{ groups['vsds'][0] }}"
    when: nuage_upgrade | default(False)

  - name: Handle ssh key generation and copying for root user
    import_tasks: legacy_cluster_ssh_keys.yml
    when: vsd_major_version | int < 5

  - name: Handle ssh key generation and copying for vsd user
    import_tasks: cluster_ssh_keys.yml
    run_once: True
    when: vsd_major_version | int >= 5

  remote_user: "{{ vsd_default_username }}"
  when: vsd_sa_or_ha | match('ha')

- name: Configure ntpd and ntpdate and local time zone
  include_role:
    name: common
    tasks_from: linux-ntp-sync
  vars:
    rem_user: "{{ vsd_default_username }}"

- name: Install VSD software on standalone node
  command: /opt/vsd/vsd-install.sh -t s -y
  remote_user: "{{ vsd_default_username }}"
  when: vsd_sa_or_ha | match('sa')

- block:

  - name: Install VSD software on the first cluster node
    command: "/opt/vsd/vsd-install.sh -t 1 -a {{ first_cluster_node_to_install }} -b {{ second_cluster_node_to_install }} -c {{third_cluster_node_to_install}} -x {{vsd_fqdn}} -y"
    when: inventory_hostname == first_cluster_node_to_install

  - name: Install VSD software on the second cluster node
    command: "/opt/vsd/vsd-install.sh -1 {{ first_cluster_node_to_install }} -t 2 -x {{ vsd_fqdn }} -y"
    when: inventory_hostname == second_cluster_node_to_install

  - name: Install VSD software on the third cluster node
    command: "/opt/vsd/vsd-install.sh -1 {{ first_cluster_node_to_install }} -t 3 -x {{ vsd_fqdn }} -y"
    when: inventory_hostname == third_cluster_node_to_install

  when: vsd_sa_or_ha | match('ha')
  remote_user: "{{ vsd_default_username }}"

- name: Set XMPP connection to allow both clear and TLS
  command: /opt/vsd/bin/ejmode allow -y
  remote_user: "{{ vsd_default_username }}"
