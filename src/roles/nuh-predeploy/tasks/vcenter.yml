- name: Set local variable with vmname
  set_fact:
    vm_name: "{{ vmname }}"

- include_role:
    name: check-node-running

- name: Display if skipping predeploy
  debug:
    msg:
      - "******************************************************"
      - "Skipping NUH VM creation because it is already present"
      - "******************************************************"
  when: node_running

- block:

  - name: Set fact for internal network
    set_fact:
      internal_network: "Internal network"
    when: internal_bridge is defined

  - name: Configure vCenter path
    set_fact:
      vcenter_path: "{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }}\
        {{ (vcenter.host_reference != 'NONE') | ternary ('/' + vcenter.host_reference | urlencode, '') }}\
        {{ (vcenter.resource_pool != 'NONE') | ternary ('/Resources/' + vcenter.resource_pool | urlencode, '') }}"

  - name: Configure ovftool command
    set_fact:
      ovftool_command: >-
        {{ vcenter_global.ovftool }}
        --acceptAllEulas
        --noSSLVerify
        --powerOn
        -dm=thin
        -ds={{ vcenter.datastore }}
        {% if hostvars[inventory_hostname].ansible_verbosity > 0 %}
        --X:logLevel=verbose
        --X:logToConsole
        {% else %}
        --machineOutput
        {% endif %}
        -n={{ vm_name }}
        --net:"{{ management_network }}={{ mgmt_bridge }}"
        {% if internal_bridge is defined %}
        --net:"{{ internal_network }}={{ internal_bridge }}"
        {% endif %}
        "{{ image_path }}/{{ image_file_name }}"

  - name: Deploy NUH image on vCenter
    include_role:
      name: common
      tasks_from: vcenter-deploy-image

  - name: Waiting until VMware tools become available
    connection: local
    vmware_guest_tools_wait:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      name: "{{ vm_name }}"
      datacenter: "{{ vcenter.datacenter }}"
      validate_certs: no
    register: nuh_vm_facts

  - debug: var=nuh_vm_facts

  - name: Setup networking on NUH
    include_role:
      name: common
      tasks_from: vcenter-setup-networking
    vars:
      vm_username: "{{ nuh_default_username }}"
      vm_password: "{{ nuh_default_password }}"
      ifcfg_eth0_contents: "{{ lookup('template', 'ifcfg-eth0.j2') }}"
      skip_hostname: False

  - name: Get the public key for the current user
    command: cat "{{ user_ssh_pub_key }}"
    delegate_to: localhost
    register: current_user_ssh_key

  - name: Inject SSH keys into NUH
    include_role:
      name: common
      tasks_from: vcenter-inject-ssh-keys
    vars:
      vm_username: "{{ nuh_default_username }}"
      vm_password: "{{ nuh_default_password }}"

  - name: Set the ssh not to use DNS
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ nuh_default_username }}"
      vm_password: "{{ nuh_default_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " \"UseDNS no\" > /etc/ssh/sshd_config"

  - name: Disable SELinux
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ nuh_default_username }}"
      vm_password: "{{ nuh_default_password }}"
      vm_shell: "/usr/bin/sh"
      vm_shell_args: " \"sed -i 's/SELINUX\\=enforcing/SELINUX\\=permissive/g' /etc/selinux/config\""

  - name: Reboot NUH VM
    connection: local
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ nuh_default_username }}"
      vm_password: "{{ nuh_default_password }}"
      vm_shell: "/usr/sbin/reboot"

  when: not node_running
