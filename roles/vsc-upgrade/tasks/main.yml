- block: 
  - name: Get output of 'show bof'
    sros_command:
      commands:
        - show bof
      provider: "{{ vsc_creds }}"
    register: bof_config
    delegate_to: localhost

  - name: Print 'show bof' when verbosity >= 1
    debug: var=bof_config.stdout[0] verbosity=1

  - name: Create local variable with bof config in json
    set_fact:
      bof_json: "{{ bof_config.stdout[0]|show_bof_to_json }}"

  - name: Print bof config in json  when verbosity >= 1
    debug: var=bof_json verbosity=1

  - name: Get current file version of image on VSC
    sros_command:
      commands:
        - file version "{{ bof_json['image_folder']/cpm.tim }}"
      provider: "{{ vsc_creds }}"
    register: image
    delegate_to: localhost

  - name: Print image version when verbosity >= 1
    debug: var=image.stdout[0] verbosity=1

  - name: Create local variable with image version in json
    set_fact:
      bof_json: "{{ image.stdout[0]|image_version_to_json }}"

  - name: Print image version in json  when verbosity >= 1
    debug: var=bof_json verbosity=1

  - name: Copy new VSC image to VSC nodes
    expect:
      command: "{{ vsc_qcow2_path }}/{{ vsc_tim_file_name }} admin@{{ interfaces.mgmt.ip }}:bof_json['image_folder']/cpm.tim"
      responses:
        (?i)password: "admin"
    remote_user: root
    delegate_to: "{{ ansible_deployment_host }}"

  - name: Reboot VSC node
    sros_command:
      commands:
        - admin reboot now
      provider: "{{ vsc_creds }}"
    register: bof_config
    delegate_to: localhost

  - name: Wait for VSC ssh to be ready
    local_action:
      module: wait_for
      port: "22"
      host: "{{ interfaces.mgmt.ip }}"
      search_regex: OpenSSH
      delay: 1

  - name: Get output of 'show vswitch-controller xmpp-server detail'
    sros_command:
      commands:
        - show vswitch-controller xmpp-server detail
      provider: "{{ vsc_creds }}"
    register: xmpp_detail
    delegate_to: localhost

  - name: Print 'show vswitch-controller xmpp-server detail' when verbosity >= 1
    debug: var=xmpp_detail verbosity=1

  - name: Create local variable with xmpp-server detail in json
    set_fact: xmpp_detail_json="{{ xmpp_detail.stdout[0]|xmpp_server_detail_to_json }}"

  - name: Print xmpp-server detail in json when verbosity >= 1
    debug: var=xmpp_detail_json verbosity=1

  - name: Create local variable for xmpp-server state
    set_fact: xmpp_server_state="{{ xmpp_detail_json['State'] }}"

  - name: Print xmpp-server state when verbosity >= 1
    debug: var=xmpp_server_state verbosity=1

  - name: Check for the expected xmpp-server state
    assert: { 
      that: "{{ expected_xmpp_server_state == xmpp_server_state }}",
      msg: "Invalid xmpp-server state ({{ xmpp_server_state }}) detected. Expected {{ expected_xmpp_server_state }}. Check 'show vswitch-controller xmpp-server details' on {{ inventory_hostname }}."
  }
  
  - name: Get output of 'show vswitch-controller vsd detail'
    sros_command:
      commands:
        - show vswitch-controller vsd detail
      provider: "{{ vsc_creds }}"
    register: vsd_detail
    delegate_to: localhost

  - name: Print 'show vswitch-controller vsd' when verbosity >= 1
    debug: var=vsd_detail verbosity=1

  - name: Verify VSD Node1 is found in vsd_detail
    assert:
      that: "cna@{{ vsd_fqdn }}/{{ groups['vsds'][0].split('.')[0:1] }} in vsd_detail.stdout[0]"
      msg: "VSD Node1 could not be found in 'show vswitch-controller vsd detail'"

  - name: Verify VSD Node3 is found in vsd_detail
    assert:
      that: "cna@{{ vsd_fqdn }}/{{ groups['vsds'][2].split('.')[0:1] }} in vsd_detail.stdout[0]"
      msg: "VSD Node3 could not be found in 'show vswitch-controller vsd detail'"
when: inventory_hostname in groups['vscs']

- name: Turn on VSD API on new VSD's
  command: "{{ enable_vsd_api }}"
  when: inventory_hostname in groups['vsds']
