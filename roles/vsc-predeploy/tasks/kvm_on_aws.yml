---

- name: Deploy AWS VSC host Stack
  delegate_to: localhost
  cloudformation:
    aws_access_key: "{{ aws_access_key | default(None) }}"
    aws_secret_key: "{{ aws_secret_key | default(None) }}"
    stack_name: "{{ vmname | replace('.', '-') }}"
    state: "present"
    region: "{{ aws_region }}"
    template: "{{ role_path }}/files/aws-vsc.yml"
    template_parameters:
      KeyName: "{{ aws_key_name }}"
      VscMgmtEniId: "{{ aws_mgmt_eni }}"
      VscDataEniId: "{{ aws_data_eni }}"
      VscTargetServerEniId: "{{ aws_target_server_eni }}"
      InstanceName: "{{ vmname | replace('.', '-') }}"
      AmiId: "{{ aws_ami_id }}"
      InstanceType: "{{ aws_instance_type }}"
  register: rc_aws_vsc

- debug: var=rc_aws_vsc

- name: Wait for target server ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ target_server }}"

- block:

  - name: If RedHat, install packages for RedHat OS family distros
    yum: name={{ item }} state=present
    with_items:
    - qemu-kvm
    - libvirt
    - libguestfs-tools
    - libvirt-python
    when: ansible_os_family | match("RedHat")
    become: true

  - name: If Debian, install packages for Debian OS family distros
    apt: name={{ item }} state=present
    with_items:
    - qemu-kvm
    - libvirt-bin
    - libguestfs-tools
    - python-libvirt
    when: ansible_os_family | match("Debian")
    become: true

  - name: Start libvirtd on target server
    command: systemctl start libvirtd
    become: true

  - name: Enable libvirtd on target server
    command: systemctl enable libvirtd
    become: true

  - name: List the Virtual Machines running on {{ target_server }}
    virt: command=list_vms
    register: virt_vms

  - name: Check if the VM is already running on {{ target_server }}
    fail: msg="The VM is already defined on this target_server."
    when: vm_name in virt_vms.list_vms

  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
