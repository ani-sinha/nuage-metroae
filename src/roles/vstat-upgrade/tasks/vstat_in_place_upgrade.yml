- name: Get vsd node(s) information
  import_role:
    name: common
    tasks_from: vsd-node-info.yml
  vars:
    vsd_hostname: "{{ vsd_fqdn }}"
  run_once: true

- block:

  - name: Disable shard allocation
    uri:
      url: "{{ disable_shard_url }}"
      method: PUT
      headers:
        Content-Type: "application/json"
      body: "{{ lookup('file', 'disable_shard.json') }}"
      body_format: json
      timeout: 300

  - name: Perform sync flush
    command:
      cmd: "curl -XPOST 'localhost:9200/_flush/synced?pretty'"
      warn: false

  run_once: true
  when: vstat_sa_or_ha is match('ha')

- name: Disable elasticsearch serivce
  service:
    name: elasticsearch
    state: stopped

- name: Copy upgrade bundle to vstat node(s)
  copy: src={{ vstat_upgrade_scripts_path }}/{{ vstat_upgrade_scripts_file }}
          dest=/root/
          mode=0700

- name: Execute upgrade script
  shell: "/root/{{ vstat_upgrade_scripts_file }}"

- block:
  - name: Execute VSTAT standalone script
    import_tasks: execute_sa_script.yml
    run_once: true

  rescue:
    - name: Wait for shard count go down to zero and status to turn green
      import_tasks: get_health_status.yml
      run_once: true

    - name: Check ES Status
      fail: msg="Elasticsearch upgrade failed, status is not green"
      when: es_status.json.status != 'green'

    - name: Check ES Unassigned Shards
      fail: msg="Elasticsearch upgrade failed, unassigned_shards != 0"
      when: es_health.json.unassigned_shards != 0

    - name: Execute VSTAT standalone script after status turns green
      import_tasks: execute_sa_script.yml
      run_once: true

  when: vstat_sa_or_ha is match('sa')

- block:
  - name: Execute VSTAT clustered script
    import_tasks: execute_ha_script.yml
    delegate_to: "{{ vsd_hostname_list[0] }}"
    run_once: true

  rescue:
    - name: Wait for shard count go down to zero and status to turn green
      import_tasks: get_health_status.yml
      run_once: true

    - name: Check ES Status
      fail: msg="Elasticsearch upgrade failed, status is not green"
      when: es_status.json.status != 'green'

    - name: Check ES Unassigned Shards
      fail: msg="Elasticsearch upgrade failed, unassigned_shards != 0"
      when: es_health.json.unassigned_shards != 0

    - name: Execute VSTAT clustered script after status turns green
      import_tasks: execute_ha_script.yml
      run_once: true

  when: vstat_sa_or_ha is match('ha')

- name: Get ES version
  uri:
    url: "{{ version_url }}"
    method: GET
  register: es_version
  run_once: true

- block:

  - name: Assert that we are running ES version 6.7.0
    assert:
      that: es_version.json.version.number is version('6.7.0', '==')
      msg: Expecting ES version 6.7.0, found ES version "{{ es_version.json.version.number }}, quitting."

  - name: Check nodes status for ES cluster
    uri:
      url: "{{ nodes_url }}"
      method: GET
    register: nodes_output
    run_once: true

  - name: Check indices health
    check_url_response_in_each_line:
      url: "{{ indicies_health_url }}"
      search_string: green
      timeout_seconds: 300
      test_interval_seconds: 30
    run_once: true

  - name: Migrate old indicies to new ones
    command: "{{ index_migrate_cmd }}"
    run_once: true

  - name: Check recovery health
    uri:
      url: "{{ recovery_health_url }}"
      method: GET
    register: recover_health
    run_once: true

  - debug: var={{ recover_health }}

  - name: Check indices health
    uri:
      url: "{{ indicies_health_url }}"
      method: GET
    register: indicies_health
    run_once: true

  - debug: var={{ indicies_health }}

  when: upgrade_to_version is version('6.0.1', '>=')

- block:

  - name: Assert that we are running ES version 5.5.0
    assert:
      that: es_version.json.version.number is version('5.5.0', '==')
      msg: Expecting ES version 5.5.0, found ES version "{{ es_version.json.version.number }}, quitting."

  when: upgrade_to_version is version('6.0.1', '<')


- name: Restart Elasticsearch service
  service:
    name: elasticsearch
    state: restarted
