---
- name: Query {{ target_server }} facts
  action: setup
  delegate_to: "{{ target_server }}"
  remote_user: root

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: List the Virtual Machines running on {{ target_server }}
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: root

- block:
  - name: Create libvirt image directory on {{ target_server }}
    file: path={{ images_path }}/{{ inventory_hostname }}
          state=directory
          owner={{ libvirt.user }}
          group={{ libvirt.group }}
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Copy the VSTAT qcow image to virt images directory on {{ target_server }}
    copy: src={{ vstat_qcow2_path }}/{{ vstat_qcow2_file_name }}
          dest={{ images_path }}/{{ inventory_hostname }}
          owner={{ libvirt.user }}
          group={{ libvirt.group }}
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Create a temporary copy of the network script for eth0 on {{ target_server }}
    template: src=ifcfg-eth0.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Copy eth0 network script file to the VSTAT image on {{ target_server }}
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 copy-in {{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0 /etc/sysconfig/network-scripts/
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Remove temporary copy of eth0 network script
    file: path={{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0 state=absent
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the owner and group on the eth0 network script file in the VSTAT image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 chown 0 0 /etc/sysconfig/network-scripts/ifcfg-eth0
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Create a temporary copy of the syscfg network file on {{ target_server }}
    template: src=network.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/network
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Copy network file to the VSTAT image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 copy-in {{ images_path }}/{{ inventory_hostname }}/network /etc/sysconfig/
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Remove temporary copy of network file
    file: path={{ images_path }}/{{ inventory_hostname }}/network state=absent
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the owner and group for the network hostname file on the VSTAT image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 chown 0 0 /etc/sysconfig/network
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Create the directory /root/.ssh for authorized_keys
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 mkdir-mode /root/.ssh 0700
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the owner and group for the /root/.ssh directory on the VSTAT image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 chown 0 0 /root/.ssh
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Get the public key for the current user
    local_action: command cat ~/.ssh/id_rsa.pub
    register: current_user_ssh_key

  - name: Create a temporary copy of the authorized_keys file
    template: src=authorized_keys.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/authorized_keys
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Copy authorized_keys file to the VSTAT image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 copy-in {{ images_path }}/{{ inventory_hostname }}/authorized_keys /root/.ssh/
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Remove temporary copy of authorized_keys file
    file: path={{ images_path }}/{{ inventory_hostname }}/authorized_keys state=absent
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the owner and group for the authorized_keys file on the VSTAT image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 chown 0 0 /root/.ssh/authorized_keys
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the mode for the authorized_keys file on the VSTAT image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vstat_qcow2_file_name }} -m /dev/sda2 chmod 0640 /root/.ssh/authorized_keys
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: "Define new VSTAT VM"
    virt: name="{{ inventory_hostname }}"
          command=define
          xml="{{ lookup('template', 'vstat.xml.j2') }}"
          uri=qemu:///system
    delegate_to: "{{ target_server }}"
    remote_user: root
  when: inventory_hostname not in virt_vms.list_vms

- name: "Run VSTAT VM"
  virt: name="{{ inventory_hostname }}"
        state=running
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: root

- name: Wait for VSTAT ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ interfaces.mgmt.ip }}"
    search_regex: OpenSSH
    delay: 1
  delegate_to: "{{ target_server }}"
  remote_user: root

- name: Update /etc/hosts file on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/hosts
    line: "{{ interfaces.mgmt.ip }} {{ inventory_hostname }}"
  remote_user: root

- name: Delete the localtime file on {{ inventory_hostname }}
  file:
    path: /etc/localtime
    state: absent
  remote_user: root

- name: Create the localtime symlink on {{ inventory_hostname }}
  file:
    src: /usr/share/zoneinfo/US/Pacific
    dest: /etc/localtime
    state: link
  remote_user: root

- name: Remove old NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    regexp: "^server"
    state: absent
  remote_user: root

- name: Configure NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    line: "server {{ item }} iburst"
  with_items: "{{ ntp_server_list }}"
  remote_user: root

- name: Stop the ntpd service if running
  command: service ntpd stop
  remote_user: root

- name: Manually sync time with ntp server
  command: ntpdate -u "{{ntp_server_list[0]}}"
  remote_user: root

- name: Start ntpd on {{ inventory_hostname }}
  command: service ntpd start
  remote_user: root

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 29
  delay: 10
  remote_user: root

- debug: var=sync_status

- name: Resolve "{{vsd_fqdn}}"  to ip addr
  shell: host "{{vsd_fqdn}}" | awk '{print $3,$4}'
  register: ip_addr
  remote_user: root

- name: Check for ip addr in the registered var
  fail: msg="Could not resolve ip addr of "{{vsd_fqdn}}" "
  when: ip_addr.stdout == "not found:"
  remote_user: root

- name: Config firewall on VSTAT vm to accept conn on ports 9200,9300 from vsd(s)
  script: firewall.sh "{{ ip_addr.stdout.split()[1] }}"
  remote_user: root

- name: Restart elastic search {{ inventory_hostname }}
  command: systemctl restart elasticsearch
  remote_user: root

- name: Enable stats collection on the VSD VM
  command: /opt/vsd/vsd-stats.sh -e {{inventory_hostname}}
  delegate_to: "{{vsd_fqdn}}"
  remote_user: root
