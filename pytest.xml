<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="5" hostname="cas-ms1-002.maas" name="pytest" skipped="0" tests="57" time="1.381" timestamp="2019-12-18T14:14:57.181796"><testcase classname="src.library.tests.test_check_url_response_in_each_line" file="src/library/tests/test_check_url_response_in_each_line.py" line="23" name="test_normal__success" time="0.002"></testcase><testcase classname="src.library.tests.test_check_url_response_in_each_line" file="src/library/tests/test_check_url_response_in_each_line.py" line="45" name="test_wait__success" time="0.002"></testcase><testcase classname="src.library.tests.test_check_url_response_in_each_line" file="src/library/tests/test_check_url_response_in_each_line.py" line="71" name="test__timeout" time="0.002"></testcase><testcase classname="src.library.tests.test_check_vsd_license_validity.TestVsdLicenseValid" file="src/library/tests/test_check_vsd_license_validity.py" line="54" name="test__success" time="0.004"></testcase><testcase classname="src.library.tests.test_check_vsd_license_validity.TestVsdLicenseValid" file="src/library/tests/test_check_vsd_license_validity.py" line="73" name="test__cannot_import" time="0.002"></testcase><testcase classname="src.library.tests.test_check_vsd_license_validity.TestVsdLicenseValid" file="src/library/tests/test_check_vsd_license_validity.py" line="87" name="test__cannot_connect" time="0.002"></testcase><testcase classname="src.library.tests.test_check_vsd_license_validity.TestVsdLicenseValid" file="src/library/tests/test_check_vsd_license_validity.py" line="109" name="test__no_licenses" time="0.003"></testcase><testcase classname="src.library.tests.test_check_vsd_license_validity.TestVsdLicenseValid" file="src/library/tests/test_check_vsd_license_validity.py" line="125" name="test__bad_mode" time="0.004"></testcase><testcase classname="src.library.tests.test_check_vsd_license_validity.TestVsdLicenseValid" file="src/library/tests/test_check_vsd_license_validity.py" line="143" name="test__will_expire" time="0.003"></testcase><testcase classname="src.library.tests.test_check_vsd_license_validity.TestVsdLicenseValid" file="src/library/tests/test_check_vsd_license_validity.py" line="161" name="test__has_expired" time="0.003"></testcase><testcase classname="src.library.tests.test_config_vsd_system.TestConfigVsdSystem" file="src/library/tests/test_config_vsd_system.py" line="60" name="test_get__success" time="0.003"></testcase><testcase classname="src.library.tests.test_config_vsd_system.TestConfigVsdSystem" file="src/library/tests/test_config_vsd_system.py" line="78" name="test_get__exception" time="0.003"></testcase><testcase classname="src.library.tests.test_config_vsd_system.TestConfigVsdSystem" file="src/library/tests/test_config_vsd_system.py" line="95" name="test_set__success" time="0.003"></testcase><testcase classname="src.library.tests.test_config_vsd_system.TestConfigVsdSystem" file="src/library/tests/test_config_vsd_system.py" line="115" name="test_set__already_set" time="0.003"><failure message="AttributeError: &apos;BambouHTTPError&apos; object has no attribute &apos;message&apos;">def main():
        arg_spec = dict(
            vsd_auth=dict(required=True, type=&apos;dict&apos;),
            get_gateway_purge_time=dict(default=False, type=&apos;bool&apos;),
            gateway_purge_time=dict(type=&apos;int&apos;)
        )
        module = AnsibleModule(argument_spec=arg_spec, supports_check_mode=True)
    
        vsd_auth = module.params[&apos;vsd_auth&apos;]
        gw_purge_time = module.params[&apos;gateway_purge_time&apos;]
        get_gateway_purge_time = module.params[&apos;get_gateway_purge_time&apos;]
    
        try:
            csproot = get_vsd_session(vsd_auth)
        except ImportError:
            module.fail_json(msg=&quot;vspk is required for this module, or &quot;
                             &quot;API version specified does not exist.&quot;)
            return
        except Exception as e:
            module.fail_json(msg=&quot;Could not establish connection to VSD %s&quot; % e)
            return
    
        if not get_gateway_purge_time:
            try:
&gt;               set_gateway_purge_time(csproot, gw_purge_time)

src/library/config_vsd_system.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

csproot = &lt;MagicMock name=&apos;import_module().NUVSDSession().user&apos; id=&apos;139952965314824&apos;&gt;, gw_purge_time = 7003

    def set_gateway_purge_time(csproot, gw_purge_time):
        sys_config = csproot.system_configs.get_first()
        sys_config.ad_gateway_purge_time = int(gw_purge_time)
&gt;       sys_config.save()

src/library/config_vsd_system.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name=&apos;import_module().NUVSDSession().user.system_configs.get_first().save&apos; id=&apos;139952965394728&apos;&gt;, args = (), kwargs = {}

    def __call__(_mock_self, *args, **kwargs):
        # can&apos;t use self in-case a function / method we are mocking uses self
        # in the signature
        _mock_self._mock_check_sig(*args, **kwargs)
&gt;       return _mock_self._mock_call(*args, **kwargs)

/usr/local/lib/python3.6/site-packages/mock/mock.py:1092: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name=&apos;import_module().NUVSDSession().user.system_configs.get_first().save&apos; id=&apos;139952965394728&apos;&gt;, args = (), kwargs = {}
self = &lt;MagicMock name=&apos;import_module().NUVSDSession().user.system_configs.get_first().save&apos; id=&apos;139952965394728&apos;&gt;, _call = call(), do_method_calls = False, method_call_name = &apos;save&apos;
mock_call_name = &apos;().NUVSDSession().user.system_configs.get_first().save&apos;, is_a_call = True, _new_parent = None
this_mock_call = call().NUVSDSession().user.system_configs.get_first().save(), dot = &apos;.&apos;
effect = BambouHTTPError(&apos;[HTTP 400(There are no attribute changes)] There are no attribute changes&apos;,)

    def _mock_call(_mock_self, *args, **kwargs):
        self = _mock_self
        self.called = True
        self.call_count += 1
    
        # handle call_args
        _call = _Call((args, kwargs), two=True)
        self.call_args = _call
        self.call_args_list.append(_call)
    
        # initial stuff for method_calls:
        do_method_calls = self._mock_parent is not None
        method_call_name = self._mock_name
    
        # initial stuff for mock_calls:
        mock_call_name = self._mock_new_name
        is_a_call = mock_call_name == &apos;()&apos;
        self.mock_calls.append(_Call((&apos;&apos;, args, kwargs)))
    
        # follow up the chain of mocks:
        _new_parent = self._mock_new_parent
        while _new_parent is not None:
    
            # handle method_calls:
            if do_method_calls:
                _new_parent.method_calls.append(_Call((method_call_name, args, kwargs)))
                do_method_calls = _new_parent._mock_parent is not None
                if do_method_calls:
                    method_call_name = _new_parent._mock_name + &apos;.&apos; + method_call_name
    
            # handle mock_calls:
            this_mock_call = _Call((mock_call_name, args, kwargs))
            _new_parent.mock_calls.append(this_mock_call)
    
            if _new_parent._mock_new_name:
                if is_a_call:
                    dot = &apos;&apos;
                else:
                    dot = &apos;.&apos;
                is_a_call = _new_parent._mock_new_name == &apos;()&apos;
                mock_call_name = _new_parent._mock_new_name + dot + mock_call_name
    
            # follow the parental chain:
            _new_parent = _new_parent._mock_new_parent
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
&gt;               raise effect
E               bambou.exceptions.BambouHTTPError: [HTTP 400(There are no attribute changes)] There are no attribute changes

/usr/local/lib/python3.6/site-packages/mock/mock.py:1143: BambouHTTPError

During handling of the above exception, another exception occurred:

self = &lt;library.tests.test_config_vsd_system.TestConfigVsdSystem object at 0x7f4956cf72b0&gt;, module_patch = &lt;MagicMock name=&apos;AnsibleModule&apos; id=&apos;139952965776104&apos;&gt;
import_patch = &lt;MagicMock name=&apos;import_module&apos; id=&apos;139952965788784&apos;&gt;

    @patch(&quot;importlib.import_module&quot;)
    @patch(MODULE_PATCH)
    def test_set__already_set(self, module_patch, import_patch):
        mock_module = self.setup_module(module_patch)
        mock_root = self.setup_session_root(import_patch)
    
        mock_sys_config = self.setup_sys_config(mock_root)
        mock_sys_config.save.side_effect = self.get_mock_bambou_error(
            400, &quot;There are no attribute changes&quot;)
    
&gt;       main()

src/library/tests/test_config_vsd_system.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def main():
        arg_spec = dict(
            vsd_auth=dict(required=True, type=&apos;dict&apos;),
            get_gateway_purge_time=dict(default=False, type=&apos;bool&apos;),
            gateway_purge_time=dict(type=&apos;int&apos;)
        )
        module = AnsibleModule(argument_spec=arg_spec, supports_check_mode=True)
    
        vsd_auth = module.params[&apos;vsd_auth&apos;]
        gw_purge_time = module.params[&apos;gateway_purge_time&apos;]
        get_gateway_purge_time = module.params[&apos;get_gateway_purge_time&apos;]
    
        try:
            csproot = get_vsd_session(vsd_auth)
        except ImportError:
            module.fail_json(msg=&quot;vspk is required for this module, or &quot;
                             &quot;API version specified does not exist.&quot;)
            return
        except Exception as e:
            module.fail_json(msg=&quot;Could not establish connection to VSD %s&quot; % e)
            return
    
        if not get_gateway_purge_time:
            try:
                set_gateway_purge_time(csproot, gw_purge_time)
            except exceptions.BambouHTTPError as e:
&gt;               if &quot;There are no attribute changes&quot; in e.message:
E               AttributeError: &apos;BambouHTTPError&apos; object has no attribute &apos;message&apos;

src/library/config_vsd_system.py:103: AttributeError</failure></testcase><testcase classname="src.library.tests.test_config_vsd_system.TestConfigVsdSystem" file="src/library/tests/test_config_vsd_system.py" line="137" name="test_set__update_error" time="0.003"></testcase><testcase classname="src.library.tests.test_config_vsd_system.TestConfigVsdSystem" file="src/library/tests/test_config_vsd_system.py" line="156" name="test__cannot_import" time="0.002"></testcase><testcase classname="src.library.tests.test_config_vsd_system.TestConfigVsdSystem" file="src/library/tests/test_config_vsd_system.py" line="170" name="test__cannot_connect" time="0.003"></testcase><testcase classname="src.library.tests.test_create_zfb_profile.TestCreateZfbProfile" file="src/library/tests/test_create_zfb_profile.py" line="214" name="test_iso_create__success" time="0.006"><failure message="NameError: name &apos;unicode&apos; is not defined">self = &lt;library.tests.test_create_zfb_profile.TestCreateZfbProfile object at 0x7f4956c31e48&gt;, mock_subproc = &lt;MagicMock name=&apos;call&apos; id=&apos;139952965149808&apos;&gt;
vspk_patch = &lt;MagicMock name=&apos;VSPK&apos; id=&apos;139952965734584&apos;&gt;, module_patch = &lt;MagicMock name=&apos;AnsibleModule&apos; id=&apos;139952965758536&apos;&gt;

    @patch(MODULE_PATCH)
    @patch(VSPK_PATCH)
    @patch(&quot;subprocess.call&quot;)
    def test_iso_create__success(self, mock_subproc, vspk_patch, module_patch):
        mock_module = setup_module(module_patch)
        self.setup_session(vspk_patch)
        self.setup_license(vspk_patch)
        self.setup_enterprise(vspk_patch)
        self.setup_nsg_infra(vspk_patch)
        self.setup_nsg_template(vspk_patch)
        self.setup_vsc_infra(vspk_patch)
        self.setup_nsg_ports(vspk_patch)
        self.setup_nsg_device(vspk_patch)
        self.setup_create_iso(vspk_patch)
    
&gt;       main()

src/library/tests/test_create_zfb_profile.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/library/create_zfb_profile.py:417: in main
    if (not is_license_already_installed(csproot, vsd_license)):
src/library/create_zfb_profile.py:154: in is_license_already_installed
    license_unique_id = get_license_unique_id(vsd_license)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vsd_license = &apos;01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\n&apos;

    def get_license_unique_id(vsd_license):
        stripped = vsd_license.strip()
&gt;       return unicode(stripped[0:16] + stripped[-16:])
E       NameError: name &apos;unicode&apos; is not defined

src/library/create_zfb_profile.py:166: NameError</failure></testcase><testcase classname="src.library.tests.test_create_zfb_profile.TestCreateZfbProfile" file="src/library/tests/test_create_zfb_profile.py" line="248" name="test_license__installed" time="0.001"><failure message="NameError: name &apos;unicode&apos; is not defined">self = &lt;library.tests.test_create_zfb_profile.TestCreateZfbProfile object at 0x7f4956b87080&gt;

    def test_license__installed(self):
        with open(LICENSE_FILE, &quot;r&quot;) as f:
            vsd_license_str = f.read()
    
        vsd_license = MagicMock()
        vsd_license.unique_license_identifier = LICENSE_ID
        bogus_license = MagicMock()
        bogus_license.unique_license_identifier = &quot;asdfasdf&quot;
    
        licenses = [bogus_license]
    
        mock_root = MagicMock()
        mock_root.licenses = MagicMock()
        mock_root.licenses.get.return_value = licenses
    
&gt;       assert is_license_already_installed(mock_root,
                                            vsd_license_str) is False

src/library/tests/test_create_zfb_profile.py:264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/library/create_zfb_profile.py:154: in is_license_already_installed
    license_unique_id = get_license_unique_id(vsd_license)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vsd_license = &apos;01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\n&apos;

    def get_license_unique_id(vsd_license):
        stripped = vsd_license.strip()
&gt;       return unicode(stripped[0:16] + stripped[-16:])
E       NameError: name &apos;unicode&apos; is not defined

src/library/create_zfb_profile.py:166: NameError</failure></testcase><testcase classname="src.library.tests.test_create_zfb_profile.TestCreateZfbProfile" file="src/library/tests/test_create_zfb_profile.py" line="271" name="test__bad_license" time="0.001"></testcase><testcase classname="src.library.tests.test_create_zfb_profile.TestCreateZfbProfile" file="src/library/tests/test_create_zfb_profile.py" line="283" name="test__cannot_connect" time="0.002"></testcase><testcase classname="src.library.tests.test_monit_waitfor_service" file="src/library/tests/test_monit_waitfor_service.py" line="51" name="test__status_ok" time="0.002"></testcase><testcase classname="src.library.tests.test_monit_waitfor_service" file="src/library/tests/test_monit_waitfor_service.py" line="69" name="test__stopped" time="0.002"></testcase><testcase classname="src.library.tests.test_monit_waitfor_service" file="src/library/tests/test_monit_waitfor_service.py" line="85" name="test__waiting" time="0.002"></testcase><testcase classname="src.library.tests.test_monit_waitfor_service" file="src/library/tests/test_monit_waitfor_service.py" line="107" name="test__wrong_process" time="0.003"></testcase><testcase classname="src.library.tests.test_monit_waitfor_service" file="src/library/tests/test_monit_waitfor_service.py" line="125" name="test__restart_success" time="0.002"></testcase><testcase classname="src.library.tests.test_monit_waitfor_service" file="src/library/tests/test_monit_waitfor_service.py" line="151" name="test__restart_failed" time="0.002"></testcase><testcase classname="src.library.tests.test_network_info" file="src/library/tests/test_network_info.py" line="53" name="test__addresses" time="0.002"></testcase><testcase classname="src.library.tests.test_network_info" file="src/library/tests/test_network_info.py" line="76" name="test__macs" time="0.002"></testcase><testcase classname="src.library.tests.test_network_info" file="src/library/tests/test_network_info.py" line="101" name="test__command_error" time="0.002"></testcase><testcase classname="src.library.tests.test_nuage_append" file="src/library/tests/test_nuage_append.py" line="22" name="test__success" time="0.003"></testcase><testcase classname="src.library.tests.test_read_yaml_with_vault" file="src/library/tests/test_read_yaml_with_vault.py" line="23" name="test__success" time="0.004"></testcase><testcase classname="src.library.tests.test_read_yaml_with_vault" file="src/library/tests/test_read_yaml_with_vault.py" line="38" name="test__parse_error" time="0.002"><system-out>Could not load yaml file /home/eswar/source/nuage-metro/src/library/tests/mock_encrypted.yml: Test exception
</system-out></testcase><testcase classname="src.library.tests.test_set_event_log.TestSetEventLog" file="src/library/tests/test_set_event_log.py" line="60" name="test__success" time="0.003"></testcase><testcase classname="src.library.tests.test_set_event_log.TestSetEventLog" file="src/library/tests/test_set_event_log.py" line="78" name="test__cannot_import" time="0.002"></testcase><testcase classname="src.library.tests.test_set_event_log.TestSetEventLog" file="src/library/tests/test_set_event_log.py" line="91" name="test__cannot_connect" time="0.002"></testcase><testcase classname="src.library.tests.test_set_event_log.TestSetEventLog" file="src/library/tests/test_set_event_log.py" line="104" name="test__bambou_error" time="0.004"></testcase><testcase classname="src.library.tests.test_set_event_log.TestSetEventLog" file="src/library/tests/test_set_event_log.py" line="121" name="test__exception" time="0.003"></testcase><testcase classname="src.library.tests.test_validate_against_schema" file="src/library/tests/test_validate_against_schema.py" line="23" name="test__success" time="0.007"></testcase><testcase classname="src.library.tests.test_validate_against_schema" file="src/library/tests/test_validate_against_schema.py" line="33" name="test__data_parse_error" time="0.002"><system-out>Could not load yaml file /home/eswar/source/nuage-metro/src/library/tests/mock_encrypted.yml: Bad yaml
</system-out></testcase><testcase classname="src.library.tests.test_validate_against_schema" file="src/library/tests/test_validate_against_schema.py" line="46" name="test__schema_parse_error" time="0.002"><system-out>Could not load schema /home/eswar/source/nuage-metro/src/library/tests/mock_schema.json: Bad schema
</system-out></testcase><testcase classname="src.library.tests.test_validate_against_schema" file="src/library/tests/test_validate_against_schema.py" line="59" name="test__schema_error" time="0.006"><system-out>Invalid data in /home/eswar/source/nuage-metro/src/library/tests/mock_encrypted.yml for Username: &apos;username&apos; is not of type &apos;integer&apos;
</system-out></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="118" name="test_enable__success" time="0.007"></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="136" name="test_disable__success" time="0.007"></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="156" name="test_enable__no_domains" time="0.006"></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="175" name="test_reserved__success" time="0.026"></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="194" name="test__cannot_import" time="0.002"></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="207" name="test__cannot_connect" time="0.002"></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="220" name="test__no_changes" time="0.005"><failure message="AttributeError: &apos;BambouHTTPError&apos; object has no attribute &apos;message&apos;">def main():
        arg_spec = dict(
            vsd_auth=dict(required=True, type=&apos;dict&apos;),
            state=dict(required=True, choices=[&apos;enabled&apos;, &apos;disabled&apos;])
        )
        module = AnsibleModule(argument_spec=arg_spec, supports_check_mode=True)
    
        vsd_auth = module.params[&apos;vsd_auth&apos;]
        state = module.params[&apos;state&apos;]
    
        try:
            csproot = get_vsd_session(vsd_auth)
        except ImportError:
            module.fail_json(rc=1, msg=&apos;vspk is required for this module, or &apos;
                             &apos;API version specified does not exist.&apos;)
            return
    
        except Exception as e:
            module.fail_json(rc=1,
                             msg=&quot;Could not establish connection to VSD %s&quot; % e)
            return
    
        try:
&gt;           result_str = set_maintainance_mode(csproot, state)

src/library/vsd_maintainance.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

csproot = &lt;MagicMock name=&apos;import_module().NUVSDSession().user&apos; id=&apos;139952964057744&apos;&gt;, state = &apos;enabled&apos;

    def set_maintainance_mode(csproot, state):
        result_str = &apos;&apos;
        lst_enterprise_ids = []
        lst_enterprises = csproot.enterprises.get()
        for enterprise in lst_enterprises:
            if enterprise.name != &apos;Shared Infrastructure&apos;:
                lst_enterprise_ids.append(enterprise.id)
        lst_l3_domains = csproot.domains.get()
        if lst_l3_domains:
            for l3_domain in lst_l3_domains:
                if l3_domain.parent_id in lst_enterprise_ids:
                    try:
                        if state == &apos;enabled&apos;:
                            l3_domain.maintenance_mode = &apos;ENABLED&apos;
                            l3_domain.save()
                        elif state == &apos;disabled&apos;:
                            l3_domain.maintenance_mode = &apos;DISABLED&apos;
                            l3_domain.save()
                    except Exception as e:
                        if &apos;is reserved&apos; not in str(e):
&gt;                           raise e

src/library/vsd_maintainance.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

csproot = &lt;MagicMock name=&apos;import_module().NUVSDSession().user&apos; id=&apos;139952964057744&apos;&gt;, state = &apos;enabled&apos;

    def set_maintainance_mode(csproot, state):
        result_str = &apos;&apos;
        lst_enterprise_ids = []
        lst_enterprises = csproot.enterprises.get()
        for enterprise in lst_enterprises:
            if enterprise.name != &apos;Shared Infrastructure&apos;:
                lst_enterprise_ids.append(enterprise.id)
        lst_l3_domains = csproot.domains.get()
        if lst_l3_domains:
            for l3_domain in lst_l3_domains:
                if l3_domain.parent_id in lst_enterprise_ids:
                    try:
                        if state == &apos;enabled&apos;:
                            l3_domain.maintenance_mode = &apos;ENABLED&apos;
&gt;                           l3_domain.save()

src/library/vsd_maintainance.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name=&apos;mock.save&apos; id=&apos;139952960475088&apos;&gt;, args = (), kwargs = {}

    def __call__(_mock_self, *args, **kwargs):
        # can&apos;t use self in-case a function / method we are mocking uses self
        # in the signature
        _mock_self._mock_check_sig(*args, **kwargs)
&gt;       return _mock_self._mock_call(*args, **kwargs)

/usr/local/lib/python3.6/site-packages/mock/mock.py:1092: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name=&apos;mock.save&apos; id=&apos;139952960475088&apos;&gt;, args = (), kwargs = {}, self = &lt;MagicMock name=&apos;mock.save&apos; id=&apos;139952960475088&apos;&gt;, _call = call()
do_method_calls = False, method_call_name = &apos;save&apos;, mock_call_name = &apos;save&apos;, is_a_call = False, _new_parent = None, this_mock_call = call.save()
effect = BambouHTTPError(&apos;[HTTP 400(There are no attribute changes)] There are no attribute changes&apos;,)

    def _mock_call(_mock_self, *args, **kwargs):
        self = _mock_self
        self.called = True
        self.call_count += 1
    
        # handle call_args
        _call = _Call((args, kwargs), two=True)
        self.call_args = _call
        self.call_args_list.append(_call)
    
        # initial stuff for method_calls:
        do_method_calls = self._mock_parent is not None
        method_call_name = self._mock_name
    
        # initial stuff for mock_calls:
        mock_call_name = self._mock_new_name
        is_a_call = mock_call_name == &apos;()&apos;
        self.mock_calls.append(_Call((&apos;&apos;, args, kwargs)))
    
        # follow up the chain of mocks:
        _new_parent = self._mock_new_parent
        while _new_parent is not None:
    
            # handle method_calls:
            if do_method_calls:
                _new_parent.method_calls.append(_Call((method_call_name, args, kwargs)))
                do_method_calls = _new_parent._mock_parent is not None
                if do_method_calls:
                    method_call_name = _new_parent._mock_name + &apos;.&apos; + method_call_name
    
            # handle mock_calls:
            this_mock_call = _Call((mock_call_name, args, kwargs))
            _new_parent.mock_calls.append(this_mock_call)
    
            if _new_parent._mock_new_name:
                if is_a_call:
                    dot = &apos;&apos;
                else:
                    dot = &apos;.&apos;
                is_a_call = _new_parent._mock_new_name == &apos;()&apos;
                mock_call_name = _new_parent._mock_new_name + dot + mock_call_name
    
            # follow the parental chain:
            _new_parent = _new_parent._mock_new_parent
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
&gt;               raise effect
E               bambou.exceptions.BambouHTTPError: [HTTP 400(There are no attribute changes)] There are no attribute changes

/usr/local/lib/python3.6/site-packages/mock/mock.py:1143: BambouHTTPError

During handling of the above exception, another exception occurred:

self = &lt;library.tests.test_vsd_maintainance.TestVsdMaintainance object at 0x7f4956b539b0&gt;, module_patch = &lt;MagicMock name=&apos;AnsibleModule&apos; id=&apos;139952964058192&apos;&gt;
import_patch = &lt;MagicMock name=&apos;import_module&apos; id=&apos;139952964730272&apos;&gt;

    @patch(&quot;importlib.import_module&quot;)
    @patch(MODULE_PATCH)
    def test__no_changes(self, module_patch, import_patch):
        mock_module = setup_module(module_patch)
        mock_root = self.setup_session_root(import_patch)
        self.setup_sample_domains(mock_root)
        self.l3_domains[1].save.side_effect = self.get_mock_bambou_error(
            400, &quot;There are no attribute changes&quot;)
    
&gt;       main()

src/library/tests/test_vsd_maintainance.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def main():
        arg_spec = dict(
            vsd_auth=dict(required=True, type=&apos;dict&apos;),
            state=dict(required=True, choices=[&apos;enabled&apos;, &apos;disabled&apos;])
        )
        module = AnsibleModule(argument_spec=arg_spec, supports_check_mode=True)
    
        vsd_auth = module.params[&apos;vsd_auth&apos;]
        state = module.params[&apos;state&apos;]
    
        try:
            csproot = get_vsd_session(vsd_auth)
        except ImportError:
            module.fail_json(rc=1, msg=&apos;vspk is required for this module, or &apos;
                             &apos;API version specified does not exist.&apos;)
            return
    
        except Exception as e:
            module.fail_json(rc=1,
                             msg=&quot;Could not establish connection to VSD %s&quot; % e)
            return
    
        try:
            result_str = set_maintainance_mode(csproot, state)
            module.exit_json(rc=0, changed=True, result=&quot;%s&quot; % result_str)
        except exceptions.BambouHTTPError as be:
&gt;           if &quot;There are no attribute changes&quot; in be.message:
E           AttributeError: &apos;BambouHTTPError&apos; object has no attribute &apos;message&apos;

src/library/vsd_maintainance.py:124: AttributeError</failure></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="237" name="test__bambou_error" time="0.005"><failure message="AttributeError: &apos;BambouHTTPError&apos; object has no attribute &apos;message&apos;">def main():
        arg_spec = dict(
            vsd_auth=dict(required=True, type=&apos;dict&apos;),
            state=dict(required=True, choices=[&apos;enabled&apos;, &apos;disabled&apos;])
        )
        module = AnsibleModule(argument_spec=arg_spec, supports_check_mode=True)
    
        vsd_auth = module.params[&apos;vsd_auth&apos;]
        state = module.params[&apos;state&apos;]
    
        try:
            csproot = get_vsd_session(vsd_auth)
        except ImportError:
            module.fail_json(rc=1, msg=&apos;vspk is required for this module, or &apos;
                             &apos;API version specified does not exist.&apos;)
            return
    
        except Exception as e:
            module.fail_json(rc=1,
                             msg=&quot;Could not establish connection to VSD %s&quot; % e)
            return
    
        try:
&gt;           result_str = set_maintainance_mode(csproot, state)

src/library/vsd_maintainance.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

csproot = &lt;MagicMock name=&apos;import_module().NUVSDSession().user&apos; id=&apos;139952960207112&apos;&gt;, state = &apos;enabled&apos;

    def set_maintainance_mode(csproot, state):
        result_str = &apos;&apos;
        lst_enterprise_ids = []
        lst_enterprises = csproot.enterprises.get()
        for enterprise in lst_enterprises:
            if enterprise.name != &apos;Shared Infrastructure&apos;:
                lst_enterprise_ids.append(enterprise.id)
        lst_l3_domains = csproot.domains.get()
        if lst_l3_domains:
            for l3_domain in lst_l3_domains:
                if l3_domain.parent_id in lst_enterprise_ids:
                    try:
                        if state == &apos;enabled&apos;:
                            l3_domain.maintenance_mode = &apos;ENABLED&apos;
                            l3_domain.save()
                        elif state == &apos;disabled&apos;:
                            l3_domain.maintenance_mode = &apos;DISABLED&apos;
                            l3_domain.save()
                    except Exception as e:
                        if &apos;is reserved&apos; not in str(e):
&gt;                           raise e

src/library/vsd_maintainance.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

csproot = &lt;MagicMock name=&apos;import_module().NUVSDSession().user&apos; id=&apos;139952960207112&apos;&gt;, state = &apos;enabled&apos;

    def set_maintainance_mode(csproot, state):
        result_str = &apos;&apos;
        lst_enterprise_ids = []
        lst_enterprises = csproot.enterprises.get()
        for enterprise in lst_enterprises:
            if enterprise.name != &apos;Shared Infrastructure&apos;:
                lst_enterprise_ids.append(enterprise.id)
        lst_l3_domains = csproot.domains.get()
        if lst_l3_domains:
            for l3_domain in lst_l3_domains:
                if l3_domain.parent_id in lst_enterprise_ids:
                    try:
                        if state == &apos;enabled&apos;:
                            l3_domain.maintenance_mode = &apos;ENABLED&apos;
&gt;                           l3_domain.save()

src/library/vsd_maintainance.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name=&apos;mock.save&apos; id=&apos;139952959904680&apos;&gt;, args = (), kwargs = {}

    def __call__(_mock_self, *args, **kwargs):
        # can&apos;t use self in-case a function / method we are mocking uses self
        # in the signature
        _mock_self._mock_check_sig(*args, **kwargs)
&gt;       return _mock_self._mock_call(*args, **kwargs)

/usr/local/lib/python3.6/site-packages/mock/mock.py:1092: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name=&apos;mock.save&apos; id=&apos;139952959904680&apos;&gt;, args = (), kwargs = {}, self = &lt;MagicMock name=&apos;mock.save&apos; id=&apos;139952959904680&apos;&gt;, _call = call()
do_method_calls = False, method_call_name = &apos;save&apos;, mock_call_name = &apos;save&apos;, is_a_call = False, _new_parent = None, this_mock_call = call.save()
effect = BambouHTTPError(&apos;[HTTP 400(save error)] save error&apos;,)

    def _mock_call(_mock_self, *args, **kwargs):
        self = _mock_self
        self.called = True
        self.call_count += 1
    
        # handle call_args
        _call = _Call((args, kwargs), two=True)
        self.call_args = _call
        self.call_args_list.append(_call)
    
        # initial stuff for method_calls:
        do_method_calls = self._mock_parent is not None
        method_call_name = self._mock_name
    
        # initial stuff for mock_calls:
        mock_call_name = self._mock_new_name
        is_a_call = mock_call_name == &apos;()&apos;
        self.mock_calls.append(_Call((&apos;&apos;, args, kwargs)))
    
        # follow up the chain of mocks:
        _new_parent = self._mock_new_parent
        while _new_parent is not None:
    
            # handle method_calls:
            if do_method_calls:
                _new_parent.method_calls.append(_Call((method_call_name, args, kwargs)))
                do_method_calls = _new_parent._mock_parent is not None
                if do_method_calls:
                    method_call_name = _new_parent._mock_name + &apos;.&apos; + method_call_name
    
            # handle mock_calls:
            this_mock_call = _Call((mock_call_name, args, kwargs))
            _new_parent.mock_calls.append(this_mock_call)
    
            if _new_parent._mock_new_name:
                if is_a_call:
                    dot = &apos;&apos;
                else:
                    dot = &apos;.&apos;
                is_a_call = _new_parent._mock_new_name == &apos;()&apos;
                mock_call_name = _new_parent._mock_new_name + dot + mock_call_name
    
            # follow the parental chain:
            _new_parent = _new_parent._mock_new_parent
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
&gt;               raise effect
E               bambou.exceptions.BambouHTTPError: [HTTP 400(save error)] save error

/usr/local/lib/python3.6/site-packages/mock/mock.py:1143: BambouHTTPError

During handling of the above exception, another exception occurred:

self = &lt;library.tests.test_vsd_maintainance.TestVsdMaintainance object at 0x7f4956992978&gt;, module_patch = &lt;MagicMock name=&apos;AnsibleModule&apos; id=&apos;139952962217744&apos;&gt;
import_patch = &lt;MagicMock name=&apos;import_module&apos; id=&apos;139952960496248&apos;&gt;

    @patch(&quot;importlib.import_module&quot;)
    @patch(MODULE_PATCH)
    def test__bambou_error(self, module_patch, import_patch):
        mock_module = setup_module(module_patch)
        mock_root = self.setup_session_root(import_patch)
        self.setup_sample_domains(mock_root)
        self.l3_domains[1].save.side_effect = self.get_mock_bambou_error(
            400, &quot;save error&quot;)
    
&gt;       main()

src/library/tests/test_vsd_maintainance.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def main():
        arg_spec = dict(
            vsd_auth=dict(required=True, type=&apos;dict&apos;),
            state=dict(required=True, choices=[&apos;enabled&apos;, &apos;disabled&apos;])
        )
        module = AnsibleModule(argument_spec=arg_spec, supports_check_mode=True)
    
        vsd_auth = module.params[&apos;vsd_auth&apos;]
        state = module.params[&apos;state&apos;]
    
        try:
            csproot = get_vsd_session(vsd_auth)
        except ImportError:
            module.fail_json(rc=1, msg=&apos;vspk is required for this module, or &apos;
                             &apos;API version specified does not exist.&apos;)
            return
    
        except Exception as e:
            module.fail_json(rc=1,
                             msg=&quot;Could not establish connection to VSD %s&quot; % e)
            return
    
        try:
            result_str = set_maintainance_mode(csproot, state)
            module.exit_json(rc=0, changed=True, result=&quot;%s&quot; % result_str)
        except exceptions.BambouHTTPError as be:
&gt;           if &quot;There are no attribute changes&quot; in be.message:
E           AttributeError: &apos;BambouHTTPError&apos; object has no attribute &apos;message&apos;

src/library/vsd_maintainance.py:124: AttributeError</failure></testcase><testcase classname="src.library.tests.test_vsd_maintainance.TestVsdMaintainance" file="src/library/tests/test_vsd_maintainance.py" line="253" name="test__exception" time="0.005"></testcase><testcase classname="src.library.tests.test_vsd_monit" file="src/library/tests/test_vsd_monit.py" line="43" name="test_all__success" time="0.002"></testcase><testcase classname="src.library.tests.test_vsd_monit" file="src/library/tests/test_vsd_monit.py" line="59" name="test_group__success" time="0.002"></testcase><testcase classname="src.library.tests.test_vsd_monit" file="src/library/tests/test_vsd_monit.py" line="77" name="test_all__monit_error" time="0.002"></testcase><testcase classname="src.library.tests.test_yaml_checker" file="src/library/tests/test_yaml_checker.py" line="21" name="test__success" time="0.003"></testcase><testcase classname="src.library.tests.test_yaml_checker" file="src/library/tests/test_yaml_checker.py" line="31" name="test__invalid_yaml" time="0.002"><system-out>Error while parsing YAML file:
</system-out></testcase><testcase classname="src.library.tests.test_yaml_checker" file="src/library/tests/test_yaml_checker.py" line="48" name="test__duplicate_keys" time="0.002"></testcase></testsuite></testsuites>