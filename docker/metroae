#!/bin/bash
LINUX=0
NON_LINUX=1

containerID=''
runningContainerID=''
imageID=''
maxContainerVersion='1.0'
confirmationMessage=''
registryHost='registry.mv.nuagenetworks.net'
metroAEImage="$registryHost:5000/metroae"
osRelease=$LINUX
path=""
environmentFilters=(PWD PATH HOME USER SHELL MAIL SSH_CONNECTION LOGNAME OLDPWD)

S3KEY="AKIAJOPWRLAXPCUXZX3A"
S3SECRET="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"
file=metroaecontainer.tar
bucket="nuage-devops"
prefix="images"
temp=/tmp/

checkDocker() {
	echo "checking docker version" >> ./metroae.log
	docker --version >> ./metroae.log 2>> ./metroae.log

	if [ $? -ne 0 ]
	then
		echo "MetroAE container requires Docker.  Please install at https://docs.docker.com"
		exit 1
	fi
}

getHostOperatingSystem() {
	echo "checking os type" >> ./metroae.log
	stat /etc/os-release >> ./metroae.log 2>> ./metroae.log
    
    if [ $? -ne 0 ] 
    then
		osRelease=$NON_LINUX
	fi 
		
}

getMaxContainerVersion() { 
    versions=`docker images | grep $metroAEImage | awk '{ print $2}'`
	maxContainerVersion=''
	for version in $versions
	do
        if [ -z $maxContainerVersion ]
        then
                maxContainerVersion=$version
        fi

        if [ $maxContainerVersion \< $version ]
        then
                maxContainerVersion=$version
        fi
	done
	
	if [ -z $maxContainerVersion ]
	then
		maxContainerVersion='1.0'
	fi
	
	echo "Max Container version detected $maxContainerVersion" >> ./metroae.log
	
}

getContainerID() { 
	getMaxContainerVersion
	containerID=`docker ps -a | grep $metroAEImage | grep $maxContainerVersion | awk '{ print $1}'`
}

getRunningContainerID() {
	getMaxContainerVersion 
	runningContainerID=`docker ps | grep $metroAEImage | grep $maxContainerVersion | awk '{ print $1}'`
}

getImageID() { 
	getMaxContainerVersion 
	imageID=`docker images | grep $metroAEImage | grep $maxContainerVersion | awk '{ print $3}'`
}

checkSelinuxEnforceStatus() { 
	getHostOperatingSystem 
	if [ $osRelease -eq $NON_LINUX ]
	then
		return 0
	fi
	
	enforcement=`getenforce`
	
	if [[ $enforcement == "Enforcing" ]]
	then
		echo "Selinux enforcing has to be turned off for MetroAE container to work properly"
		return 1
	fi
}

stop() {
	getRunningContainerID
	
	if [ -z $runningContainerID  ]
	then
		echo "No Container to stop"
		return 0
	fi
	
	docker stop $runningContainerID 
	status=$?
	if [ $status -ne 0 ]
	then
		echo "Stopping metroae docker container failed"
	else 
		echo "Container successfully stopped" 
	fi
	
	return $status
}

run() { 
	getImageID
	
	if [ -z $imageID ] 
	then
		setup
		status=$?
		if [ $status -ne 0 ]
		then
			echo "Unable to setup metroae container"
			return $status 
		fi
	else 
		getContainerID
		
		if [ -z $containerID ]
		then
			while read -r line; do declare $line; done < ~/.metroae
			networkArgs=""
			getHostOperatingSystem 
			if [ $osRelease  -eq $LINUX ]
			then
				networkArgs=" --network host"
			else
				networkArgs=" -p $UI_PORT:5001"
			fi
			docker run -d $networkArgs -v $METROAE_MOUNT_POINT:/data -v $IMAGES_MOUNT_POINT:/images --name metroae $metroAEImage:$maxContainerVersion 
		else 
			docker start $containerID
		fi
	    
	    status=$?
		if [ $status -ne 0 ] 
		then
			echo "Unable to run the latest metroae docker image"
		else 
			echo "Succesfully started the metroae container"
		fi
		
		return $status
	fi
}

deleteContainerID() {
	getContainerID
	if [ -z $containerID ]
	then
		echo "No container to remove" 
		return 0
	fi
	
	echo "Removing container with id $containerID" >> ./metroae.log
	docker rm $containerID 2>> ./metroae.log
	
	if [ $? -ne 0 ]
	then
		echo "Remove of metroae container failed" 
		return 1
	fi
	
	echo "MetroAE container removed successfully"
}

destroy() {
	echo $1
	if [ -z $1 ]
	then
		confirmation="init"
	else 
		confirmation=$1
	fi
	
	while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
	do
		read -p "Do you really want to destroy the container (yes/no): " confirmation
	done
 
	
	if [[ $confirmation != "yes" ]] && [[ $confirmation != "y" ]]
	then
		echo "Destroy Cancelled by user"
		return 1
	fi
	
	stop
	if [ $? -ne 0 ]
	then
		return 1
	fi
	
	deleteContainerID 
	if [ $? -ne 0 ]
	then
		return 1
	fi
	
	getImageID
	if [ -z $imageID ]
	then
		echo "No Image to remove"
		return 0
	fi
	
	echo "Destroying MetroAE container..." | tee  -a ./metroae.log
	
	docker rmi $imageID  2>> ./metroae.log
	
	if [ $? -ne 0 ]
	then
		echo "Remove of metroae image failed" 
		return 1
	fi
	
	return 0
}

getFromS3()
{
  file=metroaecontainer.tar
  aws_path=/images/
  bucket='nuage-devops'
  date=$(date +"%a, %d %b %Y %T %z")
  content_type='application/x-compressed-tar'
  string="GET\n\n$content_type\n$date\n/$bucket$aws_path$file"
  signature=$(echo -en "${string}" | openssl sha1 -hmac "${S3SECRET}" -binary | base64)
  curl -X GET\
    -H "Host: $bucket.s3.amazonaws.com" \
    -H "Date: $date" \
    -H "Content-Type: $content_type" \
    -H "Authorization: AWS ${S3KEY}:$signature" \
    "https://$bucket.s3.amazonaws.com$aws_path$file" > $temp$file | tee -a ./metroae.log 2>> ./metroae.log
   
}

pull() { 
	if [ ! -z $1 ]
	then
		maxContainerVersion=$1
	fi
	
	ping -c 5 registry.mv.nuagenetworks.net:5000 >> ./metroae.log 2>> ./metroae.log
	
	if [ $? -ne 0 ]
	then
		echo "Could not ping the local registry to download container" | tee -a ./metroae.log
		echo "Retrieving the container from amazon s3" | tee -a ./metroae.log
		getFromS3
		
		if [ $? -ne 0 ]
		then
			echo "unable to pull metroae container exiting" | tee -a ./metroae.log
			exit 1
		fi
		
		docker load -i $temp$file
	else 
		echo "Retrieving MetroAE container..." | tee -a ./metroae.log
		docker pull $metroAEImage:$maxContainerVersion 2>> ./metroae.log
	fi
	
	status=$?
	if [ $status -ne 0 ] 
	then
		echo "Unable to pull the $maxContainerVersion metroae docker image"
	fi
	
	return $status	
}

getUserPathInput() {
	validPath=1
	path=""
	while [ $validPath -ne 0 ]
	do
		read -p "$1" path
		echo "checking path for $1" >> ./metroae.log
		stat $path >> ./metroae.log 2>> ./metroae.log
		
		validPath=$?
		if [ $validPath -ne 0 ] 
		then
			echo "Invalid path provided"
		fi
	done
}

setup() {
	echo "Setup MetroAE container..."
	
	getContainerID
	getRunningContainerID
	
	if [ ! -z $containerID ] || [ ! -z $runningContainerID ]
	then
		echo "You already have the MetroAE container setup. Running setup will destroy the"
		echo "existing container and create a new one. Your data on disk will be preserved."
		echo "If you continue, create the new container, and use the same data and image"
		echo "mount points, no changes are required. If you change the mount points, however"
		echo "you will need to copy your existing data to the new mount points."
		
		confirmation="init"
		while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
		do
			read -p "Do you want to continue with setup (yes/no): " confirmation
		done
	 
		
		if [[ $confirmation != "yes" ]] && [[ $confirmation != "y" ]]
		then
			echo "Setup Cancelled by user"
			return 1
		fi
	fi
	
	getImageID 
	
	if [ -z $imageID ]
	then 
		pull
	fi
	
	if [ $? -ne 0 ] 
	then
		return 1
	fi
	
	if [ -z $1 ]
	then
		getUserPathInput "Specify the full path to store data on the host system: "
		data_path=$path
	else 
		data_path=$1
	fi
	
	if [ -z $2 ]
	then
		getUserPathInput "Specify the full path of image files on the host system: "
		images_path=$path
	else 
		images_path=$2
	fi
	
	getHostOperatingSystem 
	if [ $osRelease -eq $NON_LINUX ]
	then
		if [ -z $3 ]
		then
			read -p "Specify the REST API/UI access port for the container: " port
		else 
			port=$3
		fi
		echo UI_PORT=$port >> ~/.metroae
	fi
	
	echo IMAGES_MOUNT_POINT=$images_path >> ~/.metroae
	echo METROAE_MOUNT_POINT=$data_path >> ~/.metroae
	
	
	#stop and remove existing container if any
	getRunningContainerID 
	if [ ! -z $runningContainerID ]
	then
		stop
	fi 
	
	getContainerID
	if [ ! -z $containerID ] 
	then
		deleteContainerID
	fi
	
	
	#Ask if TLS needs to be setup
	confirmation="init"
	
	while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
	do
		read -p "Do you want to set a certificate and start the UI (yes/no): " confirmation
	done
	
	if [[ $confirmation == "yes" ]] && [[ $confirmation == "y" ]]
	then
		loadCertificates
		return 0
	fi
	
	run
	return $?
}

upgradeDocker() { 
	destroy 
	if [ $? -ne 0 ]
	then
		return 1
	fi
	
	pull
	run	
}

runContainerIfNotRunning() { 
	getRunningContainerID
	
	if [ -z $runningContainerID ]
	then
		run
		getRunningContainerID
	fi
}

dockerExec() { 
	runContainerIfNotRunning 
	
	environment='-e "ANSIBLE_FORCE_COLOR=true"'
	for env in `env`
	do
		filtered=0
		for filter in ${environmentFilters[@]}
		do
			if [[ "$env" =~ ^$filter ]]
			then
				filtered=1
				
			fi
		done
		
		if [ $filtered -eq 0 ]
		then
			environment="$environment -e $env"
		fi
	done
	
	docker exec $environment $runningContainerID "$@"
}

dockerMetroAEExec() {
	dockerExec /source/nuage-metro/metroae "$@"
}

stopUI() { 
	runContainerIfNotRunning 
	docker exec $runningContainerID /source/UI.sh stop
}

startUI() { 
	runContainerIfNotRunning 
	docker exec -it $runningContainerID /source/UI.sh start
}

UIstatus() {
	runContainerIfNotRunning
	docker exec $runningContainerID /source/UI.sh status
}

loadCertificates() {
	certificate=''
	if [ -z $1 ]
	then
		read -p "Enter the path to certificate file: " certificate
	else
		certificate=$1
	fi
	
	keyfile=''
	if [ -z $2 ]
	then
		read -p "Enter the path to key file: " keyfile
	else 
		keyfile=$2
	fi
	 
	docker exec -it $runningContainerID /source/UI.sh loadCertificates $1 $2
}

interactive() { 
	runContainerIfNotRunning
	docker exec -it $runningContainerID /bin/bash

}

unzip-files() {
	if [ $# -gt 1 ]
	then
		dockerExec /source/nuage-metro/nuage-unzip.sh "$@"  
	else
		dockerExec /source/nuage-metro/nuage-unzip.sh "$@" /images/
	fi
}

conBuildVarsToDeployments() {
	dockerExec /usr/bin/python /source/nuage-metro/convert_build_vars_to_deployment.py "$@"
}

genExampleFromSchema() {
	dockerExec /usr/bin/python /source/nuage-metro/generate_example_from_schema.py "$@"
}

status() {
	docker ps -a
	echo "Currently used docker settings..." 
	while read -r line; do declare $line; done < ~/.metroae
	echo "images_mount: $IMAGES_MOUNT_POINT"
	echo "metroae_mount: $METROAE_MOUNT_POINT"
	
	getHostOperatingSystem
	
	if [ $osRelease -eq $LINUX ]
	then
		echo "ui_port: 5001"
	else
		echo "ui_port: $UI_PORT"
	fi
}

vaultPassword() {
	dockerExec /usr/bin/python /source/nuage-metro/encrypt_credentials.py
}

disableEncryption() {
	runContainerIfNotRunning
	docker exec $runningContainerID /source/UI.sh disableEncryption
}

help() { 
	echo "Nuage Networks MetorAE docker container management script"
	echo "Usage:"
	echo ""
	echo "	./metroae [actions] | <workflow> [deployment] [options]"
	echo "	[actions]:	supported actions are help, pull, setup, start, stop, status, destroy, upgrade-engine, stop-ui, start-ui, status-ui, unzip-files, convert-build-vars-to-deployments, generate-example-from-schema, encrypt-credentials, enable-ui-encryption, disable-ui-encryption "
	echo "additionally supports commands that can be executed in the docker container" 
	
	getRunningContainerID 
	
	if [ ! -z $runningContainerID ]
	then
		dockerMetroAEExec --help
	fi
	
}

# check docker
checkDocker 

# main functionality

if [ $# -eq 0 ] 
then
	help
	exit 0
fi

checkSelinuxEnforceStatus 

POSITIONAL=()
exec=false
while [ $# -gt 0 ]
do
	key=$1
	case $key in
		help)
		help
		shift
		;;
		--h)
		help
		shift
		;;
		--help)
		help
		shift
		;;
		pull)
		if [ -z $2 ] 
		then
			pull
		else
			pull $2
			shift
		fi
		shift
		;;
		start)
		run
		shift
		;;
		setup)
		if [ -z $2 ]
		then
			setup
		else 
			setup $2
			shift
		fi
		shift
		;;
		stop)
		stop
		shift
		;;
		destroy)
		if [ -z $2 ]
		then
			destroy
		else 
			destroy $2
			shift
		fi
		shift
		;;
		upgrade-engine)
		upgradeDocker 
		shift
		;;
		stop-ui)
		stopUI
		shift
		;;
		start-ui)
		startUI
		shift
		;;
		status-ui)
		UIstatus
		shift
		;;
		status)
		status
		shift
		;;
		encrypt-credentials)
		vaultPassword
		shift
		;;
		enable-ui-encryption)
		loadCertificates $2 $3
		shift
		shift
		shift
		;;
		disable-ui-encryption)
		disableEncryption
		shift
		;;
		interactive)
		interactive
		shift
		;;
		unzip-files)
		shift
		unzip-files "$@"
		exit 0
		;;
		convert-build-vars-to-deployments)
		shift
		conBuildVarsToDeployments "$@"
		exit 0
		;;
		generate-example-from-schema)
		shift
		genExampleFromSchema "$@"
		exit 0
		;;
		*)
		POSITIONAL+=("$1")
		exec=true
		shift
		;;
	esac
done

if ($exec == true)
then
	dockerMetroAEExec "${POSITIONAL[@]}"
fi
