---
- block:
  - name: Verify that upgrade_vmname is defined if this is an upgrade VM
    assert:
      that: "upgrade_vmname is defined"
      msg: "For vsd-upgrade-destroy, upgrade_vmname must be defined in build_vars.yml"

  - name: Set local variable with upgrade_vmname
    set_fact:
      vm_name: "{{ upgrade_vmname }}"
  when: destroy_upgrade_vm | default( False )

- block:
  - name: Set local variable with vmname
    set_fact:
      vm_name: "{{ vmname }}"
  when: not (destroy_upgrade_vm | default( False ))

- name: Finding VM folder
  connection: local
  vmware_guest_find:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    name: "{{ vm_name }}"
    validate_certs: no
  register: vsd_vm_folder
  ignore_errors: on
  
- name: Gathering info on VM
  connection: local
  vmware_guest_facts:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    folder: "/{{ vcenter.datacenter }}{{ vsd_vm_folder['folders'][0] }}"
    name: "{{ vm_name }}"
    validate_certs: no
  register: vsd_vm_facts
  ignore_errors: on
  when: vsd_vm_folder|succeeded

- debug: var=vsd_vm_facts verbosity=1

- name: Check for exception in VSD VM facts
  fail: msg="Exception found {{ vsd_vm_facts.exception }}"
  when: vsd_vm_facts.exception is defined

- block:
  
  - block:
    
    - block:

      - name: Get UUID of VM
        vmware_vm_facts:
          hostname: "{{ target_server }}"
          username: "{{ vcenter.username }}"
          password: "{{ vcenter.password }}"
        delegate_to: localhost
        register: vm_list

      - name: Set VM UUID
        set_fact:
          uuid: "{{ vm_list.virtual_machines[vm_name]['uuid'] }}"
  
      - debug: var=uuid
    
      - name: Configure autostart
        connection: local
        autostart_vcenter:
          name: "{{ vm_name }}"
          uuid: "{{ uuid }}"
          hostname: "{{ target_server }}"
          username: "{{ vcenter.username }}"
          password: "{{ vcenter.password }}"
          configuration: disable

     # - name: Get host info for VM to configure Autostart
     #   connection: local
     #   command: "{{ role_path }}/files/get_vcenter_host.py -s {{ target_server }} -u {{ vcenter.username }} -p {{ vcenter.password }} -d {{ vm_cmd }}" 
     #   register: vcenter_host
  
     # - name: Store ESXI host 
     #   set_fact:
     #     esxi_host: "{{ vcenter_host.stdout }}"

     # - name: Configure autostart
     #   connection: local
     #   command: "{{ role_path }}/files/autostart_vcenter.py -ip {{ target_server }} -u {{ vcenter.username }} -p {{ vcenter.password }} -t {{ esxi_host}} -n {{ vm_name }} -e false"

     #when: nuage_upgrade | default( False )

      - name: Power off the vsd VM
        connection: local
        vmware_guest:
          hostname: "{{ target_server }}"
          username: "{{ vcenter.username }}"
          password: "{{ vcenter.password }}"
          validate_certs: no
          datacenter: "{{ vcenter.datacenter }}"
          folder: "/{{ vcenter.datacenter }}{{ vsd_vm_folder['folders'][0] }}"
          name: "{{ vm_name }}"
          state: "poweredoff"

      when: vsd_vm_facts['instance']['hw_power_status'] == 'poweredOn'
  
  - name: Removing the vsd VM
    connection: local
    vmware_guest:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      validate_certs: no
      datacenter: "{{ vcenter.datacenter }}"
      folder: "/{{ vcenter.datacenter }}{{ vsd_vm_folder['folders'][0] }}"
      name: "{{ vm_name }}"
      state: "absent"
  when: vsd_vm_folder|succeeded and vsd_vm_facts|succeeded
