#- name: Display if skipping NSGV predeploy
#  debug:
#    msg:
#      - "****************************************************"
#      - "Skipping NSGV predeploy because it is already present"
#      - "****************************************************"
#  when: node_present

- name: Set local variable with upgrade status
  set_fact:
    upgrade: "{{ nuage_upgrade|default('False') }}"

- block:
  - name: Verify that upgrade_vmname is defined if this is an upgrade
    assert:
      that: "upgrade_vmname is defined"
      msg: "upgrade_vmname is required for upgrade"
  - name: Set local variable with upgrade_vmname
    set_fact:
      vm_name: "{{ upgrade_vmname }}"
  when: upgrade

- block:
  - name: Set local variable with vmname
    set_fact:
      vm_name: "{{ vmname }}"
  when: not upgrade

- name: Set local temp directory name
  set_fact:
    temp_dir: "./ansible-heat-{{ inventory_hostname }}"

- name: Create local temp directory
  file:
    path: "{{ temp_dir }}"
    state: directory
  delegate_to: localhost

- block:

  - name: Generate ISO file
    create_zfb_profile:
      nsgv_path: "{{ temp_dir }}"
      fact_name: nsgv_already_configured
      vsd_license_file: "{{ vsd_license_file }}"
      vsd_auth: "{{ vsd_auth }}"
      zfb_constants: "{{ zfb_constants }}"
      zfb_proxy_user: "{{ zfb_proxy_user }}"
      zfb_nsg: "{{ zfb_nsg }}"
      zfb_ports: "{{ zfb_ports }}"
      zfb_nsg_infra: "{{ zfb_nsg_infra }}"
      zfb_vsc_infra: "{{ zfb_vsc_infra }}"
    delegate_to: localhost

  - name: Ensure NSGV has the correct configuration
    assert:
      that: "not node_running or nsgv_already_configured"
      msg: "NSGV is already running, but there was no corresponding configuration for it."

  - name: Copy the ISO image to images directory
    copy: src="{{ temp_dir }}/user_image.iso"
          dest={{ images_path }}/{{ vmname }}
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
    become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"

  when: bootstrap_method is match('zfb_metro')

- name: Create heat template
  template:
    src: openstack.j2
    dest: "{{ temp_dir }}/openstack.yml"
  delegate_to: localhost

- name: Set heat template location
  set_fact:
    nsgv_heat_template: "{{ temp_dir }}/openstack.yml"

- name: Creating NSGV stack
  register: create_stack
  os_stack:
    name: "{{ stack_name | default(inventory_hostname) }}"
    template: "{{ nsgv_heat_template }}"
    auth:
      "{{ openstack_auth }}"
    parameters:
      availability_zone: "{{ openstack_availability_zone }}"
      vm_name: "{{ vm_name  }}"
      nsgv_image: "{{ openstack_image }}"
      nsgv_flavor: "{{ openstack_flavor }}"
      nsgv_uplink1_network: "{{ openstack_uplink1_network }}"
      nsgv_uplink1_subnet: "{{ openstack_uplink1_subnet | default('NONE') }}"
      #nsgv_uplink2_network: "{{ openstack_uplink2_network | default('NONE') }}"
      nsgv_access_network: "{{ openstack_access_network }}"
      uplink1_ip: "{{ nsgv_ip }}"
  delegate_to: localhost

- debug: var=create_stack['stack']['outputs'][0]['output_value']

- name: Remove local temp folder
  file:
    path: "{{ temp_dir }}"
    state: absent
  delegate_to: localhost
