---
- block:

  - name: Pull facts on VRS target {{ inventory_hostname }}
    action: setup

  - name: Set openvswitch file on RedHat OS family distros
    set_fact:
      openvswitch_file: "/etc/default/openvswitch"
    when: ansible_os_family == "RedHat"

  - name: Set openvswitch file on Debian OS family distros
    set_fact:
      openvswitch_file: "/etc/default/openvswitch-switch"
    when: ansible_os_family == "Debian"

  - name: Check whether active controller address is already configured
    command: grep -Fq "ACTIVE_CONTROLLER={{ active_controller_addr }}" {{ openvswitch_file }}
    register: active_address_result
    ignore_errors: True

  - name: Check whether standby controller address is already configured
    command: grep -Fq "STANDBY_CONTROLLER={{ standby_controller_addr }}" {{ openvswitch_file }}
    register: standby_address_result
    ignore_errors: True

  - name: Get controller connection info
    shell: "ovs-vsctl show | grep -Pzl '(?s)Controller \"ctrl(1|2)\"\\n *target: \"(tcp|ssl):({{ item }}):6633\"\\n *role: (master|slave)\\n *is_connected: true'"
    with_items:
      - "{{ active_controller_addr }}"
      - "{{ standby_controller_addr }}"
    register: command_result
    ignore_errors: yes
    changed_when: false

  - name: Set if skipping VRS deploy
    set_fact: skip_vrs_deploy="{{ command_result is defined and command_result.results[0].rc == 0 and
                                  active_address_result is defined and active_address_result.rc == 0 and
                                  standby_address_result is defined and standby_address_result.rc == 0 }}"

  - name: Display if skipping VRS deploy
    debug:
      msg:
        - "*************************************************"
        - "Skipping VRS deploy because it is already running"
        - "*************************************************"
    when: skip_vrs_deploy

  remote_user: "{{ target_server_username }}"

- block:

  - name: Create temporary directory
    file: path={{ temp_dir }}/{{ inventory_hostname }} state=directory

  - name: Copy VRS packages to temporary directory
    copy: src={{ vrs_package_path }}/{{ item }} dest={{ temp_dir }}/{{ inventory_hostname }}/{{ item }}
    with_items: "{{ vrs_package_file_name_list }}"

  - name: Copy Selinux packages to temporary directory for RHEL7 and Centos7
    copy: src={{ selinux_package_path }}/{{ item }} dest={{ temp_dir }}/{{ inventory_hostname }}/{{ item }}
    with_items: "{{ selinux_package_file_name_list }}"
    when: selinux_package_path is defined and selinux_package_path != 'None'

  - name: Install Nuage OpenVSwitch packages on Debian OS family distros
    apt: deb={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
    with_items:
     - "{{ vrs_package_file_name_list }}"
    when: ansible_os_family == "Debian"

  - name: Install Nuage OpenVSwitch packages on RedHat OS family distros
    yum: name={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
    with_items:
     - "{{ vrs_package_file_name_list }}"
    when: ansible_os_family == "RedHat"

  - name: Install Selinux package for RHEL7 and Centos7
    yum: name={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
    with_items:
     - "{{ selinux_package_file_name_list }}"
    when:
      - ansible_os_family == "RedHat"
      - ansible_distribution_major_version == '7'
      - selinux_package_path is defined and selinux_package_path != 'None'

  - block:
    - name: Copy DKMS packages to temporary directory for RHEL and Ubuntu14
      copy: src={{ dkms_package_path }}/{{ item }} dest={{ temp_dir }}/{{ inventory_hostname }}/{{ item }}
      with_items: "{{ dkms_package_file_name_list }}"
  
    - name: Install Nuage DKMS packages on Debian OS family distros
      apt: deb={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
      with_items:
       - "{{ dkms_package_file_name_list }}"
      when: 
        - ansible_os_family == "Debian"
        - vrs_arch == "u14.04"

    - name: Install Nuage DKMS packages on RedHat OS family distros
      yum: name={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
      with_items:
       - "{{ dkms_package_file_name_list }}"
      when: ansible_os_family == "RedHat"
    when: dkms_install

  - name: Remove temporary directory
    file: path={{ temp_dir }}/{{ inventory_hostname }} state=absent

  - name: Update active controller in {{ openvswitch_file }} file
    lineinfile:
      dest: "{{ openvswitch_file }}"
      regexp: "^ACTIVE_CONTROLLER="
      line: "ACTIVE_CONTROLLER={{ active_controller_addr }}"

  - name: Update standby controller in {{ openvswitch_file }} file
    lineinfile:
      dest: "{{ openvswitch_file }}"
      regexp: "^STANDBY_CONTROLLER="
      line: "STANDBY_CONTROLLER={{ standby_controller_addr }}"

  - name: Restart OpenVSwitch Service on RedHat OS family distros
    service: name=openvswitch state=restarted
    when: ansible_os_family == "RedHat"

  - name: Restart OpenVSwitch Service on Debian OS family distros
    service: name=nuage-openvswitch-switch state=restarted
    when: ansible_os_family == "Debian"

  - pause: seconds=20

  remote_user: "{{ target_server_username }}"
  when: not skip_vrs_deploy
