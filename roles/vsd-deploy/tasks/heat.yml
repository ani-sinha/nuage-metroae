---
- name: Get VSD details from OpenStack
  os_server_facts:
    auth:
      "{{ os_auth }}"
    server: "{{ inventory_hostname }}"
  register: vsd_ip
  delegate_to: 127.0.0.1

- name: Set vsd mgmt ip
  set_fact:
    vsd_mgmt_ip: "{{ vsd_ip['ansible_facts']['openstack_servers'][0]['networks'][vsd_network][0] }}"

- name: Clean known_hosts of VSD's
  command: ssh-keygen -R "{{ vsd_mgmt_ip }}" -f /root/.ssh/known_hosts
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ target_server_username }}"

- block:
  - name: Get infra server details from OS server facts
    os_server_facts:
      auth:
        "{{ os_auth }}"
      server: "{{ infra_server_name }}"
    register: infra_server
    delegate_to: 127.0.0.1

  - name: Set DNS/NTP server ip
    set_fact:
      infra_ip: "{{ infra_server['ansible_facts']['openstack_servers'][0]['private_v4'] }}"

  - name: Update DNS entries
    lineinfile:
      line: "{{ vsd_mgmt_ip }}  {{ inventory_hostname }}"
      dest: "/etc/hosts"
    delegate_to: "{{ infra_ip }}"
    remote_user: "{{ target_server_username }}"

  - name: Update XMPP DNS entries for VSD cluster deployments 
    lineinfile:
      line: "{{ vsd_mgmt_ip }}  xmpp.{{ dns_domain }}"
      dest: "/etc/hosts"
    delegate_to: "{{ infra_ip }}"
    remote_user: "{{ target_server_username }}"
    when: vsd_standalone == False

  - name: Restart DNS service
    shell: service dnsmasq restart
    delegate_to: "{{ infra_ip }}"
    remote_user: "{{ target_server_username }}"
  when: infra_server_name is defined

- name: Update /etc/hosts file on ansible host
  lineinfile:
    dest: /etc/hosts
    line: "{{ vsd_mgmt_ip }}    {{ inventory_hostname }}"
  delegate_to: 127.0.0.1

- name: Wait for VSD-HA ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ vsd_mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

- name: Inject ssh key of ansible_deployment_host to VSD if cloud-init did not work
  expect:
    command: "ssh-copy-id -i root@{{ vsd_mgmt_ip }}"
    responses:
      (?i)yes: "yes"
      (?i)password: "Alcateldc"
  remote_user: "{{ target_server_username }}"
  delegate_to: localhost  
    
- name: Pause for ssh port to be active on {{ inventory_hostname }}
  pause:
    seconds: 5

- name: Query {{ target_server }} facts
  action: setup
  remote_user: "{{ target_server_username }}"

- name: Update hostname
  template: src=network.j2 backup=no dest=/etc/sysconfig/network

- name: Add a DNS server to eth0
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-eth0
    line: "DNS1={{ infra_ip | default(dns_server_list[0]) }}"
  when: infra_server_name is defined

- name: Add nameserver
  command: echo "{{ infra_ip }}" >> /etc/resolv.conf
  remote_user: "{{ target_server_username }}"
  when: infra_server_name is defined

- name: Restart networking on {{ inventory_hostname }}
  command: /etc/init.d/network restart
  remote_user: "{{ target_server_username }}"

- name: Resolve fqdn
  command: hostname "{{ inventory_hostname }}"
  remote_user: "{{ target_server_username }}"

- name: Update /etc/hosts file on {{ inventory_hostname }}
  lineinfile: 
    dest: /etc/hosts
    line: "{{ vsd_mgmt_ip }}  {{ inventory_hostname }}"
  remote_user: "{{ target_server_username }}"

- name: Copy files to pin OS version on {{ inventory_hostname }} when CentOS 6.6
  copy:
    src: ./roles/vsd-deploy/files/
    dest: /etc/yum.repos.d/
  remote_user: "{{ target_server_username }}"
  when:
    - yum_pin
    - "{{ ansible_distribution_version }} == 6.6"

- name: Configure yum proxy on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/yum.conf
    line: "proxy={{ yum_proxy }}"
  remote_user: "{{ target_server_username }}"
  when: yum_proxy != 'NONE'

- name: Execute a yum update on {{ inventory_hostname }}
  yum:
    name: '*'
    state: latest
  remote_user: "{{ target_server_username }}"
  when: yum_update

- block:
  - name: Generate SSH keys 
    shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
    args:
      creates: /root/.ssh/id_rsa
    remote_user: "{{ target_server_username }}"

  - name: Get generated SSH keys 
    shell: cat ~/.ssh/id_rsa.pub
    register: ssh_key
    remote_user: "{{ target_server_username }}"

  - name: Add SSH keys to authorized_keys file
    shell: "echo {{ssh_key.stdout}} >> /root/.ssh/authorized_keys"
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vsds'] }}"
    remote_user: "{{ target_server_username }}"
  when: vsd_standalone == False

- name: Delete the localtime file on {{ inventory_hostname }}
  file:
    path: /etc/localtime
    state: absent
  remote_user: "{{ target_server_username }}"

- name: Create the localtime symlink on {{ inventory_hostname }}
  file:
    src: /usr/share/zoneinfo/{{ timezone }}
    dest: /etc/localtime
    state: link
  remote_user: "{{ target_server_username }}"

- name: Remove old NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    regexp: "^server"
    state: absent
  remote_user: "{{ target_server_username }}"

- name: Configure NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    line: "server {{ item }} iburst"
  with_items: "{{ ntp_server_list }}"
  remote_user: "{{ target_server_username }}"

- name: Stop the ntpd service if running
  command: service ntpd stop
  remote_user: "{{ target_server_username }}"

- name: Manually sync time with ntp server
  command: ntpdate -u "{{ntp_server_list[0]}}"
  remote_user: "{{ target_server_username }}"

- name: Start ntpd on {{ inventory_hostname }}
  command: service ntpd start
  remote_user: "{{ target_server_username }}"

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 4
  delay: 5
  ignore_errors: yes
  remote_user: "{{ target_server_username }}"

- block:
  - name: restart ntp if it hasn't synced yet
    command: service ntpd restart
    remote_user: "{{ target_server_username }}"
  - name: check ntp sync state
    shell: ntpstat | awk 'NR==1{print $1}'
    register: retry_sync_status
    until: retry_sync_status.stdout == "synchronised"
    retries: 4
    delay: 5
    remote_user: "{{ target_server_username }}"
  when: sync_status.stdout != "synchronized"

- name: Install VSD software on standalone node
  command: /opt/vsd/vsd-install.sh -t s -y
  when: vsd_standalone == True
  remote_user: "{{ target_server_username }}"

- block:
  - name: Install VSD software on HA node1 {{groups['vsds'][0]}}
    command: "{{ vsd_ha_node1 }}"
    when: inventory_hostname == groups['vsds'][0]
    remote_user: "{{ target_server_username }}"

  - name: Install VSD software on HA node2 {{groups['vsds'][1]}}
    command: "{{ vsd_ha_node2 }}"
    when: inventory_hostname == groups['vsds'][1]
    remote_user: "{{ target_server_username }}"

  - name: Install VSD software on HA node3 {{groups['vsds'][2]}}
    command: "{{ vsd_ha_node3 }}"
    when: inventory_hostname == groups['vsds'][2]
    remote_user: "{{ target_server_username }}"
  when: vsd_standalone == False
