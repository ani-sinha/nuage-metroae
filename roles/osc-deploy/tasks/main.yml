---
- name: Get OSC IP from {{ inventory_hostname }}
  os_server_facts:
    auth:
      "{{ os_auth }}"
    server: "{{ inventory_hostname }}"
  register: osc_server
  delegate_to: 127.0.0.1

- name: Set OSC ip
  set_fact:
    osc_mgmt_ip: "{{ osc_server['ansible_facts']['openstack_servers'][0]['networks'][osc_network][0] }}"

- block:
  - name: Get infra server details from OS server facts
    os_server_facts:
      auth:
        "{{ os_auth }}"
      server: "{{ infra_server_name }}"
    register: infra_server
    delegate_to: 127.0.0.1

  - name: Set DNS/NTP server ip
    set_fact:
      infra_ip: "{{ infra_server['ansible_facts']['openstack_servers'][0]['private_v4'] }}"

  - name: Update DNS entries
    lineinfile:
      line: "{{ osc_mgmt_ip }}  {{ inventory_hostname }}"
      dest: "/etc/hosts"
    delegate_to: "{{ infra_ip }}"
    remote_user: "{{ target_server_username }}"

  - name: Restart DNS service
    shell: service dnsmasq restart
    delegate_to: "{{ infra_ip }}"
    remote_user: "{{ target_server_username }}"
  when: infra_server_name is defined

- name: Update /etc/hosts file on ansible host
  lineinfile:
    dest: /etc/hosts
    line: "{{ osc_mgmt_ip }}    {{ inventory_hostname }}"
  delegate_to: 127.0.0.1
  remote_user: "{{ target_server_username }}"

- name: Clean known_hosts of OSC's
  command: ssh-keygen -R "{{ osc_mgmt_ip }}" -f /root/.ssh/known_hosts
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ target_server_username }}"

- name: Wait for OSC ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ osc_mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

- name: Pause for ssh port to be active on {{ inventory_hostname }}
  pause:
    seconds: 10

- name: Query {{ target_server }} facts
  action: setup
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ osc_mgmt_ip }}"

- name: Update /etc/hosts file on osc
  lineinfile:
    dest: /etc/hosts
    line: "{{ osc_mgmt_ip }}    {{ inventory_hostname }}"
  remote_user: "{{ target_server_username }}"

- name: Update hostname
  template: src=network.j2 backup=no dest=/etc/sysconfig/network

- name: Add nameserver
  command: echo "{{ infra_ip }}" >> /etc/resolv.conf
  remote_user: "{{ target_server_username }}"
  when: infra_server_name is defined


- name: Disable firewall
  service: 
    name: firewalld
    enabled: no
  remote_user: "{{ target_server_username }}"
  when:
    - ansible_os_family == 'RedHat'
  ignore_errors: yes

- name: Stop firewall
  service:
    name: firewalld
    state: stopped 
  remote_user: "{{ target_server_username }}"
  when:
    - ansible_os_family == 'RedHat'
  ignore_errors: yes

- name: Disable NetworkManager
  service:
    name: NetworkManager
    enabled: no
  remote_user: "{{ target_server_username }}"
  ignore_errors: yes

- name: Stop NetworkManager
  service:
    name: NetworkManager
    state: stopped
  remote_user: "{{ target_server_username }}"
  ignore_errors: yes

- name: Copy eth0 config to osc 
  template: src=ifcfg-eth0.j2 backup=no dest=/etc/sysconfig/network-scripts/ifcfg-eth0
  remote_user: "{{ target_server_username }}"

- name: Delete eht1 config on osc
  file:
    path: "/etc/sysconfig/network-scripts/ifcfg-eth1"
    state: absent
  remote_user: "{{ target_server_username }}"

- name: Enable network
  service:
    name: network
    enabled: yes
  remote_user: "{{ target_server_username }}"
 
- name: Start netowrk
  service:
    name: network
    state: started
  remote_user: "{{ target_server_username }}"
  ignore_errors: yes

- name: Pause
  pause:  
    seconds: 5

- name: Install NTP if not present
  yum:
    name: ntp
    state: latest
  remote_user: "{{ target_server_username }}"

- name: Delete the localtime file on {{ inventory_hostname }}
  file:
    path: /etc/localtime
    state: absent
  remote_user: "{{ target_server_username }}"

- name: Create the localtime symlink on {{ inventory_hostname }}
  file:
    src: /usr/share/zoneinfo/US/Pacific
    dest: /etc/localtime
    state: link
  remote_user: "{{ target_server_username }}"

- name: Remove old NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    regexp: "^server"
    state: absent
  remote_user: "{{ target_server_username }}"

- name: Configure NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    line: "server {{ item }} iburst"
  with_items: "{{ ntp_server_list }}"
  remote_user: "{{ target_server_username }}"

- name: Stop the ntpd service if running
  command: service ntpd stop
  remote_user: "{{ target_server_username }}"

- name: Manually sync time with ntp server
  command: ntpdate -u "{{ntp_server_list[0]}}"
  remote_user: "{{ target_server_username }}"

- name: Start ntpd on {{ inventory_hostname }}
  command: service ntpd start
  remote_user: "{{ target_server_username }}"

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 4
  delay: 5
  ignore_errors: yes
  remote_user: "{{ target_server_username }}"

- block:
  - name: restart ntp if it hasn't synced yet
    command: service ntpd restart
    remote_user: "{{ target_server_username }}"
  - name: check ntp sync state
    shell: ntpstat | awk 'NR==1{print $1}'
    register: retry_sync_status
    until: retry_sync_status.stdout == "synchronised"
    retries: 4
    delay: 5
    remote_user: "{{ target_server_username }}"
  when: sync_status.stdout != "synchronized"

- name: Load correspoing software repos for OpenStack Centos7
  yum:
    name: "{{ os_centos }}{{ nuage_os_release }}"
    state: present
  remote_user: "{{ target_server_username }}"
  when: 
    - ansible_distribution == 'CentOS'
    - ansible_distribution_major_version == '7'

- name: Copy Redhat repo file to {{ inventory_hostname }} for RedHat images
  template:
    src={{ playbook_dir }}/roles/osc-deploy/templates/redhat.repo.j2
    dest=/etc/yum.repos.d/rhel.repo
  remote_user: "{{ target_server_username }}"
  when:
    - ansible_distribution == 'RedHat'

- name: Execute a yum update on {{ inventory_hostname }}
  yum:
    name: '*'
    state: latest
  remote_user: "{{ target_server_username }}"

- name: Install packstack packages
  yum:
    name: openstack-packstack
    state: present
  remote_user: "{{ target_server_username }}"

- name: Install OpenStack packstack 
  command: "{{ install_packstack }}"
  remote_user: "{{ target_server_username }}"

- name: Copy Mysql compute query file to controller
  copy:
    src={{ playbook_dir }}/roles/osc-deploy/files/del_compute.txt
    dest=/root/
  remote_user: "{{ target_server_username }}"

- name: Delete compute node from controller
  shell: "mysql -u root < /root/del_compute.txt"
  remote_user: "{{ target_server_username }}"

- name: Disable compute service on controller
  service:
    name: openstack-nova-compute
    enabled: no
  remote_user: "{{ target_server_username }}"

- name: Stop the compute service on controller
  service: 
    name: openstack-nova-compute
    state: stopped
  remote_user: "{{ target_server_username }}"

- name: Copy Mysql netowrk query file to controller
  copy:
    src={{ playbook_dir }}/roles/osc-deploy/files/del_network.txt
    dest=/root/
  remote_user: "{{ target_server_username }}"
 
- name: Delete network,subnets,routers,ports from Neutron
  shell: "mysql -u root < /root/del_network.txt"
  remote_user: "{{ target_server_username }}"

- name: Add * to Server Alias list
  lineinfile:
    dest: /etc/httpd/conf.d/15-horizon_vhost.conf 
    insertafter: '## Server aliases'  
    line: '  ServerAlias *'
  remote_user: "{{ target_server_username }}"

- name: Restart httpd 
  service: 
    name: httpd
    state: restarted
  remote_user: "{{ target_server_username }}"
