- block:
  - block:
    - name: Add and set custom user password
      user: 
        name: "{{ vsd_custom_username }}"
  
    - name: Set the password for the custom user
      shell: echo {{ vsd_custom_password }} | passwd --stdin {{ vsd_custom_username }}
  
    - name: Update sshd config file
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '#PermitRootLogin yes'
        line: 'PermitRootLogin no'
        
    - name: Restart ssh server
      shell: /bin/systemctl restart  sshd.service
        
    - name: Set vsd user to custom user 
      set_fact:
        vsd_username: "{{ vsd_custom_username }}"
    when: 
      - vsd_custom_username is defined
      - vsd_custom_password is defined
  
  - name: Set custom password for MySQL root password
    shell: mysqladmin -u root password "{{ vsd_mysql_password }}"
    when: vsd_mysql_password is defined
  
  - block:
    - name: Register failed login attempts and lockout time from file when not defined
      slurp:
        src: /etc/pam.d/system-auth-local
      register: system_auth
  
    - name: Register failed loging attemps
      set_fact:
          failed_login_attempts: "{{ system_auth['content'] | regex_findall('\\bdeny\\b\\=(.+)') }}"
      when: failed_login_attempts is undefined
      
    - name: Register failed loging timeout
      set_fact:
          failed_login_lockout_time: "{{ system_auth['content'] | regex_findall('\\bunlock_time\\b\\=(.+)') }}"
      when: failed_login_lockout_time is undefined
  
    - name: Lockout Time And Failed Login Attempts required
      lineinfile:
        path: "{{ item }}"
        regexp: 'auth        required      pam_faillock.so preauth silent audit deny=3 unlock_time=600'
        line: 'auth        required      pam_faillock.so preauth silent audit deny={{ failed_login_attempts }} unlock_time={{ failed_login_lockout_time }}'
      with_items:
        - "/etc/pam.d/password-auth"
        - "/etc/pam.d/system-auth"
  
    - name: Lockout Time And Failed Login Attempts default die
      lineinfile:
        path: "{{ item }}"
        regexp: 'auth        [default=die] pam_faillock.so authfail audit deny=3 unlock_time=600'
        line: 'auth        [default=die] pam_faillock.so authfail audit deny={{ failed_login_attempts }} unlock_time={{ failed_login_lockout_time }}'
      with_items:
        - "/etc/pam.d/password-auth"
        - "/etc/pam.d/system-auth"
  
  - block: 
    - name: Enable TLSv1.2 
      lineinfile:
        path: /opt/vsd/jboss/standalone/configuration/standalone-full-ha.xml
        regexp: 'protocol="TLSv1".*verify-client="false".*'
        line: '<ssl protocol="TLSv1.2" key-alias="vsd1.example.com" password="Alcateldc" certificate-key-file="${jboss.home.dir}/standalone/configuration/vsd.keystore" verify-client="false" session-cache-size="200" cipher-suite="TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256" />'
    
    - name: Enable TLSv1.2 
      lineinfile:
        path: /opt/vsd/jboss/standalone/configuration/standalone-full-ha.xml
        regexp: 'protocol="TLSv1".*verify-client="true".*'
        line: '<ssl protocol="TLSv1.2" key-alias="vsd1.example.com" password="Alcateldc" certificate-key-file="${jboss.home.dir}/standalone/configuration/vsd.keystore" verify-client="true" ca-certificate-file="${jboss.home.dir}/standalone/configuration/vsd.truststore" ca-certificate-password="Alcateldc" cipher-suite="TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256" />'
    
    - name: Stop JBoss service
      shell: monit stop jboss
  
    - name: Start JBoss service
      shell: monit start jboss
  
    - name: Wait JBoss to start
      monit_waitfor_service:
        name: jboss
        timeout_seconds: 600
        test_interval_seconds: 30
    
    when: tls_version is defined and tls_version == "1.2"
  
  - name: Advanced API access Logging
    lineinfile:
      path: /opt/vsd/jboss/standalone/configuration/standalone-full-ha.xml
      regexp: '<access-log prefix="access.log" pattern="%a %t %H %p %r %s %D">'
      line: '<access-log prefix="access.log" pattern="%a %t %H %p %r %s %D %{CUSTOM}i %{X-Nuage-Request-ID}o">'
    when: adavanced_api_access_logging is defined

  remote_user: "{{ vsd_username }}"
  