---
- name: Pull facts on hypervisor
  setup: gather_subset=!all
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- debug: var=inventory_hostname verbosity=1

- name: Get Portal VM qcow2 information
  stat:
    path: "{{ portal_vm_qcow2_path }}"
  register: portal_vm_qcow2_path_stat
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- debug: var=portal_vm_qcow2_path_stat verbosity=1

- name: Check Portal VM qcow2 existance
  fail:
    msg: 'Can not find Portal VM source file on hypervisor. Please check variables and run again'
  when: not portal_vm_qcow2_path_stat.stat.exists

- name: Get list of VMs on hypervisor
  virt: command=list_vms
  register: virsh_list
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Check if Portal VM has already been started
  fail: msg="The VM is already defined on this hypervisor."
  when: vmname in virsh_list.list_vms

- name: Check target_server mgmt bridge configuration
  stat:
    path: "/etc/sysconfig/network-scripts/ifcfg-{{ mgmt_bridge }}"
  register: mgmt_bridge_on_hv
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- debug: var=mgmt_bridge_on_hv.stat.exists verbosity=1

- block:
    - name: Upload mgmt bridge configuration
      blockinfile:
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ mgmt_bridge }}"
        create: yes
        block: |
          TYPE=Bridge
          BOOTPROTO=none
          DEVICE={{ mgmt_bridge }}
          ONBOOT=yes
          STP=NO
      delegate_to: "{{ target_server }}"
      remote_user: "{{ target_server_username }}"

    - name: Up mgmt bridge
      command: "ifup {{ mgmt_bridge }}"
      delegate_to: "{{ target_server }}"
      remote_user: "{{ target_server_username }}"

  when: not mgmt_bridge_on_hv.stat.exists

- block:
    - name: Get mgmt bridge status
      command: "ip l show dev {{ mgmt_bridge }}"
      delegate_to: "{{ target_server }}"
      remote_user: "{{ target_server_username }}"
      register: mgmt_bridge_on_hv_iplinkshow

    - name: Check mgmt bridge state
      set_fact:
        mgmt_bridge_up: "{{',UP,' in mgmt_bridge_on_hv_iplinkshow.stdout}}"

    - debug: var=mgmt_bridge_on_hv_iplinkshow verbosity=1
    - debug: var=mgmt_bridge_up verbosity=1

    - name: Up mgmt bridge
      command: "ifup {{ mgmt_bridge }}"
      delegate_to: "{{ target_server }}"
      remote_user: "{{ target_server_username }}"
      when: not mgmt_bridge_up

  when: mgmt_bridge_on_hv.stat.exists

- name: Create libvirt image directory
  file: path={{ images_path }}/{{ vmname }}
        state=directory
        owner={{ libvirt.user }}
        group={{ libvirt.group }}
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy Portal VM qcow2 to target_server
  copy:
    src: "{{ portal_vm_qcow2_path }}"
    dest: "{{ images_path }}/{{ vmname }}/{{ vmname }}.qcow2"
    remote_src: yes
    owner: "{{ libvirt.user }}"
    group: "{{ libvirt.group }}"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Template Portal VM eth0 interface configuration file
  template:
    src: ifcfg-eth0.j2
    dest: "{{ images_path }}/{{ vmname }}/ifcfg-eth0"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Template Portal VM /etc/sysconfig/network configuration file
  template:
    src: network.j2
    dest: "{{ images_path }}/{{ vmname }}/network"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Template Portal VM /etc/hostname configuration file
  template:
    src: hostname.j2
    dest: "{{ images_path }}/{{ vmname }}/hostname"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Get list of partitions
  shell: "guestfish -r -a {{ images_path }}/{{ vmname }}/{{ vmname }}.qcow2 run : list-filesystems | grep -Ev '(unknown|swap)'"
  remote_user: "{{ target_server_username }}"
  register: partitions_list
  delegate_to: "{{ target_server }}"

- name: Check partition content
  shell: "guestfish -r -a {{ images_path }}/{{ vmname }}/{{ vmname }}.qcow2 run : mount {{ item.split(':')[0] }} / : ls /"
  remote_user: "{{ target_server_username }}"
  register: partitions
  with_items: "{{ partitions_list.stdout_lines }}"
  delegate_to: "{{ target_server }}"

- name: Find root partition
  set_fact:
    mount_point: "{{ item.item.split(':')[0]}}"
  with_items: "{{ partitions.results }}"
  when: '"root" in item.stdout'
  delegate_to: "{{ target_server }}"

- name: Check if directory '/root/.ssh/' exists
  shell: >
        guestfish --rw
        -a {{ images_path }}/{{ vmname }}/{{ vmname }}.qcow2
        -m {{ mount_point }}
        exists /root/.ssh/
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"
  register: ssh_directory

- name: Create directory '/root/.ssh/'
  shell: >
        guestfish --rw
        -a {{ images_path }}/{{ vmname }}/{{ vmname }}.qcow2
        -m {{ mount_point }}
        mkdir /root/.ssh/
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"
  when: ssh_directory.stdout=='false'

- name: Copy authorized_keys file to image directory
  template: src=authorized_keys dest={{ images_path }}/{{ vmname }}/authorized_keys mode="644"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy guestfish shell script
  template: >
        src=upload-files-to-image.sh.j2
        dest={{ images_path }}/{{ vmname }}/upload-files-to-image.sh mode="u=rx"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Execute guestfish shell script
  shell: "{{ images_path }}/{{ vmname }}/upload-files-to-image.sh"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy virt-install shell script
  template: src=virt-install.sh.j2 dest={{ images_path }}/{{ vmname }}/vm-install.sh mode="744"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Execute virt-install
  shell: "{{ images_path }}/{{ vmname }}/vm-install.sh"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Wait for Portal VM SSH server to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
