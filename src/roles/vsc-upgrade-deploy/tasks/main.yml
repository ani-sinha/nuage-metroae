- name: Clean known_hosts of VSC's (ignoring errors)
  known_hosts:
    name: "{{ mgmt_ip }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- name: Wait for VSC ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh-port
  vars:
    ssh_host: "{{ vsc_creds.host }}"
    ssh_password: "{{ vsc_creds.password }}"
    ssh_user: "{{ vsc_creds.username }}"
    check_login: True

- name: Get output of 'show bof'
  sros_command:
    commands:
      - show bof
    provider: "{{ vsc_creds }}"
  delegate_to: localhost
  register: bof_config

- name: Print 'show bof' when verbosity >= 1
  debug: var=bof_config.stdout[0] verbosity=1

- name: Create local variable with bof config in json
  set_fact:
    bof_json: "{{ bof_config.stdout[0]|show_bof_to_json }}"

- name: Print bof config in json  when verbosity >= 1
  debug: var=bof_json verbosity=1

- name: Get current file version of image on VSC
  sros_command:
    commands:
      - file version "{{ bof_json['primary_image'] }}"
    provider: "{{ vsc_creds }}"
  delegate_to: localhost
  register: image

- name: Print image version when verbosity >= 1
  debug: var=image.stdout[0] verbosity=1

- name: Create local variable with image version in json
  set_fact:
    version_json: "{{ image.stdout[0]|image_version_to_json }}"

- name: Print image version in json  when verbosity >= 1
  debug: var=version_json verbosity=1

- name: Register uptime before reboot
  sros_command:
    commands:
      - show uptime
    provider: "{{ vsc_creds }}"
  delegate_to: localhost
  register: uptime_before_reboot
  when: target_server_type is match('kvm') or target_server_type is match('vcenter') or target_server_type is match('openstack') or target_server_type is match("none")

- name: Copy new VSC image to VSC nodes
  expect:
    command: "{{ vsc_image_copy }}"
    responses:
      (?i)yes: "yes"
      (?i)password: "{{ vsc_password|default(vsc_default_password) }}"
    timeout: "{{ vsc_scp_timeout_seconds }}"

- block:

  - name: Reboot VSC VM (ignoring errors)
    sros_command:
      commands:
        - admin reboot now
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
    ignore_errors: true

  - name: Wait for VSC ssh to be ready
    include_role:
      name: common
      tasks_from: wait-for-ssh-port
    vars:
      ssh_host: "{{ vsc_creds.host }}"
      ssh_timeout_seconds: 600
      ssh_password: "{{ vsc_creds.password }}"
      ssh_user: "{{ vsc_creds.username }}"
      check_login: True

  - name: Register uptime after reboot
    sros_command:
      commands:
        - show uptime
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
    register: uptime_after_reboot

  - name: Verify reboot happened successfully
    assert:
      that: "uptime_after_reboot < uptime_before_reboot"
      fail_msg: "System uptime after reboot step suggests there were issues during reboot. Check log for errors."

  - name: Renew VSC Certs
    include_role:
      name: common
      tasks_from: vsd-renew-transfer-certificates
    vars:
      certificate_password: "{{ vsc_default_password }}"
      certificate_username: "{{ xmpp.username }}"
      commonName: "{{ xmpp.username }}"
      certificate_type: server
      scp_user: "{{ vsc_default_username }}"
      scp_location: /
      additional_parameters:  -d {{ inventory_hostname }}

  - name: set autogenerated tls profiles vars
    set_fact:
      own_key: "{{ xmpp.username }}-Key.pem"
      own_certificate: "{{ xmpp.username }}.pem"
      own_ca_certificate: "{{ xmpp.username }}-CA.pem"

  - name: Configure the security profile on the VSC
    sros_config:
      lines:
          - configure system security tls-profile vsc-tls-profile own-key cf1:\{{ own_key }}
          - configure system security tls-profile vsc-tls-profile own-certificate cf1:\{{ own_certificate }}
          - configure system security tls-profile vsc-tls-profile ca-certificate cf1:\{{ own_ca_certificate }}
          - configure system security tls-profile vsc-tls-profile no shutdown
          - admin save
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
    when: xmpp_tls or openflow_tls

  - block:

    - name: Configure XMPP to use the security profile
      sros_config:
        lines:
            - configure vswitch-controller xmpp tls-profile vsc-tls-profile
            - configure system time ntp ntp-server
            - admin save
        provider: "{{ vsc_creds }}"
      delegate_to: localhost

    - block:
      - name: Configure XMPP server to the custom ejabberd id and password
        sros_config:
          lines:
            - configure vswitch-controller xmpp-server {{ ejabberd_id }}@{{ xmpp_domain }}
          provider: "{{ vsc_creds }}"
        delegate_to: localhost

      - name: Get vsd node(s) information
        import_role:
          name: common
          tasks_from: vsd-node-info.yml
        vars:
          vsd_hostname: "{{ vsd_fqdn }}"
        run_once: true

      when:
        - private_key_path is defined
        - certificate_path is defined
        - ca_certificate_path is defined
        - ejabberd_id is defined

    - name: check xmpp connectivity between VSC and VSD after enabling TLS
      sros_command:
        commands:
          - show vswitch-controller xmpp-server | match Functional
        provider: "{{ vsc_creds }}"
      register: xmpp_status
      until: xmpp_status.stdout[0].find('Functional') != -1
      retries: 30
      delay: 10
      delegate_to: localhost

    - name: Print output of 'show vswitch-controller xmpp-server' when verbosity >= 1
      debug: var=xmpp_status verbosity=1

    when: xmpp_tls

  - name: Configure OpenFlow to use the security profile
    sros_config:
      lines:
          - configure vswitch-controller open-flow tls-profile vsc-tls-profile
          - configure system time ntp ntp-server
          - admin save
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
    when: openflow_tls

  when: target_server_type is match('kvm') or target_server_type is match('vcenter') or target_server_type is match('vcenter') or target_server_type is match("none")
