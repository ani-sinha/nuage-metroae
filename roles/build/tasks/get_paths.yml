---
################
# VRS
################

# TODO: Optimize the looping through vrs arch types in case of large deployments
- block:

  - name: Create facts to be used with vrs deploy if vrs is Debian 14.04 based
    set_fact: vrs_u14_04="True"
    when: item.vrs_os_type == "u14.04"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Debian 16.04 based
    set_fact: vrs_u16_04="True"
    when: item.vrs_os_type == "u16.04"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Redhat el6 based
    set_fact: vrs_el6="True"
    when: item.vrs_os_type == "el6"
    with_items: "{{ myvrss }}"

  - name: Create facts to be used with vrs deploy if vrs is Redhat el7 based
    set_fact: vrs_el7="True"
    when: item.vrs_os_type == "el7"
    with_items: "{{ myvrss }}"

  - name: initialize vrs_target_os_is_supported to be evaluated for vrs supported target os types
    set_fact: vrs_target_os_is_supported="True"

  - name: Set facts if vrs os type is set to a supported version
    set_fact: vrs_target_os_is_supported="False"
    when: item.vrs_os_type not in supported_vrs_target_os_types
    with_items: "{{ myvrss }}"

  - assert:
      that:
        - "vrs_target_os_is_supported == True"
      msg: "unsupported OS type/typo in build.yml. Supported OS Types are el6,el7,u14.04,u16.04"

  - debug: msg="vrs_u14_04 is set to "{{ vrs_u14_04 }}" " verbosity=1
    when: vrs_u14_04 is defined

  - debug: msg="vrs_u16_04 is set to "{{ vrs_u16_04 }}" " verbosity=1
    when: vrs_u16_04  is defined

  - debug: msg="vrs_el6 is set to "{{ vrs_el6 }}" " verbosity=1
    when: vrs_el6 is defined

  - debug: msg="vrs_el7 is set to "{{ vrs_el7 }}" " verbosity=1
    when: vrs_el7 is defined

  - block:

    - name: Find name of VRS Package Files (EL6 architecture)
      find: path="{{ nuage_unzipped_files_dir }}/vrs/el6" use_regex=yes pattern="nuage-openvswitch-\d+.*" recurse=yes
      register: rc_vrs_file_el6

    - debug: var=rc_vrs_file_el6 verbosity=1

    - name: Verify that VRS file was found
      assert: {
        that: "{{ rc_vrs_file_el6.matched }} > 0",
        msg: "Unable to find VRS files"
        }

    - name: Register VRS package variables with proper path and image locations for use in other playbooks (EL6 architecture)
      set_fact:
        el6_vrs_package_path: "{{ rc_vrs_file_el6.files[0].path | dirname }}/"
        el6_vrs_package_file_name_list: "{{ rc_vrs_file_el6.files |  map(attribute='path') | list | map('basename') | list }}"

    - name: Find name of nuage DKMS Package Files (EL6 architecture)
      find: path="{{ nuage_unzipped_files_dir }}/vrs/el6" pattern="nuage-openvswitch-dkms*.rpm" recurse=yes
      register: rc_dkms_file_el6

    - debug: var=rc_dkms_file_el6 verbosity=1

    - name: Verify that DKMS file was found
      assert: {
        that: "{{ rc_dkms_file_el6.matched }} > 0",
        msg: "Unable to find DKMS files"
        }
    
    - name: Register DKMS package variables with proper path and image locations for use in other playbooks (EL6 architecture)
      set_fact:
        el6_dkms_package_path: "{{ rc_dkms_file_el6.files[0].path | dirname }}/"
        el6_dkms_package_file_name_list: "{{ rc_dkms_file_el6.files |  map(attribute='path') | list | map('basename') | list }}"

    when: vrs_el6|default(false)

  - block:

    - name: Find name of VRS Package Files (EL7 architecture)
      find: path="{{ nuage_unzipped_files_dir }}/vrs/el7" use_regex=yes pattern="nuage-openvswitch-\d+.*" recurse=yes
      register: rc_vrs_file_el7

    - debug: var=rc_vrs_file_el7 verbosity=1

    - name: Verify that VRS file was found
      assert: {
        that: "{{ rc_vrs_file_el7.matched }} > 0",
        msg: "Unable to find VRS files"
        }

    - name: Register VRS package variables with proper path and image locations for use in other playbooks (EL7 architecture)
      set_fact:
        el7_vrs_package_path: "{{ rc_vrs_file_el7.files[0].path | dirname }}/"
        el7_vrs_package_file_name_list: "{{ rc_vrs_file_el7.files |  map(attribute='path') | list | map('basename') | list }}"
    
    - name: Find name of nuage DKMS Package Files (EL7 architecture)
      find: path="{{ nuage_unzipped_files_dir }}/vrs/el7" pattern="nuage-openvswitch-dkms*.rpm" recurse=yes
      register: rc_dkms_file_el7

    - debug: var=rc_dkms_file_el7 verbosity=1

    - name: Verify that DKMS file was found
      assert: {
        that: "{{ rc_dkms_file_el7.matched }} > 0",
        msg: "Unable to find DKMS files"
        }
    
    - name: Register DKMS package variables with proper path and image locations for use in other playbooks (EL7 architecture)
      set_fact:
        el7_dkms_package_path: "{{ rc_dkms_file_el7.files[0].path | dirname }}/"
        el7_dkms_package_file_name_list: "{{ rc_dkms_file_el7.files |  map(attribute='path') | list | map('basename') | list }}"
    when: vrs_el7|default(false)

  - block:

    - name: Find name of Selinux Package Files (EL7 architecture)
      find: path="{{ nuage_unzipped_files_dir }}/selinux"  pattern="selinux-policy-nuage-[0-9]*.rpm" recurse=yes
      register: rc_selinux_file

    - debug: var=rc_selinux_file verbosity=1

    - name: Register Selinux package variables with proper path and image locations for use in other playbooks (EL7 architecture)
      set_fact:
        selinux_package_path: "{{ rc_selinux_file.files[0].path | dirname }}/"
        selinux_package_file_name_list: "{{ rc_selinux_file.files |  map(attribute='path') | list | map('basename') | list }}"
      when: rc_selinux_file.matched

    when: vrs_el7|default(false)

  - block:

    # Debian requires 3 packages listed in a specific order of dependeny
    - name: Find name of VRS python package file (Debian architecture)
      find: path="{{ nuage_unzipped_files_dir }}/vrs/u14_04"  pattern="nuage-python-openvswitch*.deb" recurse=yes
      register: rc_vrs_python_file_u14_04

    - debug: var=rc_vrs_python_file_u14_04 verbosity=1

    - name: Verify that VRS python package file was found
      assert: {
        that: "{{ rc_vrs_python_file_u14_04.matched }} > 0",
        msg: "Unable to find VRS python package for Ubuntu 14.04"
        }

    - name: Register VRS package path and VRS python package file name for use in other playbooks (Debian Architecture)
      set_fact:
        u14_04_vrs_package_path: "{{ rc_vrs_python_file_u14_04.files[0].path | dirname }}/"
        u14_04_vrs_package_file_name_list: "{{ rc_vrs_python_file_u14_04.files |  map(attribute='path') | list | map('basename') | list }}"

    - name: Find name of VRS common package file (Debian architecture)
      find: path="{{ nuage_unzipped_files_dir }}/vrs/u14_04"  pattern="nuage-openvswitch-common*.deb" recurse=yes
      register: rc_vrs_common_file_u14_04

    - debug: var=rc_vrs_common_file_u14_04 verbosity=1

    - name: Verify that VRS common package file was found
      assert: {
        that: "{{ rc_vrs_common_file_u14_04.matched }} > 0",
        msg: "Unable to find VRS common file"
        }

    - name: Register VRS common package file name for use in other playbooks (Debian Architecture)
      set_fact:
        u14_04_vrs_package_file_name_list: "{{ u14_04_vrs_package_file_name_list }} + {{ rc_vrs_common_file_u14_04.files |  map(attribute='path') | list | map('basename') | list }}"

    - name: Find name of VRS switch package file (Debian architecture)
      find: path="{{ nuage_unzipped_files_dir }}/vrs/u14_04"  pattern="nuage-openvswitch-switch*.deb" recurse=yes
      register: rc_vrs_switch_file_u14_04

    - debug: var=rc_vrs_switch_file_u14_04 verbosity=1

    - name: Verify that VRS switch package file was found
      assert: {
        that: "{{ rc_vrs_switch_file_u14_04.matched }} > 0",
        msg: "Unable to find VRS switch file"
        }

    - name: Register VRS switch package file name for use in other playbooks (Debian Architecture)
      set_fact:
        u14_04_vrs_package_file_name_list: "{{ u14_04_vrs_package_file_name_list }} + {{ rc_vrs_switch_file_u14_04.files |  map(attribute='path') | list | map('basename') | list }}"

    - name: Find name of DKMS package file (Debian architecture)
      find: path="{{ nuage_unzipped_files_dir }}/vrs/u14_04"  pattern="nuage-openvswitch-datapath-dkms*.deb" recurse=yes
      register: rc_dkms_file_u14_04

    - debug: var=rc_dkms_file_u14_04 verbosity=1

    - name: Verify that DKMS package file was found
      assert: {
        that: "{{ rc_dkms_file_u14_04.matched }} > 0",
        msg: "Unable to find DKMS package for Ubuntu 14.04"
        }

    - name: Register DKMS package path and package file name for use in other playbooks (Debian Architecture)
      set_fact:
        u14_04_dkms_package_path: "{{ rc_dkms_file_u14_04.files[0].path | dirname }}/"
        u14_04_dkms_package_file_name_list: "{{ rc_dkms_file_u14_04.files |  map(attribute='path') | list | map('basename') | list }}"

    when: vrs_u14_04|default(false)

  - block:

     # Debian requires 3 packages listed in a specific order of dependeny
      - name: Find name of VRS python package file (Debian architecture)
        find: path="{{ nuage_unzipped_files_dir }}/vrs/u16_04"  pattern="nuage-python-openvswitch*.deb" recurse=yes
        register: rc_vrs_python_file_u16_04

      - debug: var=rc_vrs_python_file_u16_04 verbosity=1

      - name: Verify that VRS python package file was found
        assert: {
          that: "{{ rc_vrs_python_file_u16_04.matched }} > 0",
          msg: "Unable to find VRS python package for Ubuntu 16.04"
          }

      - name: Register VRS package path and VRS python package file name for use in other playbooks (Debian Architecture)
        set_fact:
          u16_04_vrs_package_path: "{{ rc_vrs_python_file_u16_04.files[0].path | dirname }}/"
          u16_04_vrs_package_file_name_list: "{{ rc_vrs_python_file_u16_04.files |  map(attribute='path') | list | map('basename') | list }}"

      - name: Find name of VRS common package file (Debian architecture)
        find: path="{{ nuage_unzipped_files_dir }}/vrs/u16_04"  pattern="nuage-openvswitch-common*.deb" recurse=yes
        register: rc_vrs_common_file_u16_04

      - debug: var=rc_vrs_common_file_u16_04 verbosity=1

      - name: Verify that VRS common package file was found
        assert: {
          that: "{{ rc_vrs_common_file_u16_04.matched }} > 0",
          msg: "Unable to find VRS common file"
          }

      - name: Register VRS common package file name for use in other playbooks (Debian Architecture)
        set_fact:
          u16_04_vrs_package_file_name_list: "{{ u16_04_vrs_package_file_name_list }} + {{ rc_vrs_common_file_u16_04.files |  map(attribute='path') | list | map('basename') | list }}"

      - name: Find name of VRS switch package file (Debian architecture)
        find: path="{{ nuage_unzipped_files_dir }}/vrs/u16_04"  pattern="nuage-openvswitch-switch*.deb" recurse=yes
        register: rc_vrs_switch_file_u16_04

      - debug: var=rc_vrs_switch_file_u16_04 verbosity=1

      - name: Verify that VRS switch package file was found
        assert: {
          that: "{{ rc_vrs_switch_file_u16_04.matched }} > 0",
          msg: "Unable to find VRS switch file"
          }

      - name: Register VRS switch package file name for use in other playbooks (Debian Architecture)
        set_fact:
          u16_04_vrs_package_file_name_list: "{{ u16_04_vrs_package_file_name_list }} + {{ rc_vrs_switch_file_u16_04.files |  map(attribute='path') | list | map('basename') | list }}"

    when: vrs_u16_04|default(false)

  when:
    - myvrss is defined
    - "'install' in vrs_operations_list|default(['None'])"
  tags:
    - vrs

################
# Libnetwork
#################

- block:

  - name: Check if any of the VRSs have libnetwork_install set
    set_fact: libn = True
    when: item.libnetwork_install|default(False)
    with_items: "{{ myvrss }}"

  when: myvrss is defined

- block:

  - block:

    - name: Find name of libnetwork package Files (RH architecture)
      find: path="{{ nuage_unzipped_files_dir }}/libnetwork"  pattern="*.rpm" recurse=yes
      register: rc_libnetwork_file

    - debug: var=rc_libnetwork_file verbosity=1

    - name: Verify that Libnetwork package file was found
      assert: {
        that: "{{ rc_libnetwork_file.matched }} > 0",
        msg: "Unable to find Libnetwork file"
        }

    - name: Register libnetwork variables with proper path and image locations for use in other playbooks (RH architecture)
      set_fact:
        libnetwork_package_path: "{{ rc_libnetwork_file.files[0].path | dirname }}"
        libnetwork_package_file_name: "{{ rc_libnetwork_file.files[0].path | basename }}"
      when: rc_libnetwork_file.matched > 0

    when: vrs_el6|default(false) or vrs_el7|default(false)

  - block:

    - name: Set libnetwork target path based on version (Ubuntu 14.04 architecture)
      set_fact:
        libnetwork_findfile_path: "{{ nuage_unzipped_files_dir }}/libnetwork/ubuntu-14.04"

    - name: Find name of libnetwork package files (Debian architecture)
      find: path="{{ libnetwork_findfile_path }}"  pattern="*.deb" recurse=yes
      register: rc_libnetwork_file

    - debug: var=rc_libnetwork_file verbosity=1

    - name: Verify that Libnetwork package file was found
      assert: {
        that: "{{ rc_libnetwork_file.matched }} > 0",
        msg: "Unable to find libnetwork file"
        }

    - name: Register libnetwork variables with proper path and image locations for use in other playbooks (Debian architecture)
      set_fact:
        u14_04_libnetwork_package_path: "{{ rc_libnetwork_file.files[0].path | dirname }}"
        u14_04_libnetwork_package_file_name: "{{ rc_libnetwork_file.files[0].path | basename }}"
      when: rc_libnetwork_file.matched > 0

    when: vrs_u14_04|default(false) == True

  - block:

    - name: Set libnetwork target path based on version (Ubuntu 16.04  architecture)
      set_fact:
        libnetwork_findfile_path: "{{ nuage_unzipped_files_dir }}/libnetwork/ubuntu-16.04"

    - name: Find name of libnetwork package files (Debian architecture)
      find: path="{{ libnetwork_findfile_path }}"  pattern="*.deb" recurse=yes
      #find: path="{{ libnetwork_findfile_path  }}/libnetwork/"  pattern="*.deb" recurse=yes
      register: rc_libnetwork_file

    - debug: var=rc_libnetwork_file verbosity=1

    - name: Verify that libnetwork package file was found
      assert: {
        that: "{{ rc_libnetwork_file.matched }} > 0",
        msg: "Unable to find libnetwork file"
        }

    - name: Register libnetwork variables with proper path and image locations for use in other playbooks (Debian architecture)
      set_fact:
        u16_04_libnetwork_package_path: "{{ rc_libnetwork_file.files[0].path | dirname }}"
      when: rc_libnetwork_file.matched > 0

    when: vrs_u16_04|default(false) == True

  when: libn | default(false)
  tags:
    - libnetwork

###################
# DNS - DNS VM
###################

- block:

  - block:

    - name: Verify that vstat path and file name have been defined
      assert: {
        that: "vstat_qcow2_path != 'None'",
        msg: "DNS image is taken from VSTAT, but we can't find the image path. Make sure myvstats is defined in build_vars.yml"
        }

    - name: create dns directory
      file: path={{ nuage_unzipped_files_dir }}/dns state=directory
      remote_user: "{{ ansible_sudo_username }}"

    - name: Copy vstat directory to dns directory
      copy: src={{ vstat_qcow2_path }}/{{ vstat_qcow2_file_name }} dest={{ nuage_unzipped_files_dir }}/dns/dns.qcow2 force=yes
      remote_user: "{{ ansible_sudo_username }}"

    - name: Find name of DNS VM QCOW2 File
      find: path="{{ nuage_unzipped_files_dir }}/dns"  pattern="*.qcow2" recurse=yes
      register: rc_dns_file
      remote_user: "{{ ansible_sudo_username }}"

    - debug: var=rc_dns_file verbosity=1

    - name: Verify that a DNS VM QCOW2 file was found
      assert: {
        that: "{{ rc_dns_file.matched }} > 0",
        msg: "Unable to find DNS VM QCOW2 image file"
        }

    - name: Register DNS QCOW2 variables with proper path and image locations for use in other playbooks
      set_fact:
        dns_qcow2_path: "{{ rc_dns_file.files[0].path | dirname }}"
        dns_qcow2_file_name: "{{ rc_dns_file.files[0].path | basename }}"
      when: rc_dns_file.matched > 0

    when: mydnss | map(attribute='target_server_type') | list | issuperset(["kvm"]) or mydnss | map(attribute='target_server_type') | list | issuperset(["heat"])

  when:
    - mydnss is defined
    - "'install' in dns_operations_list|default(['None']) or
      'upgrade' in dns_operations_list|default(['None'])"
  tags:
    - dns

##########################
## Nuage OpenStack Plugins
##########################

- block:

  - name: Find name of Nuage OpenStack Package Files (RH architecture)
    # Currently only extracts neutron, horizon and heat extensions.
    # TODO: Based on user requirements add a var to support ironic, esxi, nova extensions.
    find: path="{{ nuage_unzipped_files_dir }}/nuage_os/{{ nuage_os_release }}/el7/"  pattern="nuage-openstack-ne*.rpm,nuage-openstack-h*.rpm" recurse=yes
    register: rc_nuage_os_file

  - debug: var=rc_nuage_os_file verbosity=1
  - name: Verify that Nuage OpenStack files were found
    assert: { 
      that: "{{ rc_nuage_os_file.matched }} > 0",
      msg: "Unable to find Nuage OpenStack files"
    }
  - name: Register Nuage OpenStack package variables with proper path and image locations for use in other playbooks (RH architecture)
    set_fact:
      # Note: Do not change the below var to match 'dirname'.
      nuage_os_package_path: "{{ nuage_unzipped_files_dir }}/nuage_os/" 
      nuage_os_package_file_name_list: "{{ rc_nuage_os_file.files |  map(attribute='path') | list | map('basename') | list }}"
      nuage_os_release: "{{ nuage_os_release }}"
  when: 
    - myoscs is defined
    - "'integrate_with_vsd' in osc_operations_list|default(['None'])"
  tags:
    - nuage_os

- name: Ensure that Nuage OS variables are set
  set_fact:
    nuage_os_package_path: "None"
    nuage_os_file_name_list: "None"
    nuage_os_release: "None"
  when: nuage_os_package_path is not defined


#######
# VSR
#######
- block:

  - block:

    - name: Find name of VSR QCOW2 File
      find: path="{{ nuage_unzipped_files_dir }}/vsr"  pattern="sros-vm.qcow2" recurse=yes
      register: rc_vsr_file

    - debug: var=rc_vsr_file verbosity=1

    - name: Verify that a VSR QCOW2 file was found
      assert: {
        that: "{{ rc_vsr_file.matched }} > 0",
        msg: "Unable to find VSR VM QCOW2 image file"
        }

    - name: Register VSR QCOW2 variables with proper path and image locations for use in other playbooks
      set_fact:
        vsr_qcow2_path: "{{ rc_vsr_file.files[0].path | dirname }}"
        vsr_qcow2_file_name: "{{ rc_vsr_file.files[0].path | basename }}"
      when: rc_vsr_file.matched > 0

    when: myvsrs | map(attribute='target_server_type') | list | issuperset(["kvm"])

  - block:

    - name: Find name of VSR OVA File
      find: path="{{ nuage_unzipped_files_dir }}/vsr"  pattern="sros-vm.ova" recurse=yes
      register: rc_vsr_file

    - debug: var=rc_vsr_file verbosity=1

    - name: Verify that a VSR OVA file was found
      assert: {
        that: "{{ rc_vsr_file.matched }} > 0",
        msg: "Unable to find VSR VM OVA image file"
        }

    - name: Register VSR OVA variables with proper path and image locations for use in other playbooks
      set_fact:
        vsr_ova_path: "{{ rc_vsr_file.files[0].path | dirname }}"
        vsr_ova_file_name: "{{ rc_vsr_file.files[0].path | basename }}"
      when: rc_vsr_file.matched > 0

    when: myvsrs | map(attribute='target_server_type') | list | issuperset(["vcenter"])

  when:
    - myvsrs is defined
    - "'install' in vsr_operations_list|default(['None']) or
      'upgrade' in vsr_operations_list|default(['None'])"
  tags:
    - vsr
