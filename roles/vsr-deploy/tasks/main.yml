- name: run show version on remote devices
  local_action:
    module: sros_command
    commands: show system license
    wait_for: result[0] contains sros
    provider: "{{ provider_creds }}"
  register: vsr_license_info
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"

- debug: var=vsr_license_info verbosity=1

- name: Check if license is valid
  fail: msg='VSR reports about "missing license record". Try redeploy with valid license file.'
  when: '"License status : card reboot pending, missing license record" == vsr_license_info.stdout_lines[0][3]'


- name: Configure DNS in BOF
  local_action:
    module: sros_command
    commands:
      - "bof dns-domain {{ dns_domain }}"
      - "bof primary-dns {{ dns_server_list[0] }}"
      - "bof save"
    provider: "{{ provider_creds }}"

- name: Create directories used for rollback and python scripts
  local_action:
    module: sros_command
    commands:
      - "file md {{ rollbackdir }}"
      - "file md {{ scriptdir }}"

- name: Get list of Python scripts
  local_action:
    module: find
    path: "{{ role_path }}/files"
    pattern: "*.py"
  register: rc_pythonscripts

- debug: var=rc_pythonscripts verbosity=1

# name: Copy Python-scripts
  
- name: Set pythonscripts
  set_fact: pythonscripts="{{ rc_pythonscripts.files | map(attribute='path') | list | map('basename') | list | map('splitext') | list | map('first') | list }}"
  when: rc_pythonscripts.matched > 0
 
- debug: var=pythonscripts verbosity=1

- name: Create rollback point
  local_action:
    module: sros_config
    lines:
      - "admin rollback save comment \"Before Metro-Config {{ lookup('pipe', 'date -u +%Y-%m-%d-%H:%M:%s') }}\""
    provider: "{{ provider_creds }}"
  
- name: Ensure build directory exits to store config fragments in
  local_action:
    module: file
    state: directory
    path: "{{ buildpath }}/{{ inventory_hostname }}"

- name: Generate configuration fragments
  local_action:
    module: template
    src: "{{ item.file }}.j2"
    dest: "{{ buildpath }}/{{ inventory_hostname }}/{{ item.prio }}-{{ item.file}}"
  with_items:
    - { file: "system.cfg", prio: "10" }
    - { file: "ports.cfg", prio: "20" }
    - { file: "router.cfg", prio: "30" }
    - { file: "vsd_integration.cfg", prio: "80" }



- name: Create temporary file to use as assembled config file 
  local_action:
    module: tempfile
    state: file
  register: vsr_configfile 



- name: Assemble config file from fragments
  local_action:
    module: assemble
    src: "{{ buildpath }}/{{ inventory_hostname }}"
    dest: "{{ vsr_configfile.path }}"

- name: Show rootified commands that will be sent to VSR
  debug: msg="{{ lookup('file', '{{ vsr_configfile.path }}') | sros_rootify }}" verbosity=1


- name: Configure additional configuration to integrate VSR with Nuage VSD
  local_action:
    module: sros_config
    lines: '{{ lookup("file", "{{ vsr_configfile.path }}" ) | sros_rootify }}' 
    provider: "{{ provider_creds }}"

- name: Save VSR config
  local_action:
    module: sros_config
    save: yes
    provider: "{{ provider_creds }}"

- name: Clean-up temp config file
  local_action: 
    module: file
    path: "{{ vsr_configfile.path }}"
    state: absent
  when: false

