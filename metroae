#!/usr/bin/env bash
set -e

#################################################################################
#                              CONFIG COMMANDS                                  #
#################################################################################

MENU+=(',config'                   'Configure VSD'                                              'config'      ''                         '')
MENU+=(',config,help'              'Displays the help text for metroae config'                  'config'      'help'                     ',config')
MENU+=(',config,version'           'Displays the current metroae config version'                'config'      'version'                  ',config')
MENU+=(',config,engine,update'     'Update the current metroae container to a new version'      'config'      'upgrade-engine'           ',config')

#################################################################################
#                                 UI COMMANDS                                   #
#################################################################################

MENU+=(',ui'                        'Manage metroae GUI'                                        'container'   'stop-ui'                  '')
MENU+=(',ui,stop'                   'Stop the metroae GUI'                                      'container'   'stop-ui'                  ',ui')
MENU+=(',ui,start'                  'Start the metroae GUI'                                     'container'   'start-ui'                 ',ui')
MENU+=(',ui,status'                 'Get the status of the metroae GUI'                         'container'   'status-ui'                ',ui')
MENU+=(',ui,encryption,enable'      'Enable HTTP encryption for the metroae GUI'                'container'   'enable-ui-encryption'     ',ui')
MENU+=(',ui,encryption,disable'     'Disable HTTP encryption for the metroae GUI'               'container'   'disable-ui-encryption'    ',ui')

#################################################################################
#                             CONTAINER COMMANDS                                #
#################################################################################

MENU+=(',container'                 'Manage the metroae container'                              'container'    ''                        '')
MENU+=(',container,pull'            'Pull a new metroae image from the repository'              'container'    'pull'                    ',container')
MENU+=(',container,setup'           'Setup the mertroae container'                              'container'    'setup'                   ',container')
MENU+=(',container,start'           'Start the mertroae container'                              'container'    'start'                   ',container')
MENU+=(',container,stop'            'Stop the mertroae container'                               'container'    'stop'                    ',container')
MENU+=(',container,status'          'Display the status of the mertroae container'              'container'    'status'                  ',container')
MENU+=(',container,destroy'         'Destroy the mertroae container'                            'container'    'destroy'                 ',container')
MENU+=(',container,update'          'Update the mertroae container to the latest version'       'container'    'upgrade-engine'          ',container')
MENU+=(',container,ssh,copyid'      'Copy the container ssh public key to a host'               'container'    'copy-ssh-id'             ',container')

#################################################################################
#                                  VARIABLES                                    #
#################################################################################

# Switch
ANSIBLE_CONFIG_FILE="ansible.cfg"
SHOULD_RUN_WITH_CONTAINER=$false

# Menu
MENU_STRIDE=5                                                          # Menu steps
MENU_KEY=""
SUB_MENU=""
MATCH_MENU=""
EXTRA_ARGS=()
PLAYBOOK_MENU="menu"

# Common
LINUX=0
NON_LINUX=1
CONTAINER_ID=''
RUNNING_CONTAINER_ID=''
IMAGE_ID=''
MAX_CONTAINER_VERSION='current'
REGISTRY_HOST='registry.mv.nuagenetworks.net'
METRO_AE_IMAGE="$REGISTRY_HOST:5000/metroae"
if [ ! -z $IMAGE_NAME ]
then
    METRO_AE_IMAGE="$REGISTRY_HOST:5000/$IMAGE_NAME"
fi
OS_RELEASE=$LINUX
PATH_ARG=""
ENVIRONMENT_FILTERS=(PWD PATH HOME USER SHELL MAIL SSH_CONNECTION LOGNAME OLDPWD LESSOPEN _ XDG_RUNTIME_DIR HISTCONTROL)
CONTAINER_VERSION=1.0.4

S3_KEY="AKIAJOPWRLAXPCUXZX3A"
S3_SECRET="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"
CONTAINER_TAR_FILE=metroaecontainer.tar
S3_BUCKET="nuage-devops"
TEMPORARY_DIRECTORY=/tmp/
INSTALL_FOLDER=/opt/metroae
if [ -z $SCRIPT_LOG_FILE ]
then
    SCRIPT_LOG_FILE=/opt/metroae/metroae.log
fi

if [ -z $SETUP_FILE ]
then
    SETUP_FILE=/opt/metroae/.metroae
fi


# Deployment variables
METROAE_VERSION="v3.2.0"                                               # Version of MetroAE
CURRENT_DIR=`pwd`                                                      # Working directory
PLAYBOOK_DIR=$CURRENT_DIR/src/playbooks                                # Playbook directory
PLAYBOOK_WITH_BUILD_DIR=$CURRENT_DIR/src/playbooks/with_build          # Playbook with build directory
SCHEMA_DIR=$CURRENT_DIR/schemas                                        # Schemas directory
DEPLOYMENTS_BASE_DIR=$CURRENT_DIR/deployments                          # Deployment base directory
DEPLOYMENT_DIR=$DEPLOYMENTS_BASE_DIR/default                           # Deployment directory
INVENTORY_DIR=$CURRENT_DIR/src/inventory                               # Inventory directory
VAULT_ENV_FILE=$CURRENT_DIR/src/vault-env                              # vault env file
ENCRYPTED_DEPLOYMENT_FILE=credentials.yml                              # encrypted deployment file
ENCRYPTED_TOKEN=\$ANSIBLE_VAULT                                        # encrypted token
AUDIT_LOG=audit.log                                                    # audit logs
ORIGINAL_ARGS=""                                                       # Original arguments
SKIP_BUILD=0                                                           # Skip build process
SKIP_PASSWORD=0                                                        # Skip password
POSITIONAL=()                                                          # positional


#################################################################################
#                                   SWITCH                                      #
#################################################################################

function check_run_with_container {
    if [[ -f /source/nuage-metro/$ANSIBLE_CONFIG_FILE ]]; then
        SHOULD_RUN_WITH_CONTAINER=false
    elif [[ -f $SETUP_FILE ]]; then
        SHOULD_RUN_WITH_CONTAINER=true
    else
        confirmation="init"
        while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
        do
            read -p "metroae was run outside of a local clone of the nuage-metro repo and the metroae container is not running. Do you want to setup a container (yes/no): " confirmation
        done

        if [[ $confirmation == "yes" ]] || [[ $confirmation == "y" ]]
        then
            SHOULD_RUN_WITH_CONTAINER=true
        fi
    fi
}

function check_for_menu {
    if [[ -f $ANSIBLE_CONFIG_FILE ]]; then
        if [[ -f $PLAYBOOK_MENU ]]; then
            source $PLAYBOOK_MENU
            return
        fi
    else
        if [[ -f $SETUP_FILE ]]; then
            while read -r line; do declare $line; done < $SETUP_FILE
            if [[ -f $METROAE_MOUNT_POINT/menu ]]; then
                source $METROAE_MOUNT_POINT/menu
                return
            fi            
        fi 
    fi
    echo "It seems that the menu file is missing."
}

#################################################################################
#                                   COMMON                                      #
#################################################################################

function check_docker {
    set +e

    echo "checking docker version" >> $SCRIPT_LOG_FILE
    docker --version >> $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE

    if [ $? -ne 0 ]
    then
        echo "Docker engine must be installed in order to run metroae. Quitting. Please install Docker and try again. See https://docs.docker.com for details"
        exit 1
    fi
    set -e
}

function get_host_operating_system {
    set +e
    stat /etc/os-release >> /dev/null 2>> /dev/null
    if [ $? -ne 0 ]
    then
        OS_RELEASE=$NON_LINUX
    fi
    set -e
}

function get_max_container_version {
    if [ ! -z $IMAGE_TAG ]
    then
        MAX_CONTAINER_VERSION=$IMAGE_TAG
    else
        versions=`docker images | grep $METRO_AE_IMAGE | awk '{ print $2}'`
        MAX_CONTAINER_VERSION=''
        for version in $versions
        do
            if [ -z $MAX_CONTAINER_VERSION ]
            then
                    MAX_CONTAINER_VERSION=$version
            fi

            if [ $MAX_CONTAINER_VERSION \< $version ]
            then
                    MAX_CONTAINER_VERSION=$version
            fi
        done

        if [ -z $MAX_CONTAINER_VERSION ]
        then
            MAX_CONTAINER_VERSION='current'
        fi
    fi

    echo "Newest metroae container version found is $MAX_CONTAINER_VERSION" >> $SCRIPT_LOG_FILE

}

function get_container_id {
    get_max_container_version
    CONTAINER_ID=`docker ps -a | grep $METRO_AE_IMAGE | grep $MAX_CONTAINER_VERSION | awk '{ print $1}'`
}

function get_running_container_id {
    get_max_container_version
    RUNNING_CONTAINER_ID=`docker ps | grep $METRO_AE_IMAGE | grep $MAX_CONTAINER_VERSION | awk '{ print $1}'`
}

function get_image_id {
    get_max_container_version
    IMAGE_ID=`docker images | grep $METRO_AE_IMAGE | grep $MAX_CONTAINER_VERSION | awk '{ print $3}'`
}


function stop {
    get_running_container_id

    if [[ -z $RUNNING_CONTAINER_ID  ]]; then
        echo "The metroae container is not running. Nothing to do."
        return 0
    fi

    set +e
    docker stop $RUNNING_CONTAINER_ID
    status=$?
    if [[ $status -ne 0 ]]; then
        echo "Attempt to stop metroae container failed"
    else
        echo "The metroae container was stopped"
    fi
    set -e

    return $status
}

function delete_container_id {
    get_container_id
    if [[ -z $CONTAINER_ID ]]; then
        echo "metroae container not found. Nothing to do."
        return 0
    fi

    echo "Removing metroae container with id $CONTAINER_ID" >> $SCRIPT_LOG_FILE

    set +e
    docker rm $CONTAINER_ID 2>> $SCRIPT_LOG_FILE

    if [[ $? -ne 0 ]]; then
        echo "Attempt to remove the metroae container failed"
        return 1
    fi
    set -e

    echo "The metroae container was removed"
}

function destroy {
    if [[ -z $1 ]]; then
        confirmation="init"
    else
        confirmation=$1
    fi

    while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
    do
        read -p "Do you really want to destroy the metroae container (yes/no): " confirmation
    done


    if [[ $confirmation != "yes" ]] && [[ $confirmation != "y" ]]
    then
        echo "Destroy of metorae container was canceled"
        return 1
    fi

    set +e
    stop
    if [[ $? -ne 0 ]]; then
        return 1
    fi

    delete_container_id
    if [[ $? -ne 0 ]]; then
        return 1
    fi
    set -e

    get_image_id
    if [[ -z $IMAGE_ID ]]; then
        echo "metroae container image not found. Nothing to do."
        return 0
    fi

    echo "Destroying metroae container..." | tee -a $SCRIPT_LOG_FILE

    set +e
    docker rmi $IMAGE_ID 2 >> $SCRIPT_LOG_FILE

    if [[ $? -ne 0 ]]; then
        echo "Attempt to remove the metroae image failed"
        return 1
    fi
    set -e

    echo "The metroae container image was removed"
    return 0
}

function get_from_s3 {
    CONTAINER_TAR_FILE=metroaecontainer.tar
    aws_path=/images/
    S3_BUCKET='nuage-devops'
    date=$(date +"%a, %d %b %Y %T %z")
    content_type='application/x-compressed-tar'
    string="GET\n\n$content_type\n$date\n/$S3_BUCKET$aws_path$CONTAINER_TAR_FILE"
    signature=$(echo -en "${string}" | openssl sha1 -hmac "${S3_SECRET}" -binary | base64)
    curl -X GET\
        -H "Host: $S3_BUCKET.s3.amazonaws.com" \
        -H "Date: $date" \
        -H "Content-Type: $content_type" \
        -H "Authorization: AWS ${S3_KEY}:$signature" \
        "https://$S3_BUCKET.s3.amazonaws.com$aws_path$CONTAINER_TAR_FILE" > $TEMPORARY_DIRECTORY$CONTAINER_TAR_FILE | tee -a $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE
}

function pull {
    if [[ ! -z $1 ]]; then
        MAX_CONTAINER_VERSION=$1
    fi

    repo="Docker registry"

    ping -c 5 $REGISTRY_HOST >> $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE

    set +e
    if [[ $? -ne 0 || ( ! -z $1 && "$1" = "S3" ) ]]; then
        echo "Could not connect to the Nokia registry to download the metroae container image" | tee -a $SCRIPT_LOG_FILE
        echo "Retrieving the metroae container image from Amazon S3 instead" | tee -a $SCRIPT_LOG_FILE
        get_from_s3

        if [[ $? -ne 0 ]]; then
            echo "Attempt to pull the metroae container image failed. Quitting" | tee -a $SCRIPT_LOG_FILE
            exit 1
        fi

        docker load -i $TEMPORARY_DIRECTORY$CONTAINER_TAR_FILE
        repo="Amazon S3"
    else
        echo "Pulling the metroae container image from Nokia registry..." | tee -a $SCRIPT_LOG_FILE
        docker pull $METRO_AE_IMAGE:$MAX_CONTAINER_VERSION | tee -a $SCRIPT_LOG_FILE
    fi

    status=$?
    if [[ $status -ne 0 ]]; then
        echo "Attempt to pull the $MAX_CONTAINER_VERSION metroae container image failed. Quitting." | tee -a $SCRIPT_LOG_FILE
    else
        echo "Successfully Pulled the metroae container image from $repo" | tee -a $SCRIPT_LOG_FILE
    fi
    set -e

    return $status
}

function run {

    check_for_setup_file

    get_image_id

    if [[ -z $IMAGE_ID ]];  then
        set +e
        pull
        status=$?
        set -e
        if [ $status -ne 0 ]
        then
            echo "Attempt to setup the metroae container failed. Quitting."
            return $status
        fi
    else
        get_container_id

        set +e
        if [[ -z $CONTAINER_ID ]]; then
            while read -r line; do declare $line; done < $SETUP_FILE
            network_args=""
            get_host_operating_system
            if [[ $OS_RELEASE  -eq $LINUX ]]; then
                network_args=" --network host"
            else
                network_args=" -p $UI_PORT:5001"
            fi

            user_name=`whoami`
            group_name=`id -g -n`

            docker run -e USER_NAME=$user_name -e GROUP_NAME=$group_name -t -d $network_args -v $METROAE_MOUNT_POINT:/data:Z -v $IMAGES_MOUNT_POINT:/images:Z --name metroae $METRO_AE_IMAGE:$MAX_CONTAINER_VERSION

        else
            docker start $CONTAINER_ID
        fi

	    status=$?
        if [[ $status -ne 0 ]]; then
            echo "Attempt to run the metroae container failed. Quitting."
        else
            echo "Succesfully started the metroae container"
        fi
        set -e
        return $status
    fi

    return 0
}

function setup {
    local is_config_run=false
    local is_ui_run=false

    echo "Setup MetroÆ container..."

    get_container_id
    get_running_container_id


    if [[ ! -z $CONTAINER_ID ]] || [[ ! -z $RUNNING_CONTAINER_ID ]]; then
        echo "You already have the MetroÆ container set up. Running setup will destroy the"
        echo "existing container and create a new one. Your data on disk will be preserved."
        echo "If you continue, create the new container, and use the same data"
        echo "mount point, no changes are required. If you change the mount points, however"
        echo "you will need to copy your existing data to the new mount points."

        confirmation="init"
        while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
        do
            read -p "Do you want to continue with setup (yes/no): " confirmation
        done


        if [[ $confirmation != "yes" ]] && [[ $confirmation != "y" ]]; then
            echo "Setup canceled by user"
            return 1
        fi
    fi

    set +e

    get_image_id

    if [[ -z $IMAGE_ID ]]; then
        echo "Pulling the existing image"
        pull
    fi

    if [[ $? -ne 0 ]]; then
        return 1
    fi
    set -e

    # Container

    if [[ -z $1 ]]; then
        get_user_path_input "Specify the full path to the directory on the Docker host where the metroae container can access your user data. Setup will create a subdirectory, called metroae_data, in the directory you specify. If the path you specify ends with metroae_data, we will use that subdirectory and not create one."  "metroae container data directory path: " metroae_data
        data_path=$PATH_ARG
    else
        echo "setting data path to passed in parameter $1" | tee -a $SCRIPT_LOG_FILE
        data_path=$1
    fi

    echo METROAE_MOUNT_POINT=$data_path >> $SETUP_FILE

    if [[ -z $2 ]]; then
        get_user_path_input "Specify the full path to the directory on the Docker host where the metroae container can access your Nuage Networks image files. Setup will create a subdirectory, called metroae_images, in the directory you specify. If the path you specify ends with metroae_images, we will use that subdirectory and not create one." "metroae container image directory path: " metroae_images
        images_path=$PATH_ARG
    else
        echo "Setting metroae container image path to $2" | tee -a $SCRIPT_LOG_FILE
        images_path=$2
    fi

    echo IMAGES_MOUNT_POINT=$images_path >> $SETUP_FILE

    # ui
    if [[ ! -z $3 ]]; then
        confirmation="$3"
    else
        confirmation="init"
    fi
    while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
    do
        read -p "Do you want to setup the ui (yes/no): " confirmation
    done


    if [[ $confirmation == "yes" ]] || [[ $confirmation == "y" ]]; then

        get_host_operating_system
        if [[ $OS_RELEASE -eq $NON_LINUX ]]; then
            if [[ -z $4 ]]; then
                echo ""
                read -p "Specify the REST API/GUI access port for the metroae container: " port
            else
                echo "Setting REST API/GUI access port to $4" | tee -a $SCRIPT_LOG_FILE
                port=$4
            fi
            echo UI_PORT=$port >> $SETUP_FILE
        fi
        # Ask if TLS needs to be setup
        if [[ ! -z $5 ]]; then
            confirmation=$5
        else
            confirmation="init"
        fi
        while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
        do
            read -p "Do you want to set a security certificate for the metroae container GUI (yes/no): " confirmation
        done

        if [[ $confirmation == "yes" ]] && [[ $confirmation == "y" ]]; then
            load_certificates
            return 0
        fi
        
        is_ui_run=true
    fi

    # config
    if [[ ! -z $6 ]]; then
        confirmation=$6
    else
        confirmation="init"
    fi
    while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
    do
        read -p "Do you want to setup the config (yes/no): " confirmation
    done


    if [[ $confirmation == "yes" ]] || [[ $confirmation == "y" ]]; then
        echo "We will use the same directory as metroae data path: " $data_path
        
        echo LEVISTATE_MOUNT_POINT=$data_path >> $SETUP_FILE
        is_config_run=true
    fi

    # stop and remove existing container if any
    get_running_container_id
    if [[ ! -z $RUNNING_CONTAINER_ID ]]; then
        echo "Stopping the existing running container"
        stop
    fi

    get_container_id
    if [[ ! -z $CONTAINER_ID ]]; then
        echo "Delete the existing container"
        delete_container_id
    fi

    # First we start the container
    run

    if [[ $is_ui_run == true ]]; then
        start_ui $7
    fi

    status=0
    if [[ $? -ne 0 ]]; then
        return 1
    elif [[ $is_config_run == true ]]; then
        #download the templates and sample user data
        docker_exec_levistate templates update
        status=$?
    fi
    return $status
}

function get_user_path_input {
    valid_path=1
    PATH_ARG=""

    set +e

    while [[ $valid_path -ne 0 ]]
    do
        echo ""
        echo $1
        echo ""
        read -p "$2" PATH_ARG
        echo "Checking path for $1" >> $SCRIPT_LOG_FILE
        stat $PATH_ARG >> $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE

        valid_path=$?
        if [[ $valid_path -ne 0 ]]; then
            echo "Could not validate path. Please try again."
        fi

        # check to see if the path ends with passed in directory
        if [[ "$PATH_ARG" != *"$3" ]]; then
            PATH_ARG=${PATH_ARG%/}/$3
            mkdir -p $PATH_ARG
        fi

    done
    set -e

}

function upgrade_docker {
    set +e
    destroy
    if [[ $? -ne 0 ]]; then
        return 1
    fi
    set -e

    pull
    run
}

function run_container_if_not_running {
    get_running_container_id

    if [[ -z $RUNNING_CONTAINER_ID ]]; then
        run
        get_running_container_id
    fi
}

function docker_exec {
    run_container_if_not_running

    if [[ $1 == "env" ]]; then
        shift
        environment='-e ANSIBLE_FORCE_COLOR=true'
        for env in `env`
        do
            filtered=0
            for filter in ${ENVIRONMENT_FILTERS[@]}
            do
                if [[ "$env" =~ ^$filter ]]
                then
                    filtered=1
                fi
            done

        if [[ $filtered -eq 0 ]]; then
            environment="$environment -e $env"
        fi
        done

        if [[ ! -z $USER_DATA_PATH ]]; then
            environment="$environment -e USER_DATA_PATH=$USER_DATA_PATH"
        fi

        docker exec $environment $RUNNING_CONTAINER_ID "$@"
    else
        docker exec $RUNNING_CONTAINER_ID "$@"
    fi
}

function docker_exec_interactive {
    environment=""
    if [[ ! -z $METROAE_PASSWORD ]]; then
        environment=" -e METROAE_PASSWORD=$METROAE_PASSWORD"
    fi

    if [[ ! -z $NOT_INTERACTIVE ]]; then
        docker exec $environment $RUNNING_CONTAINER_ID "$@"
    else
        docker exec -it $environment $RUNNING_CONTAINER_ID "$@"
    fi
}

function interactive {
    run_container_if_not_running
    docker_exec_interactive /bin/bash
}

function docker_status {
    echo "Script version: $CONTAINER_VERSION"
    get_running_container_id
    if [[ ! -z $RUNNING_CONTAINER_ID ]]; then
        header=`docker ps -a | grep "IMAGE"`
        echo $header
        container_status=`docker ps -a | grep "$METRO_AE_IMAGE"`
        echo $container_status
        docker exec $RUNNING_CONTAINER_ID cat /source/version
    else
        echo "The metroae container is not running. Quitting."
    fi
    echo ""
}

function check_for_user_group {
    uid=`id -u`
    get_host_operating_system
    if [[ $uid -eq 0 ]] || [[ $OS_RELEASE -eq $NON_LINUX ]]; then
        return 0
    fi

    set +e
    docker_group=`getent group docker`
    set -e
    if [[ -z $docker_group ]]; then
        echo "Adding docker group..."
        sudo groupadd docker
        echo "Restarting Docker..."
        sudo systemctl restart docker

        if [[ ! -d $INSTALL_FOLDER ]]; then
            sudo mkdir -p $INSTALL_FOLDER
        fi
        if [[ ! -f $SETUP_FILE ]]; then
            sudo touch $SETUP_FILE
            sudo chmod 0774 $SETUP_FILE
        fi
        if [[ ! -f $SCRIPT_LOG_FILE ]]; then
            sudo touch $SCRIPT_LOG_FILE
            sudo chmod 0774 $SCRIPT_LOG_FILE
        fi
        sudo chown -R root:docker $INSTALL_FOLDER
    fi


    #skip this if the effective user is 0
    uid=`id -u`
    get_host_operating_system

    set +e
    docker_part_of_groups=`groups | grep docker`
    set -e
    if [[ ! -z $1 ]]; then
        input=$1
    fi
    if [[ -z "$docker_part_of_groups" ]]; then
        while [[ $input != "yes" ]] && [[ $input  != "no" ]] && [[ $input  != "y" ]] && [[ $input != "n" ]]
        do
            read -p "Current user must belong to the docker group to proceed. Do you want the current user to be added to the docker group: (yes/no) " input
        done

        if [[ $input != "Yes" ]] && [[ $input != "y" ]] && [[ $input != "yes" ]] && [[ $input != "Y" ]]; then
            echo "Please add the current user to the docker group and retry."
            exit 0
        fi

        echo "Executing privileged commands to add the current user to docker group"
        sudo usermod -aG docker `whoami`
        if [[ -z $NOT_INTERACTIVE ]]; then
            newgrp - docker
        fi
    fi

}

#################################################################################
#                                 DEPLOYMENT                                    #
#################################################################################

function list_workflows {
    for file in $PLAYBOOK_DIR/*.yml
    do
        if [[ -f $file ]]; then
            filename=$(basename "$file")
            filename="${filename%.*}"
            echo $filename
        fi
    done
    for file in $PLAYBOOK_WITH_BUILD_DIR/*.yml
    do
        if [[ -f $file ]]; then
            filename=$(basename "$file")
            filename="${filename%.*}"
            echo $filename
        fi
    done
}

function check_password_needed {
    deployment_dir="$1"

    if [[ -z $METROAE_PASSWORD ]]; then
        if [[ -a $deployment_dir/$ENCRYPTED_DEPLOYMENT_FILE ]]; then
            fail=0
            grep $ENCRYPTED_TOKEN "$deployment_dir/$ENCRYPTED_DEPLOYMENT_FILE" > /dev/null || fail=1
            if [[ $fail -ne 0 ]]; then
                SKIP_PASSWORD=1
            fi
        else
            SKIP_PASSWORD=1
        fi
    else
        SKIP_PASSWORD=1
    fi
}

function ask_password {
    if [[ $SKIP_PASSWORD -ne 1 ]]; then
        echo "The deployment contains encrypted content which requires a password to access."
        echo "Enter the password, below, or add the environment variable METROAE_PASSWORD and retry."
        echo ""
        read -s -p "Enter password: " METROAE_PASSWORD
        export METROAE_PASSWORD
    fi
}

function write_audit_log_entry {
    echo "`date` MetroÆ $METROAE_VERSION $ORIGINAL_ARGS" >> $AUDIT_LOG
}

function audit_log_and_exit {
    echo "`date` MetroÆ $METROAE_VERSION exit code $1" >> $AUDIT_LOG
    exit $1
}

# We just use the old version to parse the options
function deployment_main {
    set +e

    check_run_with_container

    if [[ $SHOULD_RUN_WITH_CONTAINER == true ]]; then
        container_main "$@"
        exit 0
    fi

    ORIGINAL_ARGS="$*"

    #
    # Parse arguments
    #
    SKIP_BUILD=0
    SKIP_PASSWORD=0
    POSITIONAL=()
    while [[ $# -gt 0 ]]
    do
    key="$1"

    case $key in
        -h|--help)
        main_help
        exit 0
        ;;
        --ansible-help)
        $(which ansible-playbook) --help
        exit 0
        ;;
        --list)
        list_workflows
        exit 0
        ;;
        --set-group)
        GROUP="$2"
        touch ansible.log
        chgrp $GROUP ansible.log
        touch $AUDIT_LOG
        chgrp $GROUP $AUDIT_LOG
        shift # past argument
        shift # past value
        ;;
        --skip-build)
        SKIP_BUILD=1
        shift # past argument
        ;;
        --skip-password)
        SKIP_PASSWORD=1
        shift # past argument
        ;;
        *)    # unknown option
        POSITIONAL+=("$1") # save it in an array for later
        shift # past argument
        ;;
    esac
    done
    set -- "${POSITIONAL[@]}" # restore positional parameters

    # Missing workflow, show usage
    if [[ $# -eq 0 ]] || [[ $1 == -* ]]; then
        main_help
        exit 1
    fi

    # <workflow> argument
    WORKFLOW=$1
    shift

    # Add .yml extension if needed
    EXTENSION="${WORKFLOW##*.}"
    if [[ "$EXTENSION" != "yml" ]]; then
        WORKFLOW=${WORKFLOW}.yml
    fi

    # [deployment] argument
    if [[ $# -gt 0 ]]; then
        if [[ $1 != -* ]]; then
            DEPLOYMENT="$1"
            shift
            if [[ -d $DEPLOYMENT ]]; then
                DEPLOYMENT_DIR=$DEPLOYMENT
            elif [[ -d $DEPLOYMENTS_BASE_DIR/$DEPLOYMENT ]]; then
                DEPLOYMENT_DIR=$DEPLOYMENTS_BASE_DIR/$DEPLOYMENT
            else
            echo "Could not find deployment '$DEPLOYMENT' under" $DEPLOYMENTS_BASE_DIR
            exit 1
            fi
        fi
    fi

    # Get password if needed
    check_password_needed "$DEPLOYMENT_DIR"
    ask_password
    if [[ ! -z $METROAE_PASSWORD ]]; then
        export ANSIBLE_VAULT_PASSWORD_FILE=$VAULT_ENV_FILE
    fi

    # Run playbooks
    if [[ -a $PLAYBOOK_DIR/$WORKFLOW  ]]; then
        write_audit_log_entry
        $(which ansible-playbook) -e deployment_dir=\'"$DEPLOYMENT_DIR"\' -e schema_dir=$SCHEMA_DIR $PLAYBOOK_DIR/$WORKFLOW "$@" || audit_log_and_exit $?
    elif [[ -a $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW ]]; then
        write_audit_log_entry
        if [[ $SKIP_BUILD -ne 1 ]]; then
            $(which ansible-playbook) -e deployment_dir=\'"$DEPLOYMENT_DIR"\' -e schema_dir=$SCHEMA_DIR $PLAYBOOK_DIR/build.yml "$@" || audit_log_and_exit $?
            if [[ $GROUP ]]; then chgrp -R $GROUP $INVENTORY_DIR; fi
        fi
        $(which ansible-playbook) $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW "$@" || audit_log_and_exit $?
    else
    echo "Requested metroae workflow could not be found"
    exit 1
    fi

    audit_log_and_exit 0

    set -e

}

#################################################################################
#                                    Config                                     #
#################################################################################

function docker_exec_levistate {
    docker_exec env /usr/bin/python /source/levistate/levistate.py "$@"
}


function config_status {
    docker_status
    if [[ -f $SETUP_FILE ]]; then
        echo "Current metroae container settings..."
        while read -r line; do declare $line; done < $SETUP_FILE
        echo levistate_mount_point=$LEVISTATE_MOUNT_POINT
    else
        echo "metroae container has not been setup. Quitting."
    fi
}

function config_main {

    if [[ ! -f $SETUP_FILE ]]; then
        setup
    fi

    check_docker

    check_for_user_group

    if [[ $# -eq 0 ]]; then
        config_help
    fi

    shopt -s extglob
    POSITIONAL=()
    exec=false
    usage_last=false
    no_arguments=$#
    while [[ $# -gt 0 ]]
    do
        key=$1
        case "$key" in
            help|--h|-h|--help|-help)

            get_running_container_id
            if [[ -z $RUNNING_CONTAINER_ID ]]; then
                config_help
            else
                if [[ $no_arguments -lt 2 ]]; then
                    usage_last=true
                fi
            fi
            POSITIONAL+=("$1")
            exec=true
            shift
            ;;
            pull)
            if [[ -z $2 ]]; then
                pull
            else
                pull $2
                shift
            fi
            shift
            ;;
            setup)
            if [[ -z $2 ]]; then
                setup
            else
                setup $2
                shift
            fi
            shift
            ;;
            start)
            run
            shift
            ;;
            stop)
            stop
            shift
            ;;
            destroy)
            if [[ -z $2 ]]; then
                destroy
            else
                destroy $2
                shift
            fi
            shift
            ;;
            upgrade-engine)
            upgrade_docker
            shift
            ;;
            interactive)
            interactive
            shift
            ;;
            status)
            config_status
            shift
            ;;
            *)
            POSITIONAL+=("$1")
            exec=true
            shift
            ;;
        esac
    done

    if [[ $exec == true ]]; then
        docker_exec_levistate "${POSITIONAL[@]}"
    fi

    # TODO: What is this?
    if [[ $usage_last == true ]]; then
        help print_usage
    fi

}

#################################################################################
#                                  Container                                    #
#################################################################################

function check_for_setup_file {
    set +e
    echo "Checking for metroae container setup file" >> $SCRIPT_LOG_FILE

    stat $SETUP_FILE >> $SCRIPT_LOG_FILE 2>> $SCRIPT_LOG_FILE

    if [[ $? -ne 0 ]]; then
        echo "metroae container setup file not found. Running metroae container setup"
        echo "metroae container setup file not found" >> $SCRIPT_LOG_FILE
        setup
    fi
    set -e
}

function copy_ssh_id {
    if [[ -z $1 ]]; then
        echo "Usage: metroae tools ssh copyid <user@hostname>"
        exit 1
    fi
    run_container_if_not_running

    sshpass=" "
    if [[ ! -z $SSHPASS_PASSWORD ]]; then
       sshpass="sshpass -p$SSHPASS_PASSWORD"
    fi

    if [[ ! -z $NOT_INTERACTIVE ]]; then
       docker exec $RUNNING_CONTAINER_ID $sshpass ssh-copy-id -i /source/id_rsa.pub -o StrictHostKeyChecking=no $1
    else
       docker exec -it $RUNNING_CONTAINER_ID $sshpass ssh-copy-id -i /source/id_rsa.pub -o StrictHostKeyChecking=no $1
    fi
}

function docker_metro_ae_exec {
    docker_exec env /source/nuage-metro/metroae "$@"
}

function stop_ui {
    run_container_if_not_running
    docker exec $RUNNING_CONTAINER_ID /source/UI.sh stop
}

function start_ui {
    run_container_if_not_running

    docker_exec_interactive /source/UI.sh start $1

}

function ui_status {
    run_container_if_not_running
    docker exec $RUNNING_CONTAINER_ID /source/UI.sh status
}

function load_certificates {
    certificate=''
    if [[ -z $1 ]]; then
        read -p "Enter the path to security certificate file: " certificate
    else
        certificate=$1
    fi

    keyfile=''
    if [[ -z $2 ]]; then
        read -p "Enter the path to the security key file: " keyfile
    else
        keyfile=$2
    fi

    get_running_container_id

    docker_exec_interactive /source/UI.sh loadCertificates $certificate $keyfile $3
}

function unzip_files {
    if [[ $# -gt 1 ]]; then
        docker_exec /source/nuage-metro/nuage-unzip.sh "$@"
    else
        docker_exec /source/nuage-metro/nuage-unzip.sh "$@" /images/
    fi
}

function con_build_vars_to_deployments {
    docker_exec /usr/bin/python /source/nuage-metro/convert_build_vars_to_deployment.py "$@"
}

function gen_example_from_schema {
    docker_exec /usr/bin/python /source/nuage-metro/generate_example_from_schema.py "$@"
}

function container_status {
    docker_status
    if [[ -f $SETUP_FILE ]]; then
        echo "Current settings..."
        while read -r line; do declare $line; done < $SETUP_FILE
        echo "metroae container images path: $IMAGES_MOUNT_POINT"
        echo "metroae container data path: $METROAE_MOUNT_POINT"
        get_host_operating_system

        if [[ $OS_RELEASE -eq $LINUX ]]; then
            echo "metroae container access port: 5001"
    	else
            echo "metroae container access port: $UI_PORT"
        fi
    else
        echo "metroae container setup file not found. Quitting."
    fi
}

function vault_password {
    run_container_if_not_running

    docker_exec_interactive /usr/bin/python /source/nuage-metro/encrypt_credentials.py  $1
}

function disable_encryption {
    run_container_if_not_running
    docker exec $RUNNING_CONTAINER_ID /source/UI.sh disable-encryption
}

function container_main {
    if [[ ! -z $GROUP_CHECK ]]; then
        check_for_user_group $1
        shift
        exit 0
    else
        check_for_user_group
    fi

    # check docker
    check_docker

    # main functionality
    if [[ $# -eq 0 ]]; then
        help
        exit 0
    fi

    shopt -s extglob

    POSITIONAL=()
    exec=false
    while [ $# -gt 0 ]
    do
        key=$1
        case $key in
            help|--h|-h|--help|-help)
            container_help
            POSITIONAL+=("$1")
            exec=true
            shift
            ;;
            pull)
            if [[ -z $2 ]]; then
                pull
            else
                pull $2
                shift
            fi
            shift
            ;;
            start)
            run
            shift
            ;;
            setup)
            if [[ $# -gt 1 ]]; then
                shift
                setup "$@"
                shift
                shift
                shift
                shift
                shift
                shift
                shift
            else
                shift
                setup
            fi
            ;;
            stop)
            stop
            shift
            ;;
            destroy)
            if [[ -z $2 ]]; then
                destroy
            else
                destroy $2
            shift
            fi
            shift
            ;;
            upgrade-engine)
            upgrade_docker
            shift
            ;;
            stop-ui)
            stop_ui
            shift
            ;;
            start-ui)
            if [[ -z $2 ]]; then
                start_ui
            else
                start_ui $2
                shift
            fi
            shift
            ;;
            status-ui)
            ui_status
            shift
            ;;
            status)
            container_status
            shift
            ;;
            encrypt-credentials)
            if [[ -z $2 ]]; then
                vault_password
            else
                vault_password $2
                shift
            fi
            shift
            ;;
            enable-ui-encryption)
            load_certificates $2 $3 $4
            shift
            shift
            shift
            shift
            ;;
            disable-ui-encryption)
            disable_encryption
            shift
            ;;
            interactive)
            interactive
            shift
            ;;
            unzip-files)
            shift
            unzip_files "$@"
            exit 0
            ;;
            convert-build-vars-to-deployments)
            shift
            con_build_vars_to_deployments "$@"
            exit 0
            ;;
            generate-example-from-schema)
            shift
            gen_example_from_schema "$@"
            exit 0
            ;;
            copy-ssh-id)
            copy_ssh_id "$2"
            shift
            shift
            ;;
            *)
            POSITIONAL+=("$1")
            exec=true
            shift
            ;;
        esac
    done

    if [[ $exec == true ]]; then
        docker_metro_ae_exec "${POSITIONAL[@]}"
    fi
}

#################################################################################
#                                    Tools                                      #
#################################################################################

function tools_main {
    POSITIONAL=()
    local command_to_run=""
    get_running_container_id
    while [[ $# -gt 0 ]]
    do
        key=$1
        case $key in
            help|--h|-h|--help|-help)
            tools_help ",tools"
            exit 0
            ;;
            unzip-files)
            if [[ -z $RUNNING_CONTAINER_ID ]]; then
                command_to_run="./nuage-unzip.sh"
            else
                command_to_run='/source/nuage-metro/nuage-unzip.sh'
            fi
            shift
            ;;
            convert-build-vars-to-deployments)
            if [[ -z $RUNNING_CONTAINER_ID ]]; then
                command_to_run="/usr/bin/python convert_build_vars_to_deployment.py"
            else
                command_to_run='/usr/bin/python /source/nuage-metro/convert_build_vars_to_deployment.py'
            fi
            shift
            ;;
            generate-example-from-schema)
            if [[ -z $RUNNING_CONTAINER_ID ]]; then
                command_to_run="/usr/bin/python generate_example_from_schema.py"
            else
                command_to_run='/usr/bin/python /source/nuage-metro/generate_example_from_schema.py'
            fi
            shift
            ;;
            encrypt-credentials)
            if [[ -z $RUNNING_CONTAINER_ID ]]; then
                command_to_run="/usr/bin/python encrypt_credentials.py"
            else
                command_to_run='/usr/bin/python /source/nuage-metro/encrypt_credentials.py'
            fi
            shift
            ;;
            *)
            POSITIONAL+=("$1")
            shift
            ;;
        esac
    done

    if [[ $command_to_run == "" ]]; then
        tools_help ",tools"
        exit 1
    fi

    echo "$command_to_run"
    echo "${POSITIONAL[@]}"
    if [[ -z $RUNNING_CONTAINER_ID ]]; then
        eval "$command_to_run ${POSITIONAL[@]}"
    else
        docker_exec env $command_to_run ${POSITIONAL[@]}
    fi
}

#################################################################################
#                                     Help                                      #
#################################################################################

function main_help {
    echo "Nuage Networks Metro Automation Engine (MetroÆ) CLI Version:" $METROAE_VERSION
    echo ""
    echo "metroae usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
    echo ""
    echo "Deployment:"
    echo "The name of a deployment containing the required configuration"
    echo "files. The deployments are stored as directories under:"
    echo $DEPLOYMENTS_BASE_DIR
    echo ""
    echo "Options:"
    echo "  -h, --help:            Displays this help."
    echo "  --ansible-help:        Displays help for ansible arguments."
    echo "  -v, -vv, -vvv, -vvvv:  Runs with increasing levels of verbosity."
    echo "  --list:                Shows a list of all supported workflows"
    echo "  --skip-password:       Do not ask for a password.  Password can be"
    echo "                         provided via the environment variable"
    echo "                         METROAE_PASSWORD"
    echo "  --skip-build:          Runs workflow without performing build."
    echo "                         This will prevent changes in the deployment"
    echo "                         from taking effect, but it will be faster."
    echo "  --set-group <group>:   Sets the ownership of inventory and logs to"
    echo "                         the specified group so that other users in"
    echo "                         the group can access these files."
    echo ""
    echo "Any additional [options] are passed to the internal Ansible engine"
    echo "for processing"
    echo ""
    echo "Additional menu help is available by adding 'help' to the command line,"
    echo "e.g. 'metroae container help'"
}

function container_help {
    echo "Nuage Networks Metro Automation Engine (MetroÆ) CLI Version:" $METROAE_VERSION
    echo ""
    echo "metroae container usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
}

function config_help {
    echo "Nuage Networks Metro Automation Engine (MetroÆ) CLI Version:" $METROAE_VERSION
    echo ""
    echo "metroae config usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1

    get_running_container_id
    if [[ -z $RUNNING_CONTAINER_ID ]]; then
        echo "The metroae container is not running. Can't access full help. Please start the container and try again."
    else
        docker_exec_levistate "$@"
    fi
}

function tools_help {
    echo "Nuage Networks Metro Automation Engine (MetroÆ) CLI Version:" $METROAE_VERSION
    echo ""
    echo "metroae tools usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
}

function ui_help {
    echo "Nuage Networks Metro Automation Engine (MetroÆ) CLI Version:" $METROAE_VERSION
    echo ""
    echo "metroae ui usage:"
    echo ""
    print_menu_help "metroae%-50s %-1s\n" $1
}

#################################################################################
#                                     Menu                                      #
#################################################################################

function switch_help {
    case $1 in
        ,config*)
        config_help "$@"
        exit 0
        ;;
        ,container*)
        container_help "$@"
        exit 0
        ;;
        ,tools*)
        tools_help "$@"
        exit 0
        ;;
        ,ui*)
        ui_help "$@"
        exit 0
        ;;
        *)
        main_help "$@"
        exit 0
        ;;
    esac
}

function get_sub_menu {
    SUB_MENU=""
    for (( i=0; i<=${#MENU[@]}; i+=$MENU_STRIDE )); do
        if [[ ${MENU[@]:$i:1} == $1 ]]; then
            SUB_MENU=("${MENU[@]:$i:$MENU_STRIDE}")
        fi
    done
}

function print_menu_help {
    local match_key=${MATCH_MENU[@]:1:1}
    for (( i=0; i<=${#MENU[@]} - 1; i+=$MENU_STRIDE )); do
        local menu_key=${MENU[@]:$i:1}
        local help_key=${MENU[@]:$i+4:1}
        local command_key=${MENU[@]:$i+2:1}
        if [[ $help_key == $2 ]]; then
            if [[ $command_key == "playbook" ]]; then
                printf "${1}" "${menu_key//,/ } [deployment] [options]" "${MENU[@]:($i + 1):1}"
            else
                printf "${1}" "${menu_key//,/ }" "${MENU[@]:($i + 1):1}"
            fi
        fi
    done
}

function parse_menu_args {
    local args="$@"
    MENU_KEY=""
    MATCH_MENU=""
    EXTRA_ARGS=()
    while [[ $# -gt 0 ]]; do
        if [[ $1 == "help" ]] || [[ $1 == "?" ]] || [[ $1 == "-h" ]] || [[ $1 == "--h" ]] || [[ $1 == "-help" ]] || [[ $1 == "--help" ]]; then
            MATCH_MENU=(",help" "help" "help" "")
            switch_help $MENU_KEY $args
            exit 0
        else
            MENU_KEY=$MENU_KEY","$1
            get_sub_menu $MENU_KEY
            if [[ -z $SUB_MENU ]]; then
                EXTRA_ARGS+=("$1")
            else
                # if we match with different menu, we just clear the extra args
                if [[ "${MATCH_MENU[@]}" != "('${SUB_MENU[@]}')" ]]; then
                    EXTRA_ARGS=()
                fi
                MATCH_MENU=("${SUB_MENU[@]}")
            fi
        fi
        shift
    done
}

#################################################################################
#                                     Main                                      #
#################################################################################

check_for_menu

parse_menu_args "$@"

case ${MATCH_MENU[2]} in
    tools)
    tools_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    exit 0
    ;;
    config)
    config_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    exit 0
    ;;
    playbook)
    deployment_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    exit 0
    ;;
    container)
    container_main ${MATCH_MENU[3]} "${EXTRA_ARGS[@]}"
    exit 0
    ;;
    *)
    deployment_main "$@"
    exit 0
    ;;
esac
