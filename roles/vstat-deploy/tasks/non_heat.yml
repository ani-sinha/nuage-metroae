---
- name: Wait for VSTAT ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ interfaces.mgmt.ip }}"
    search_regex: OpenSSH
    delay: 1
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Update /etc/hosts file on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/hosts
    line: "{{ interfaces.mgmt.ip }} {{ inventory_hostname }}"
  remote_user: "root"

- name: Delete the localtime file on {{ inventory_hostname }}
  file:
    path: /etc/localtime
    state: absent
  remote_user: "root"

- name: Create the localtime symlink on {{ inventory_hostname }}
  file:
    src: /usr/share/zoneinfo/{{ timezone }}
    dest: /etc/localtime
    state: link
  remote_user: "root"

- name: Remove old NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    regexp: "^server"
    state: absent
  remote_user: "root"

- name: Configure NTP servers on {{ inventory_hostname }}
  lineinfile:
    dest: /etc/ntp.conf
    line: "server {{ item }} iburst"
  with_items: "{{ ntp_server_list }}"
  remote_user: "root"

- name: Stop the ntpd service if running
  systemd:
    name: ntpd
    state: stopped
  remote_user: "root"

- name: Manually sync time with ntp server
  command: ntpdate -u "{{ntp_server_list[0]}}"
  remote_user: "root"

- name: Start ntpd on {{ inventory_hostname }}
  systemd:
    name: ntpd
    state: started
  remote_user: "root"

- name: Enable ntpd on boot on {{ inventory_hostname }}
  systemd:
    name: ntpd
    enabled: yes
  remote_user: "root"

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 4
  delay: 5
  ignore_errors: yes
  remote_user: "root"

- block:
  - name: restart ntp if it hasn't synced yet
    systemd:
      name: ntpd
      state: restarted
    remote_user: "root"
  - name: check ntp sync state
    shell: ntpstat | awk 'NR==1{print $1}'
    register: retry_sync_status
    until: retry_sync_status.stdout == "synchronised"
    retries: 4
    delay: 5
    remote_user: "root"
  when: sync_status.stdout != "synchronized"

- name: Resolve "{{vsd_fqdn}}"  to ip addr
  shell: host "{{vsd_fqdn}}" | awk '{print $3,$4}'
  register: ip_addr
  remote_user: "root"

- name: Check for ip addr in the registered var
  fail: msg="Could not resolve ip addr of "{{vsd_fqdn}}" "
  when: ip_addr.stdout == "not found:"
  remote_user: "root"

- name: Config firewall on VSTAT vm to accept conn on ports 9200,9300 from vsd(s)
  script: firewall.sh "{{ ip_addr.stdout.split()[1] }}"
  remote_user: "root"

- name: Restart elastic search {{ inventory_hostname }}
  systemd:
    name: elasticsearch
    state: restarted
  remote_user: "root"

- name: Enable stats collection on the VSD VM
  command: /opt/vsd/vsd-stats.sh -e {{inventory_hostname}}
  delegate_to: "{{vsd_fqdn}}"
  remote_user: "root"
