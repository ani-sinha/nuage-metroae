---
# TODO:
# Check for existing stack or vms

- name: Create subnet in VSD
  local_action: command python {{playbook_dir}}/scripts/create_subnet.py {{playbook_dir}}
  register: vsd_subnet_id

- name: Search for errors in the subnet creation script
  fail: msg={{ vsd_subnet_id.stdout }}
  when: vsd_subnet_id.stdout | search("(?i)ERROR")

- name: Get the public key for the current user
  local_action: command cat ~/.ssh/id_rsa.pub
  register: current_user_ssh_key

- debug: var=ci_flavor

- debug: var=vrs_u14_ci_flavor

- debug: var=vrs_u16_ci_flavor

- name: Create VSD managed subnet, CI slave VM in OpenStack
  register: create_stack
  os_stack:
    name: "{{ inventory_hostname }}"
    template: "roles/ci-predeploy/files/ci_slave.yml"
    auth:
      "{{ os_auth }}"
    parameters:
      vm_name: "{{ inventory_hostname }}"
      vrs_u14_name: "{{ vrs_u14_host_name }}"
      vrs_u16_name: "{{ vrs_u16_host_name }}"
      ci_image: "{{ ci_image }}" 
      ci_flavor: "{{ ci_flavor }}"
      vrs_u14_ci_image: "{{ vrs_u14_ci_image }}"
      vrs_u14_ci_flavor: "{{ vrs_u14_ci_flavor }}"
      vrs_u16_ci_image: "{{ vrs_u16_ci_image }}"
      vrs_u16_ci_flavor: "{{ vrs_u16_ci_flavor }}"
      ssh_key: "{{ current_user_ssh_key.stdout }}"
      subnet_name: "{{ (vsd_subnet_id.stdout|from_json).subnet_name }}"
      network_name: "{{ (vsd_subnet_id.stdout|from_json).net_name }}"
      cidr: "{{ (vsd_subnet_id.stdout|from_json).vsd_net }}/24"
      nuage_netid: "{{ (vsd_subnet_id.stdout|from_json).sub_id }}"
      nuage_partition: "{{ org_name }}"
  delegate_to: 127.0.0.1 
- debug: var=create_stack['stack']['outputs'][0]['output_value']
