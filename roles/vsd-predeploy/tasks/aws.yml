---
# Install Prerequisites
#
- name: Pull facts of localhost
  connection: local
  action: setup

- name: Install boto-module on RedHat OS family distribution
  yum: name=python-boto
  connection: local
  when: ansible_os_family == "RedHat"

- name: Install boto-module on Debian OS family distribution
  apt: name=python-boto
  connection: local
  when: ansible_os_family == "Debian"

- name: Install boto3-module on RedHat OS family distribution
  yum: name=python-boto3
  connection: local
  when: ansible_os_family == "RedHat"

- name: Install boto3-module on Debian OS family distribution
  apt: name=python-boto3
  connection: local
  when: ansible_os_family == "Debian"

- block:
  - name: Deploy new Virtual Private Cloud
    delegate_to: localhost
    cloudformation:
      stack_name: "VPC-{{inventory_hostname | replace('.', '-') }}"
      state: "present"
      region: "{{ aws_region }}"
      template: "{{ role_path }}/files/cfn-template-sample-vpc-structure.json"
      template_parameters: "{{ provision_vpc }}"
    register: rc_aws_cfn_nuagevpc

  - name: Set network variables from VPC
    set_fact: { "{{ item.key }}": "{{ item.value }}" }
    with_items:
     - { key: "NSGLANENI", value: "{{ rc_aws_cfn_nuagevpc.stack_outputs.NSGLANENIId }}" }
     - { key: "NSGWANENI", value: "{{ rc_aws_cfn_nuagevpc.stack_outputs.NSGWANENIId }}" }
     - { key: "NSGLANENIIP", value: "{{ rc_aws_cfn_nuagevpc.stack_outputs.NSGLANENIIP }}" }
    when: rc_aws_cfn_nuagevpc.failed is not defined or not rc_aws_cfn_nuagevpc.failed
  when: provision_vpc is defined

- block:
  - name: Get facts for existing VPC
    delegate_to: localhost
    ec2_eni_facts:
      filters:
        network-interface-id: "{{ use_vpc.nsg_lan_eni }}"
      region:  "{{ aws_region }}"
    register: rc_aws_nsg_lan_eni_facts
  - debug: var=rc_aws_nsg_lan_eni_facts
  - name: Set Network variables
    set_fact: { "{{ item.key }}": "{{ item.value }}" }
    with_items:
     - { key: "NSGLANENI", value: "{{ use_vpc.nsg_lan_eni }}" }
     - { key: "NSGWANENI", value: "{{ use_vpc.nsg_wan_eni }}" }
     - { key: "NSGLANENIIP", value: "{{ rc_aws_nsg_lan_eni_facts.interfaces[0].private_ip_address }}" }
    when: (rc_aws_nsg_lan_eni_facts.interfaces|length > 0 )
  when: use_vpc is defined



- name: Generate CloudFormation Template
  delegate_to: localhost
  template:
    src: "cfn-template-vsd-aws-with-eni.json.j2"
    dest: "/tmp/cfn-template-vsd-aws-with-eni-{{ inventory_hostname }}.json"

- name: Deploy NSG-AWS Stack
  delegate_to: localhost
  cloudformation:
    stack_name: "{{ inventory_hostname }}"
    state: "present"
    region: "{{ aws_region }}"
    template: "/tmp/cfn-template-vsd-aws-with-eni-{{ inventory_hostname }}.json"
    template_parameters:
      AMI: "{{ nsg_ami.id }}"
      InstanceName: "{{ inventory_hostname }}"
      InstanceType: "{{ nsg_ami.type }}"
      KeyName: "{{ nsg_ami.keyname }}"
      NSGLANENI: "{{ NSGLANENI }}"
      NSGWANENI: "{{ NSGWANENI }}"
      NSGWANEIPAllocId: "{{ nsg_ami.eip_allocid | default('') }}"
  register: rc_aws_cfn_nsgami
